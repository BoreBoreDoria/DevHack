{"version":3,"file":"datorama-akita-ng-entity-service.js","sources":["ng://@datorama/akita-ng-entity-service/lib/action-factory.ts","ng://@datorama/akita-ng-entity-service/lib/helpers.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service-notifier.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service.config.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service.loader.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity.service.ts","ng://@datorama/akita-ng-entity-service/datorama-akita-ng-entity-service.ts"],"sourcesContent":["import { EntityServiceAction, NgEntityServiceNotifier } from './ng-entity-service-notifier';\n\nexport function successAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, successMsg }) {\n    notifier.dispatch({\n      type: 'success',\n      storeName,\n      payload,\n      method,\n      successMsg\n    });\n  };\n}\n\nexport function errorAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, errorMsg }) {\n    notifier.dispatch({\n      type: 'error',\n      storeName,\n      payload,\n      method,\n      errorMsg\n    });\n  };\n}\n","import { isNumber, isString } from '@datorama/akita';\n\nexport function isID(idOrConfig: any) {\n  return isNumber(idOrConfig) || isString(idOrConfig);\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Msg } from './types';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE'\n}\n\nexport type ActionType = 'success' | 'error';\n\nexport type EntityServiceAction = {\n  storeName: string;\n  type: ActionType;\n  payload: any;\n  method: HttpMethod;\n} & Msg;\n\nexport const ofType = (type: ActionType) => filter((action: EntityServiceAction) => action.type === type);\n\nexport const filterMethod = (method: HttpMethod | keyof (typeof HttpMethod)) =>\n  filter((action: EntityServiceAction) => action.method === method);\n\nexport const filterStore = (name: string) => filter((action: EntityServiceAction) => action.storeName === name);\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceNotifier {\n  private dispatcher = new Subject<EntityServiceAction>();\n  action$ = this.dispatcher.asObservable();\n\n  dispatch(event: EntityServiceAction) {\n    this.dispatcher.next(event);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgEntityServiceParams } from './types';\nimport { HttpMethod } from './ng-entity-service-notifier';\nimport { isObject } from '@datorama/akita';\n\nexport interface NgEntityServiceGlobalConfig {\n  baseUrl?: string;\n  httpMethods?: Partial<{\n    GET: HttpMethod;\n    POST: HttpMethod;\n    PATCH: HttpMethod;\n    PUT: HttpMethod;\n    DELETE: HttpMethod;\n  }>;\n}\n\nexport const NG_ENTITY_SERVICE_CONFIG = new InjectionToken<NgEntityServiceGlobalConfig>('NgEntityServiceGlobalConfig');\n\nexport const defaultConfig: NgEntityServiceGlobalConfig = {\n  httpMethods: {\n    GET: HttpMethod.GET,\n    POST: HttpMethod.POST,\n    PATCH: HttpMethod.PATCH,\n    PUT: HttpMethod.PUT,\n    DELETE: HttpMethod.DELETE\n  }\n};\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function NgEntityServiceConfig(config: NgEntityServiceParams = {}) {\n  return function(constructor) {\n    if (config.baseUrl) {\n      constructor['baseUrl'] = config.baseUrl;\n    }\n\n    if (config.resourceName) {\n      constructor['resourceName'] = config.resourceName;\n    }\n  };\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { isFunction } from '@datorama/akita';\nimport { HttpMethod } from './ng-entity-service-notifier';\n\ntype Event = { method: HttpMethod; loading: boolean; storeName: string; entityId?: any };\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceLoader {\n  private dispatcher = new Subject<Event>();\n  loading$ = this.dispatcher.asObservable();\n\n  dispatch(event: Event) {\n    this.dispatcher.next(event);\n  }\n\n  loadersFor(name?: string) {\n    const filterStore = filter(({ storeName }: Event) => (name ? storeName === name : true));\n    const filterMethod = mthd =>\n      filter(({ method }: Event) => {\n        return isFunction(mthd) ? mthd(method) : method === mthd;\n      });\n\n    const actionBased = (current: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(current),\n        map(action => action.loading)\n      );\n\n    const idBased = (id: any, mthd: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(mthd),\n        filter(action => action.entityId === id),\n        map(action => action.loading)\n      );\n\n    return {\n      get$: actionBased(HttpMethod.GET),\n      add$: actionBased(HttpMethod.POST),\n      update$: actionBased(method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      delete$: actionBased(HttpMethod.DELETE),\n      getEntity: (id: any) => idBased(id, HttpMethod.GET),\n      updateEntity: (id: any) => idBased(id, method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      deleteEntity: (id: any) => idBased(id, HttpMethod.DELETE)\n    };\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { EntityService, EntityState, EntityStore, getEntityType, getIDType, isDefined } from '@datorama/akita';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { errorAction, successAction } from './action-factory';\nimport { isID } from './helpers';\nimport { EntityServiceAction, HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';\nimport { defaultConfig, mergeDeep, NgEntityServiceGlobalConfig, NG_ENTITY_SERVICE_CONFIG } from './ng-entity-service.config';\nimport { NgEntityServiceLoader } from './ng-entity-service.loader';\nimport { HttpAddConfig, HttpConfig, HttpDeleteConfig, HttpGetConfig, HttpUpdateConfig, NgEntityServiceParams } from './types';\n\nexport const mapResponse = <T>(config?: HttpConfig<T>) => map((res) => (config && !!config.mapResponseFn ? config.mapResponseFn(res) : res));\n\nexport class NgEntityService<S extends EntityState = any> extends EntityService<S> {\n  baseUrl: string | undefined;\n  loader: NgEntityServiceLoader;\n\n  private readonly http: HttpClient;\n  private readonly notifier: NgEntityServiceNotifier;\n  private readonly mergedConfig: NgEntityServiceParams & NgEntityServiceGlobalConfig;\n  private readonly httpMethodMap:\n    | Partial<{\n        GET: HttpMethod;\n        POST: HttpMethod;\n        PATCH: HttpMethod;\n        PUT: HttpMethod;\n        DELETE: HttpMethod;\n      }>\n    | undefined;\n\n  private readonly dispatchSuccess: (action: Partial<EntityServiceAction>) => void;\n  private readonly dispatchError: (action: Partial<EntityServiceAction>) => void;\n\n  constructor(protected readonly store: EntityStore<S>, readonly config: NgEntityServiceParams = {}) {\n    super();\n    this.http = inject(HttpClient);\n    this.loader = inject(NgEntityServiceLoader);\n    this.notifier = inject(NgEntityServiceNotifier);\n    const globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);\n    this.mergedConfig = mergeDeep({}, defaultConfig, globalConfig, this.getDecoratorConfig(), config);\n    this.baseUrl = this.mergedConfig.baseUrl;\n    this.httpMethodMap = this.mergedConfig.httpMethods;\n\n    this.dispatchSuccess = successAction(this.store.storeName, this.notifier);\n    this.dispatchError = errorAction(this.store.storeName, this.notifier);\n  }\n\n  get api() {\n    if (!this.baseUrl) {\n      throw new Error(`baseUrl of ${this.constructor.name} is not defined.`);\n    }\n\n    return `${this.baseUrl}/${this.resourceName}`;\n  }\n\n  get resourceName() {\n    return this.mergedConfig.resourceName || this.store.storeName;\n  }\n\n  setBaseUrl(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  getHttp() {\n    return this.http;\n  }\n\n  getConfig() {\n    return this.mergedConfig;\n  }\n\n  /**\n   * Get one entity - Creates a GET request\n   *\n   * @example\n   * service.get(id).subscribe()\n   * service.get(id, { headers, params, url }).subscribe()\n   */\n  get<T>(id?: getIDType<S>, config?: HttpGetConfig<T>): Observable<T>;\n  /**\n   * Get all entities - Creates a GET request\n   *\n   * @example\n   * service.get().subscribe()\n   * service.get({ headers, params, url }).subscribe()\n   */\n  get<T>(config?: HttpGetConfig<T>): Observable<T>;\n  get<T>(idOrConfig?: getIDType<S> | HttpGetConfig<T>, config?: HttpGetConfig<T>): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.GET);\n    const isSingle = isID(idOrConfig);\n    const entityId = isSingle ? (idOrConfig as getIDType<S>) : undefined;\n    const conf = (!isSingle ? (idOrConfig as HttpGetConfig<T>) : config) || {};\n    const url = this.resolveUrl(conf, entityId);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId,\n      storeName: this.store.storeName,\n    });\n\n    return this.http.request(method, url, conf).pipe(\n      mapResponse(conf),\n      tap((data: any) => {\n        if (!conf.skipWrite) {\n          if (isSingle) {\n            this.store.upsert(entityId, data, (id, newState) => ({ id, ...newState }));\n          } else {\n            if (conf.append) {\n              this.store.add(data);\n            } else if (conf.upsert) {\n              this.store.upsertMany(data);\n            } else {\n              this.store.set(data);\n            }\n          }\n        }\n\n        this.dispatchSuccess({\n          method,\n          payload: data,\n          successMsg: conf.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, conf.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId,\n          storeName: this.store.storeName,\n        });\n      })\n    );\n  }\n\n  /**\n   * Add a new entity - Creates a POST request\n   *\n   * @example\n   * service.add(entity).subscribe()\n   * service.add(entity, config).subscribe()\n   */\n  add<T>(entity: getEntityType<S>, config?: HttpAddConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config);\n    const method = this.getHttpMethod(HttpMethod.POST);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      storeName: this.store.storeName,\n    });\n\n    const configWithBody = { ...config, ...{ body: entity } };\n\n    return this.http.request(method, url, configWithBody).pipe(\n      mapResponse(config),\n      tap((responseEntity: any) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.add(responseEntity, config);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: responseEntity,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName,\n        });\n      })\n    );\n  }\n\n  /**\n   * Update an entity - Creates a PUT/PATCH request\n   *\n   * @example\n   * service.update(id, entity).subscribe()\n   * service.update(id, entity, config).subscribe()\n   */\n  update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config?: HttpUpdateConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config, id);\n    const method = (config && config.method) || this.getHttpMethod(HttpMethod.PUT);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName,\n    });\n\n    const configWithBody = { ...config, ...{ body: entity } };\n\n    return this.http.request(method, url, configWithBody).pipe(\n      mapResponse(config),\n      tap((responseEntity) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.update(id, responseEntity as any);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: responseEntity,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName,\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   * Delete an entity - Creates a DELETE request\n   *\n   * @example\n   * service.delete(id).subscribe()\n   * service.delete(id, config).subscribe()\n   */\n  delete<T>(id: getIDType<S>, config?: HttpDeleteConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config, id);\n    const method = this.getHttpMethod(HttpMethod.DELETE);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName,\n    });\n\n    return this.http.request(method, url, config).pipe(\n      mapResponse(config),\n      tap((res) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.remove(id);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: res,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName,\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   * Gets the mapped HttpMethod.\n   *\n   * The default HttpMethod can be changed like so:\n   * ```ts\n   * {\n   *   provide: NG_ENTITY_SERVICE_CONFIG,\n   *   useValue: {\n   *     httpMethods: {\n   *       PUT: HttpMethod.PATCH,\n   *     },\n   *   } as NgEntityServiceGlobalConfig,\n   * }\n   * ```\n   *\n   * @param type HttpMethod to get the user configured HttpMethod for\n   * @returns User configured HttpMethod for the method, else the default HttpMethod\n   */\n  protected getHttpMethod(type: HttpMethod) {\n    let httpMethod: HttpMethod;\n    if (this.httpMethodMap) {\n      httpMethod = this.httpMethodMap[type];\n    }\n    if (!httpMethod) {\n      throw new Error('Unknown HttpMethod');\n    }\n\n    return httpMethod;\n  }\n\n  /**\n   * Gets the value given via the NgEntityServiceConfig decorator\n   *\n   * ```ts\n   * @NgEntityServiceConfig({\n   *   baseUrl: 'foo',\n   *   resourceName: 'bar',\n   * })\n   * ```\n   *\n   * @param key The property key\n   * @returns The value of the given decorator key\n   */\n  private getDecoratorValue(key: keyof NgEntityServiceParams): string | undefined {\n    return (this.constructor as any)[key];\n  }\n\n  protected getDecoratorConfig() {\n    const config: NgEntityServiceParams = {};\n\n    const baseUrl = this.getDecoratorValue('baseUrl');\n    if (baseUrl) {\n      config.baseUrl = baseUrl;\n    }\n\n    const resourceName = this.getDecoratorValue('resourceName');\n    if (resourceName) {\n      config.resourceName = resourceName;\n    }\n\n    return config;\n  }\n\n  protected resolveUrl(config?: HttpConfig, id?: any) {\n    const { url, urlPostfix } = Object(config) as HttpConfig;\n    let final = this.api;\n\n    if (url) {\n      return url;\n    }\n\n    if (isDefined(id)) {\n      final += `/${id}`;\n    }\n\n    if (urlPostfix) {\n      final += `/${urlPostfix}`;\n    }\n\n    return final;\n  }\n\n  protected handleError(method: HttpMethod, error: any, errorMsg?: string) {\n    this.dispatchError({\n      method,\n      errorMsg,\n      payload: error,\n    });\n\n    return throwError(error);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}