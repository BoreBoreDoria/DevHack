{"version":3,"file":"ng-entity-service-notifier.js","sourceRoot":"ng://@datorama/akita-ng-entity-service/","sources":["lib/ng-entity-service-notifier.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;;AAGxC,MAAM,CAAN,IAAY,UAMX;AAND,WAAY,UAAU;IACpB,yBAAW,CAAA;IACX,2BAAa,CAAA;IACb,yBAAW,CAAA;IACX,6BAAe,CAAA;IACf,+BAAiB,CAAA;AACnB,CAAC,EANW,UAAU,KAAV,UAAU,QAMrB;AAWD,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,IAAgB,IAAK,OAAA,MAAM,CAAC,UAAC,MAA2B,IAAK,OAAA,MAAM,CAAC,IAAI,KAAK,IAAI,EAApB,CAAoB,CAAC,EAA7D,CAA6D,CAAC;AAE1G,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,MAA8C;IACzE,OAAA,MAAM,CAAC,UAAC,MAA2B,IAAK,OAAA,MAAM,CAAC,MAAM,KAAK,MAAM,EAAxB,CAAwB,CAAC;AAAjE,CAAiE,CAAC;AAEpE,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,IAAY,IAAK,OAAA,MAAM,CAAC,UAAC,MAA2B,IAAK,OAAA,MAAM,CAAC,SAAS,KAAK,IAAI,EAAzB,CAAyB,CAAC,EAAlE,CAAkE,CAAC;AAEhH;IAAA;QAEU,eAAU,GAAG,IAAI,OAAO,EAAuB,CAAC;QACxD,YAAO,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;KAK1C;IAHC,0CAAQ,GAAR,UAAS,KAA0B;QACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;;gBAPF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;kCA7BlC;CAqCC,AARD,IAQC;SAPY,uBAAuB","sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Msg } from './types';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE'\n}\n\nexport type ActionType = 'success' | 'error';\n\nexport type EntityServiceAction = {\n  storeName: string;\n  type: ActionType;\n  payload: any;\n  method: HttpMethod;\n} & Msg;\n\nexport const ofType = (type: ActionType) => filter((action: EntityServiceAction) => action.type === type);\n\nexport const filterMethod = (method: HttpMethod | keyof (typeof HttpMethod)) =>\n  filter((action: EntityServiceAction) => action.method === method);\n\nexport const filterStore = (name: string) => filter((action: EntityServiceAction) => action.storeName === name);\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceNotifier {\n  private dispatcher = new Subject<EntityServiceAction>();\n  action$ = this.dispatcher.asObservable();\n\n  dispatch(event: EntityServiceAction) {\n    this.dispatcher.next(event);\n  }\n}\n"]}