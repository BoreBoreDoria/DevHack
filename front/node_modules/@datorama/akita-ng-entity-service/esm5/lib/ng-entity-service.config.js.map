{"version":3,"file":"ng-entity-service.config.js","sourceRoot":"ng://@datorama/akita-ng-entity-service/","sources":["lib/ng-entity-service.config.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAa3C,MAAM,CAAC,IAAM,wBAAwB,GAAG,IAAI,cAAc,CAA8B,6BAA6B,CAAC,CAAC;AAEvH,MAAM,CAAC,IAAM,aAAa,GAAgC;IACxD,WAAW,EAAE;QACX,GAAG,EAAE,UAAU,CAAC,GAAG;QACnB,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,KAAK,EAAE,UAAU,CAAC,KAAK;QACvB,GAAG,EAAE,UAAU,CAAC,GAAG;QACnB,MAAM,EAAE,UAAU,CAAC,MAAM;KAC1B;CACF,CAAC;AAEF,MAAM,UAAU,SAAS,CAAC,MAAM;;IAAE,iBAAU;SAAV,UAAU,EAAV,qBAAU,EAAV,IAAU;QAAV,gCAAU;;IAC1C,IAAI,CAAC,OAAO,CAAC,MAAM;QAAE,OAAO,MAAM,CAAC;IACnC,IAAM,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;IAE/B,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QACxC,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oBAAE,MAAM,CAAC,MAAM,CAAC,MAAM,YAAI,GAAC,GAAG,IAAG,EAAE,MAAG,CAAC;gBACvD,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACrC;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,MAAM,YAAI,GAAC,GAAG,IAAG,MAAM,CAAC,GAAG,CAAC,MAAG,CAAC;aAC/C;SACF;KACF;IAED,OAAO,SAAS,yBAAC,MAAM,GAAK,OAAO,GAAE;AACvC,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,MAAkC;IAAlC,uBAAA,EAAA,WAAkC;IACtE,OAAO,UAAS,WAAW;QACzB,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,WAAW,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;SACzC;QAED,IAAI,MAAM,CAAC,YAAY,EAAE;YACvB,WAAW,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;SACnD;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NgEntityServiceParams } from './types';\nimport { HttpMethod } from './ng-entity-service-notifier';\nimport { isObject } from '@datorama/akita';\n\nexport interface NgEntityServiceGlobalConfig {\n  baseUrl?: string;\n  httpMethods?: Partial<{\n    GET: HttpMethod;\n    POST: HttpMethod;\n    PATCH: HttpMethod;\n    PUT: HttpMethod;\n    DELETE: HttpMethod;\n  }>;\n}\n\nexport const NG_ENTITY_SERVICE_CONFIG = new InjectionToken<NgEntityServiceGlobalConfig>('NgEntityServiceGlobalConfig');\n\nexport const defaultConfig: NgEntityServiceGlobalConfig = {\n  httpMethods: {\n    GET: HttpMethod.GET,\n    POST: HttpMethod.POST,\n    PATCH: HttpMethod.PATCH,\n    PUT: HttpMethod.PUT,\n    DELETE: HttpMethod.DELETE\n  }\n};\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function NgEntityServiceConfig(config: NgEntityServiceParams = {}) {\n  return function(constructor) {\n    if (config.baseUrl) {\n      constructor['baseUrl'] = config.baseUrl;\n    }\n\n    if (config.resourceName) {\n      constructor['resourceName'] = config.resourceName;\n    }\n  };\n}\n"]}