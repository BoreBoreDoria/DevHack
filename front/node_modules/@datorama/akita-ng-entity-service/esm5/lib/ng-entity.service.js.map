{"version":3,"file":"ng-entity.service.js","sourceRoot":"ng://@datorama/akita-ng-entity-service/","sources":["lib/ng-entity.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { EntityService, EntityState, EntityStore, getEntityType, getIDType, isDefined } from '@datorama/akita';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { errorAction, successAction } from './action-factory';\nimport { isID } from './helpers';\nimport { EntityServiceAction, HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';\nimport { defaultConfig, mergeDeep, NgEntityServiceGlobalConfig, NG_ENTITY_SERVICE_CONFIG } from './ng-entity-service.config';\nimport { NgEntityServiceLoader } from './ng-entity-service.loader';\nimport { HttpAddConfig, HttpConfig, HttpDeleteConfig, HttpGetConfig, HttpUpdateConfig, NgEntityServiceParams } from './types';\n\nexport const mapResponse = <T>(config?: HttpConfig<T>) => map((res) => (config && !!config.mapResponseFn ? config.mapResponseFn(res) : res));\n\nexport class NgEntityService<S extends EntityState = any> extends EntityService<S> {\n  baseUrl: string | undefined;\n  loader: NgEntityServiceLoader;\n\n  private readonly http: HttpClient;\n  private readonly notifier: NgEntityServiceNotifier;\n  private readonly mergedConfig: NgEntityServiceParams & NgEntityServiceGlobalConfig;\n  private readonly httpMethodMap:\n    | Partial<{\n        GET: HttpMethod;\n        POST: HttpMethod;\n        PATCH: HttpMethod;\n        PUT: HttpMethod;\n        DELETE: HttpMethod;\n      }>\n    | undefined;\n\n  private readonly dispatchSuccess: (action: Partial<EntityServiceAction>) => void;\n  private readonly dispatchError: (action: Partial<EntityServiceAction>) => void;\n\n  constructor(protected readonly store: EntityStore<S>, readonly config: NgEntityServiceParams = {}) {\n    super();\n    this.http = inject(HttpClient);\n    this.loader = inject(NgEntityServiceLoader);\n    this.notifier = inject(NgEntityServiceNotifier);\n    const globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);\n    this.mergedConfig = mergeDeep({}, defaultConfig, globalConfig, this.getDecoratorConfig(), config);\n    this.baseUrl = this.mergedConfig.baseUrl;\n    this.httpMethodMap = this.mergedConfig.httpMethods;\n\n    this.dispatchSuccess = successAction(this.store.storeName, this.notifier);\n    this.dispatchError = errorAction(this.store.storeName, this.notifier);\n  }\n\n  get api() {\n    if (!this.baseUrl) {\n      throw new Error(`baseUrl of ${this.constructor.name} is not defined.`);\n    }\n\n    return `${this.baseUrl}/${this.resourceName}`;\n  }\n\n  get resourceName() {\n    return this.mergedConfig.resourceName || this.store.storeName;\n  }\n\n  setBaseUrl(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  getHttp() {\n    return this.http;\n  }\n\n  getConfig() {\n    return this.mergedConfig;\n  }\n\n  /**\n   * Get one entity - Creates a GET request\n   *\n   * @example\n   * service.get(id).subscribe()\n   * service.get(id, { headers, params, url }).subscribe()\n   */\n  get<T>(id?: getIDType<S>, config?: HttpGetConfig<T>): Observable<T>;\n  /**\n   * Get all entities - Creates a GET request\n   *\n   * @example\n   * service.get().subscribe()\n   * service.get({ headers, params, url }).subscribe()\n   */\n  get<T>(config?: HttpGetConfig<T>): Observable<T>;\n  get<T>(idOrConfig?: getIDType<S> | HttpGetConfig<T>, config?: HttpGetConfig<T>): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.GET);\n    const isSingle = isID(idOrConfig);\n    const entityId = isSingle ? (idOrConfig as getIDType<S>) : undefined;\n    const conf = (!isSingle ? (idOrConfig as HttpGetConfig<T>) : config) || {};\n    const url = this.resolveUrl(conf, entityId);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId,\n      storeName: this.store.storeName,\n    });\n\n    return this.http.request(method, url, conf).pipe(\n      mapResponse(conf),\n      tap((data: any) => {\n        if (!conf.skipWrite) {\n          if (isSingle) {\n            this.store.upsert(entityId, data, (id, newState) => ({ id, ...newState }));\n          } else {\n            if (conf.append) {\n              this.store.add(data);\n            } else if (conf.upsert) {\n              this.store.upsertMany(data);\n            } else {\n              this.store.set(data);\n            }\n          }\n        }\n\n        this.dispatchSuccess({\n          method,\n          payload: data,\n          successMsg: conf.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, conf.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId,\n          storeName: this.store.storeName,\n        });\n      })\n    );\n  }\n\n  /**\n   * Add a new entity - Creates a POST request\n   *\n   * @example\n   * service.add(entity).subscribe()\n   * service.add(entity, config).subscribe()\n   */\n  add<T>(entity: getEntityType<S>, config?: HttpAddConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config);\n    const method = this.getHttpMethod(HttpMethod.POST);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      storeName: this.store.storeName,\n    });\n\n    const configWithBody = { ...config, ...{ body: entity } };\n\n    return this.http.request(method, url, configWithBody).pipe(\n      mapResponse(config),\n      tap((responseEntity: any) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.add(responseEntity, config);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: responseEntity,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName,\n        });\n      })\n    );\n  }\n\n  /**\n   * Update an entity - Creates a PUT/PATCH request\n   *\n   * @example\n   * service.update(id, entity).subscribe()\n   * service.update(id, entity, config).subscribe()\n   */\n  update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config?: HttpUpdateConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config, id);\n    const method = (config && config.method) || this.getHttpMethod(HttpMethod.PUT);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName,\n    });\n\n    const configWithBody = { ...config, ...{ body: entity } };\n\n    return this.http.request(method, url, configWithBody).pipe(\n      mapResponse(config),\n      tap((responseEntity) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.update(id, responseEntity as any);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: responseEntity,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName,\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   * Delete an entity - Creates a DELETE request\n   *\n   * @example\n   * service.delete(id).subscribe()\n   * service.delete(id, config).subscribe()\n   */\n  delete<T>(id: getIDType<S>, config?: HttpDeleteConfig<T>): Observable<T> {\n    const url = this.resolveUrl(config, id);\n    const method = this.getHttpMethod(HttpMethod.DELETE);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName,\n    });\n\n    return this.http.request(method, url, config).pipe(\n      mapResponse(config),\n      tap((res) => {\n        if (!config || (config && !config.skipWrite)) {\n          this.store.remove(id);\n        }\n        this.dispatchSuccess({\n          method,\n          payload: res,\n          successMsg: config && config.successMsg,\n        });\n      }),\n      catchError((error) => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName,\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   * Gets the mapped HttpMethod.\n   *\n   * The default HttpMethod can be changed like so:\n   * ```ts\n   * {\n   *   provide: NG_ENTITY_SERVICE_CONFIG,\n   *   useValue: {\n   *     httpMethods: {\n   *       PUT: HttpMethod.PATCH,\n   *     },\n   *   } as NgEntityServiceGlobalConfig,\n   * }\n   * ```\n   *\n   * @param type HttpMethod to get the user configured HttpMethod for\n   * @returns User configured HttpMethod for the method, else the default HttpMethod\n   */\n  protected getHttpMethod(type: HttpMethod) {\n    let httpMethod: HttpMethod;\n    if (this.httpMethodMap) {\n      httpMethod = this.httpMethodMap[type];\n    }\n    if (!httpMethod) {\n      throw new Error('Unknown HttpMethod');\n    }\n\n    return httpMethod;\n  }\n\n  /**\n   * Gets the value given via the NgEntityServiceConfig decorator\n   *\n   * ```ts\n   * @NgEntityServiceConfig({\n   *   baseUrl: 'foo',\n   *   resourceName: 'bar',\n   * })\n   * ```\n   *\n   * @param key The property key\n   * @returns The value of the given decorator key\n   */\n  private getDecoratorValue(key: keyof NgEntityServiceParams): string | undefined {\n    return (this.constructor as any)[key];\n  }\n\n  protected getDecoratorConfig() {\n    const config: NgEntityServiceParams = {};\n\n    const baseUrl = this.getDecoratorValue('baseUrl');\n    if (baseUrl) {\n      config.baseUrl = baseUrl;\n    }\n\n    const resourceName = this.getDecoratorValue('resourceName');\n    if (resourceName) {\n      config.resourceName = resourceName;\n    }\n\n    return config;\n  }\n\n  protected resolveUrl(config?: HttpConfig, id?: any) {\n    const { url, urlPostfix } = Object(config) as HttpConfig;\n    let final = this.api;\n\n    if (url) {\n      return url;\n    }\n\n    if (isDefined(id)) {\n      final += `/${id}`;\n    }\n\n    if (urlPostfix) {\n      final += `/${urlPostfix}`;\n    }\n\n    return final;\n  }\n\n  protected handleError(method: HttpMethod, error: any, errorMsg?: string) {\n    this.dispatchError({\n      method,\n      errorMsg,\n      payload: error,\n    });\n\n    return throwError(error);\n  }\n}\n"]}