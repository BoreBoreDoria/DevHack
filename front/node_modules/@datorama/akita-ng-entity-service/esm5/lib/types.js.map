{"version":3,"file":"types.js","sourceRoot":"ng://@datorama/akita-ng-entity-service/","sources":["lib/types.ts"],"names":[],"mappings":"","sourcesContent":["import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { AddEntitiesOptions } from '@datorama/akita';\nimport { HttpMethod } from './ng-entity-service-notifier';\n\nexport interface NgEntityServiceParams {\n  baseUrl?: string;\n  resourceName?: string;\n}\n\ntype _HttpHeaders =\n  | HttpHeaders\n  | {\n      [header: string]: string | string[];\n    };\n\ntype _HttpParams =\n  | HttpParams\n  | {\n      [param: string]: string | string[];\n    };\n\nexport type Msg = {\n  successMsg?: string;\n  errorMsg?: string;\n};\n\nexport type HttpConfig<Entity = any> = {\n  params?: _HttpParams;\n  headers?: _HttpHeaders;\n  url?: string;\n  urlPostfix?: string;\n  mapResponseFn?: (res: any) => Entity | Entity[];\n};\n\ninterface StoreWrite {\n  /**\n   * Disables writing to the store\n   *\n   * You then have to manually write to the store.\n   * This is useful when pairing the NgEntityService with the PaginatorPlugin\n   */\n  skipWrite?: boolean;\n}\n\nexport type HttpGetConfig<Entity = any> = HttpConfig<Entity> & {\n  append?: boolean; // TODO fix type these are mutually exclusive\n  upsert?: boolean;\n} & StoreWrite &\n  Msg;\n\nexport type HttpAddConfig<Entity = any> = HttpConfig<Entity> & Pick<AddEntitiesOptions, 'prepend'> & StoreWrite & Msg;\n\nexport type HttpUpdateConfig<Entity = any> = HttpConfig<Entity> & {\n  method?: HttpMethod.PUT | HttpMethod.PATCH;\n} & StoreWrite &\n  Msg;\n\nexport type HttpDeleteConfig<Entity = any> = HttpConfig<Entity> & StoreWrite & Msg;\n"]}