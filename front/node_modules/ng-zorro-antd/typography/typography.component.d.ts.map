{"version":3,"file":"typography.component.d.ts","sources":["typography.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EmbeddedViewRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { NzResizeService } from 'ng-zorro-antd/core/services';\nimport { BooleanInput, NumberInput, NzSafeAny, NzTSType } from 'ng-zorro-antd/core/types';\nimport { NzI18nService, NzTextI18nInterface } from 'ng-zorro-antd/i18n';\nimport { NzTextCopyComponent } from './text-copy.component';\nimport { NzTextEditComponent } from './text-edit.component';\nexport declare class NzTypographyComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n    nzConfigService: NzConfigService;\n    private host;\n    private cdr;\n    private viewContainerRef;\n    private renderer;\n    private platform;\n    private i18n;\n    private resizeService;\n    readonly _nzModuleName: NzConfigKey;\n    static ngAcceptInputType_nzCopyable: BooleanInput;\n    static ngAcceptInputType_nzEditable: BooleanInput;\n    static ngAcceptInputType_nzDisabled: BooleanInput;\n    static ngAcceptInputType_nzExpandable: BooleanInput;\n    static ngAcceptInputType_nzEllipsis: BooleanInput;\n    static ngAcceptInputType_nzEllipsisRows: NumberInput;\n    nzCopyable: boolean;\n    nzEditable: boolean;\n    nzDisabled: boolean;\n    nzExpandable: boolean;\n    nzEllipsis: boolean;\n    nzCopyTooltips?: [NzTSType, NzTSType] | null;\n    nzCopyIcons: [NzTSType, NzTSType];\n    nzEditTooltip?: null | NzTSType;\n    nzEditIcon: NzTSType;\n    nzContent?: string;\n    nzEllipsisRows: number;\n    nzType: 'secondary' | 'warning' | 'danger' | 'success' | undefined;\n    nzCopyText: string | undefined;\n    nzSuffix: string | undefined;\n    readonly nzContentChange: EventEmitter<string>;\n    readonly nzCopy: EventEmitter<string>;\n    readonly nzExpandChange: EventEmitter<void>;\n    readonly nzOnEllipsis: EventEmitter<boolean>;\n    textEditRef?: NzTextEditComponent;\n    textCopyRef?: NzTextCopyComponent;\n    ellipsisContainer?: ElementRef<HTMLSpanElement>;\n    expandableBtn?: ElementRef<HTMLSpanElement>;\n    contentTemplate?: TemplateRef<{\n        content: string;\n    }>;\n    locale: NzTextI18nInterface;\n    document: Document;\n    expandableBtnElementCache: HTMLElement | null;\n    editing: boolean;\n    ellipsisText: string | undefined;\n    cssEllipsis: boolean;\n    isEllipsis: boolean;\n    expanded: boolean;\n    ellipsisStr: string;\n    get hasEllipsisObservers(): boolean;\n    get canCssEllipsis(): boolean;\n    get hasOperationsWithEllipsis(): boolean;\n    private viewInit;\n    private rfaId;\n    private destroy$;\n    private windowResizeSubscription;\n    get copyText(): string;\n    constructor(nzConfigService: NzConfigService, host: ElementRef<HTMLElement>, cdr: ChangeDetectorRef, viewContainerRef: ViewContainerRef, renderer: Renderer2, platform: Platform, i18n: NzI18nService, document: NzSafeAny, resizeService: NzResizeService);\n    onTextCopy(text: string): void;\n    onStartEditing(): void;\n    onEndEditing(text: string): void;\n    onExpand(): void;\n    canUseCSSEllipsis(): boolean;\n    renderOnNextFrame(): void;\n    getOriginContentViewRef(): {\n        viewRef: EmbeddedViewRef<{\n            content: string;\n        }>;\n        removeView(): void;\n    };\n    syncEllipsis(): void;\n    private getExpandableBtnElement;\n    private renderAndSubscribeWindowResize;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"]}