{"version":3,"file":"input-number.component.d.ts","sources":["input-number.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { BooleanInput, NzSizeLDSType, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\nexport declare class NzInputNumberComponent implements ControlValueAccessor, AfterViewInit, OnChanges, OnInit, OnDestroy {\n    private elementRef;\n    private cdr;\n    private focusMonitor;\n    private directionality;\n    static ngAcceptInputType_nzDisabled: BooleanInput;\n    static ngAcceptInputType_nzAutoFocus: BooleanInput;\n    private autoStepTimer?;\n    private parsedValue?;\n    private value?;\n    private destroy$;\n    displayValue?: string | number;\n    isFocused: boolean;\n    disabledUp: boolean;\n    disabledDown: boolean;\n    dir: Direction;\n    onChange: OnChangeType;\n    onTouched: OnTouchedType;\n    readonly nzBlur: EventEmitter<any>;\n    readonly nzFocus: EventEmitter<any>;\n    inputElement: ElementRef<HTMLInputElement>;\n    nzSize: NzSizeLDSType;\n    nzMin: number;\n    nzMax: number;\n    nzParser: (value: string) => string;\n    nzPrecision?: number;\n    nzPrecisionMode: 'cut' | 'toFixed' | ((value: number | string, precision?: number) => number);\n    nzPlaceHolder: string;\n    nzStep: number;\n    nzInputMode: string;\n    nzId: string | null;\n    nzDisabled: boolean;\n    nzAutoFocus: boolean;\n    nzFormatter: (value: number) => string | number;\n    onModelChange(value: string): void;\n    getCurrentValidValue(value: string | number): number;\n    isNotCompleteNumber(num: string | number): boolean;\n    getValidValue(value?: string | number): string | number | undefined;\n    toNumber(num: string | number): number;\n    getRatio(e: KeyboardEvent): number;\n    down(e: MouseEvent | KeyboardEvent, ratio?: number): void;\n    up(e: MouseEvent | KeyboardEvent, ratio?: number): void;\n    getPrecision(value: number): number;\n    getMaxPrecision(currentValue: string | number, ratio: number): number;\n    getPrecisionFactor(currentValue: string | number, ratio: number): number;\n    upStep(val: string | number, rat: number): number;\n    downStep(val: string | number, rat: number): number;\n    step<T extends keyof NzInputNumberComponent>(type: T, e: MouseEvent | KeyboardEvent, ratio?: number): void;\n    stop(): void;\n    setValue(value: number): void;\n    updateDisplayValue(value: number): void;\n    onKeyDown(e: KeyboardEvent): void;\n    writeValue(value: number): void;\n    registerOnChange(fn: OnChangeType): void;\n    registerOnTouched(fn: OnTouchedType): void;\n    setDisabledState(disabled: boolean): void;\n    focus(): void;\n    blur(): void;\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, focusMonitor: FocusMonitor, directionality: Directionality);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\n"]}