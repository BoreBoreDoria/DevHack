/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
export class NzTreeIndentComponent {
    constructor() {
        this.nzTreeLevel = 0;
        this.nzIsStart = [];
        this.nzIsEnd = [];
        this.nzSelectMode = false;
        this.listOfUnit = [];
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        const { nzTreeLevel } = changes;
        if (nzTreeLevel) {
            this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];
        }
    }
}
NzTreeIndentComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tree-indent',
                exportAs: 'nzTreeIndent',
                template: `
    <span
      [class.ant-tree-indent-unit]="!nzSelectMode"
      [class.ant-select-tree-indent-unit]="nzSelectMode"
      [class.ant-select-tree-indent-unit-start]="nzSelectMode && nzIsStart[i]"
      [class.ant-tree-indent-unit-start]="!nzSelectMode && nzIsStart[i]"
      [class.ant-select-tree-indent-unit-end]="nzSelectMode && nzIsEnd[i]"
      [class.ant-tree-indent-unit-end]="!nzSelectMode && nzIsEnd[i]"
      *ngFor="let _ of listOfUnit; let i = index"
    ></span>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[attr.aria-hidden]': 'true',
                    '[class.ant-tree-indent]': '!nzSelectMode',
                    '[class.ant-select-tree-indent]': 'nzSelectMode'
                }
            },] }
];
NzTreeIndentComponent.propDecorators = {
    nzTreeLevel: [{ type: Input }],
    nzIsStart: [{ type: Input }],
    nzIsEnd: [{ type: Input }],
    nzSelectMode: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pbmRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3ZzdHMvd29yay8xL3MvY29tcG9uZW50cy90cmVlLyIsInNvdXJjZXMiOlsidHJlZS1pbmRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQXdCNUcsTUFBTSxPQUFPLHFCQUFxQjtJQXRCbEM7UUF1QlcsZ0JBQVcsR0FBRyxDQUFDLENBQUM7UUFDaEIsY0FBUyxHQUFjLEVBQUUsQ0FBQztRQUMxQixZQUFPLEdBQWMsRUFBRSxDQUFDO1FBQ3hCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBRTlCLGVBQVUsR0FBYSxFQUFFLENBQUM7SUFVNUIsQ0FBQztJQVJDLFFBQVEsS0FBVSxDQUFDO0lBRW5CLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLElBQUksV0FBVyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQzs7O1lBckNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFOzs7Ozs7Ozs7O0dBVVQ7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLElBQUksRUFBRTtvQkFDSixvQkFBb0IsRUFBRSxNQUFNO29CQUM1Qix5QkFBeUIsRUFBRSxlQUFlO29CQUMxQyxnQ0FBZ0MsRUFBRSxjQUFjO2lCQUNqRDthQUNGOzs7MEJBRUUsS0FBSzt3QkFDTCxLQUFLO3NCQUNMLEtBQUs7MkJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei10cmVlLWluZGVudCcsXG4gIGV4cG9ydEFzOiAnbnpUcmVlSW5kZW50JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8c3BhblxuICAgICAgW2NsYXNzLmFudC10cmVlLWluZGVudC11bml0XT1cIiFuelNlbGVjdE1vZGVcIlxuICAgICAgW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdF09XCJuelNlbGVjdE1vZGVcIlxuICAgICAgW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdC1zdGFydF09XCJuelNlbGVjdE1vZGUgJiYgbnpJc1N0YXJ0W2ldXCJcbiAgICAgIFtjbGFzcy5hbnQtdHJlZS1pbmRlbnQtdW5pdC1zdGFydF09XCIhbnpTZWxlY3RNb2RlICYmIG56SXNTdGFydFtpXVwiXG4gICAgICBbY2xhc3MuYW50LXNlbGVjdC10cmVlLWluZGVudC11bml0LWVuZF09XCJuelNlbGVjdE1vZGUgJiYgbnpJc0VuZFtpXVwiXG4gICAgICBbY2xhc3MuYW50LXRyZWUtaW5kZW50LXVuaXQtZW5kXT1cIiFuelNlbGVjdE1vZGUgJiYgbnpJc0VuZFtpXVwiXG4gICAgICAqbmdGb3I9XCJsZXQgXyBvZiBsaXN0T2ZVbml0OyBsZXQgaSA9IGluZGV4XCJcbiAgICA+PC9zcGFuPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuYXJpYS1oaWRkZW5dJzogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LXRyZWUtaW5kZW50XSc6ICchbnpTZWxlY3RNb2RlJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1pbmRlbnRdJzogJ256U2VsZWN0TW9kZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelRyZWVJbmRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIG56VHJlZUxldmVsID0gMDtcbiAgQElucHV0KCkgbnpJc1N0YXJ0OiBib29sZWFuW10gPSBbXTtcbiAgQElucHV0KCkgbnpJc0VuZDogYm9vbGVhbltdID0gW107XG4gIEBJbnB1dCgpIG56U2VsZWN0TW9kZSA9IGZhbHNlO1xuXG4gIGxpc3RPZlVuaXQ6IG51bWJlcltdID0gW107XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG56VHJlZUxldmVsIH0gPSBjaGFuZ2VzO1xuICAgIGlmIChuelRyZWVMZXZlbCkge1xuICAgICAgdGhpcy5saXN0T2ZVbml0ID0gWy4uLm5ldyBBcnJheShuelRyZWVMZXZlbC5jdXJyZW50VmFsdWUgfHwgMCldO1xuICAgIH1cbiAgfVxufVxuIl19