{"version":3,"sources":["ng://@ngxf/socket.io/lib/directives/socket.io.directive.ts","ng://@ngxf/socket.io/lib/directives/socket.io.on.directive.ts","ng://@ngxf/socket.io/lib/socket.io.module.ts"],"names":["io","io_","SocketIODirective","templateRef","vcr","this","context","$implicit","prototype","ngOnChanges","changes","socketIOOf","destroy","init","ngOnDestroy","socket","createEmbeddedView","clear","viewRef","disconnect","Directive","args","selector","TemplateRef","ViewContainerRef","Input","SocketIOOnDirective","socketIOOnOn","socketIOOnFrom","previousValue","_this","subscription","fromEvent","subscribe","value","detectChanges","unsubscribe","DIRECTIVES","NgxfSocketIOModule","NgModule","declarations","exports"],"mappings":"kaAOMA,EAAKC,mBAkBT,SAAAC,EACUC,EACAC,GADAC,KAAAF,YAAAA,EACAE,KAAAD,IAAAA,EARFC,KAAAC,QAA2B,CACjCC,UAAW,MAqCf,OA3BEL,EAAAM,UAAAC,YAAA,SAAYC,GACNA,EAAQC,YAAcN,KAAKM,aAC7BN,KAAKO,UACLP,KAAKQ,SAITX,EAAAM,UAAAM,YAAA,WACET,KAAKO,WAGCV,EAAAM,UAAAK,KAAR,WACER,KAAKC,QAAQC,UAAYF,KAAKU,OAASf,EAAGK,KAAKM,YAC/CN,KAAKD,IAAIY,mBAAmBX,KAAKF,YAAaE,KAAKC,UAG7CJ,EAAAM,UAAAI,QAAR,WACEP,KAAKD,IAAIa,QACLZ,KAAKa,UACPb,KAAKa,QAAQN,UACbP,KAAKa,QAAU,MAEbb,KAAKU,SACPV,KAAKU,OAAOI,aACZd,KAAKC,QAAQC,UAAYF,KAAKU,OAAS,2BAzC5CK,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0DAdeC,EAAAA,mBAAaC,EAAAA,wDAiBrCC,EAAAA,SAwCHvB,sBCnCE,SAAAwB,EACUvB,EACAC,GADAC,KAAAF,YAAAA,EACAE,KAAAD,IAAAA,EARFC,KAAAC,QAA6B,CACnCC,UAAW,MAoDf,OA1CEmB,EAAAlB,UAAAC,YAAA,SAAYC,IACNA,EAAQiB,cAAgBjB,EAAQkB,kBAClCvB,KAAKO,UACDP,KAAKsB,cAAgBtB,KAAKuB,iBAE1BlB,EAAQiB,aAAaE,gBAAkBxB,KAAKsB,cAC5CjB,EAAQkB,eAAeC,gBAAkBxB,KAAKuB,gBAE9CvB,KAAKQ,UAMba,EAAAlB,UAAAM,YAAA,WACET,KAAKO,WAGCc,EAAAlB,UAAAK,KAAR,WAAA,IAAAiB,EAAAzB,KACEA,KAAK0B,aAAeC,EAAAA,UAAU3B,KAAKuB,eAAgBvB,KAAKsB,cACrDM,WAAS,SAAEC,GACVJ,EAAKxB,QAAQC,UAAY2B,EACzBJ,EAAKZ,QAAUY,EAAK3B,YAAYa,mBAAmBc,EAAKxB,SACxDwB,EAAKZ,QAAQiB,gBACTL,EAAKZ,UACPY,EAAKZ,QAAQN,UACbkB,EAAKZ,QAAU,UAKfQ,EAAAlB,UAAAI,QAAR,WACEP,KAAKD,IAAIa,QACLZ,KAAK0B,eACP1B,KAAK0B,aAAaK,cAClB/B,KAAK0B,aAAe,MAElB1B,KAAKa,UACPb,KAAKa,QAAQN,UACbP,KAAKa,QAAU,2BAzDpBE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,4DAVqEC,EAAAA,mBAAaC,EAAAA,0DAa3FC,EAAAA,8BACAA,EAAAA,SAuDHC,SChEMW,EAAa,CACjBnC,EACAwB,gBAGF,SAAAY,KAIiC,2BAJhCC,EAAAA,SAAQlB,KAAA,CAAC,CACRmB,aAAc,CAAEH,GAChBI,QAAS,CAAEJ,OAEoBC","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef, EmbeddedViewRef, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport * as io_ from 'socket.io-client';\n\n/**\n * Fixes for rollup:\n * Error: Cannot call a namespace ('io')\n */\nconst io = io_;\n\ninterface SocketIOContext {\n  $implicit: SocketIOClient.Socket;\n}\n\n@Directive({\n  selector: '[socketIO]'\n})\nexport class SocketIODirective implements OnChanges, OnDestroy {\n  @Input() socketIOOf: string;\n\n  private context: SocketIOContext = {\n    $implicit: null\n  };\n  private socket: SocketIOClient.Socket;\n  private viewRef: EmbeddedViewRef<SocketIOContext>;\n\n  constructor(\n    private templateRef: TemplateRef<SocketIOContext>,\n    private vcr: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.socketIOOf && this.socketIOOf) {\n      this.destroy();\n      this.init();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy();\n  }\n\n  private init() {\n    this.context.$implicit = this.socket = io(this.socketIOOf);\n    this.vcr.createEmbeddedView(this.templateRef, this.context);\n  }\n\n  private destroy() {\n    this.vcr.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n    if (this.socket) {\n      this.socket.disconnect();\n      this.context.$implicit = this.socket = null;\n    }\n  }\n}\n","import { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { fromEvent, SubscriptionLike } from 'rxjs';\n\nimport 'socket.io-client';\n\ninterface SocketIOOnContext {\n  $implicit: any;\n}\n\n@Directive({\n  selector: '[socketIOOn]'\n})\nexport class SocketIOOnDirective implements OnChanges, OnDestroy {\n  @Input() socketIOOnOn: string;\n  @Input() socketIOOnFrom: SocketIOClient.Socket;\n\n  private context: SocketIOOnContext = {\n    $implicit: null\n  };\n  private subscription: SubscriptionLike;\n  private viewRef: EmbeddedViewRef<SocketIOOnContext>;\n\n  constructor(\n    private templateRef: TemplateRef<SocketIOOnContext>,\n    private vcr: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.socketIOOnOn || changes.socketIOOnFrom) {\n      this.destroy();\n      if (this.socketIOOnOn && this.socketIOOnFrom) {\n        if (\n          changes.socketIOOnOn.previousValue !== this.socketIOOnOn ||\n          changes.socketIOOnFrom.previousValue !== this.socketIOOnFrom\n        ) {\n          this.init();\n        }\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private init() {\n    this.subscription = fromEvent(this.socketIOOnFrom, this.socketIOOnOn)\n      .subscribe((value: any) => {\n        this.context.$implicit = value;\n        this.viewRef = this.templateRef.createEmbeddedView(this.context);\n        this.viewRef.detectChanges();\n        if (this.viewRef) {\n          this.viewRef.destroy();\n          this.viewRef = null;\n        }\n      });\n  }\n\n  private destroy() {\n    this.vcr.clear();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { SocketIODirective } from './directives/socket.io.directive';\nimport { SocketIOOnDirective } from './directives/socket.io.on.directive';\n\nconst DIRECTIVES = [\n  SocketIODirective,\n  SocketIOOnDirective\n];\n\n@NgModule({\n  declarations: [ DIRECTIVES ],\n  exports: [ DIRECTIVES ]\n})\nexport class NgxfSocketIOModule {}\n\nexport { SocketIODirective } from './directives/socket.io.directive';\nexport { SocketIOOnDirective } from './directives/socket.io.on.directive';\n"]}