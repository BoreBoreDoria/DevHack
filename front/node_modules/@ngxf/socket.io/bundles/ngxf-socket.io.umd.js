(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('socket.io-client'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@ngxf/socket.io', ['exports', '@angular/core', 'socket.io-client', 'rxjs'], factory) :
    (global = global || self, factory((global.ngxf = global.ngxf || {}, global.ngxf.socket = global.ngxf.socket || {}, global.ngxf.socket.io = {}), global.ng.core, global.io_, global.rxjs));
}(this, (function (exports, core, io_, rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/socket.io.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Fixes for rollup:
     * Error: Cannot call a namespace ('io')
     * @type {?}
     */
    var io = io_;
    /**
     * @record
     */
    function SocketIOContext() { }
    if (false) {
        /** @type {?} */
        SocketIOContext.prototype.$implicit;
    }
    var SocketIODirective = /** @class */ (function () {
        function SocketIODirective(templateRef, vcr) {
            this.templateRef = templateRef;
            this.vcr = vcr;
            this.context = {
                $implicit: null
            };
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        SocketIODirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.socketIOOf && this.socketIOOf) {
                this.destroy();
                this.init();
            }
        };
        /**
         * @return {?}
         */
        SocketIODirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroy();
        };
        /**
         * @private
         * @return {?}
         */
        SocketIODirective.prototype.init = /**
         * @private
         * @return {?}
         */
        function () {
            this.context.$implicit = this.socket = io(this.socketIOOf);
            this.vcr.createEmbeddedView(this.templateRef, this.context);
        };
        /**
         * @private
         * @return {?}
         */
        SocketIODirective.prototype.destroy = /**
         * @private
         * @return {?}
         */
        function () {
            this.vcr.clear();
            if (this.viewRef) {
                this.viewRef.destroy();
                this.viewRef = null;
            }
            if (this.socket) {
                this.socket.disconnect();
                this.context.$implicit = this.socket = null;
            }
        };
        SocketIODirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[socketIO]'
                    },] }
        ];
        /** @nocollapse */
        SocketIODirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef }
        ]; };
        SocketIODirective.propDecorators = {
            socketIOOf: [{ type: core.Input }]
        };
        return SocketIODirective;
    }());
    if (false) {
        /** @type {?} */
        SocketIODirective.prototype.socketIOOf;
        /**
         * @type {?}
         * @private
         */
        SocketIODirective.prototype.context;
        /**
         * @type {?}
         * @private
         */
        SocketIODirective.prototype.socket;
        /**
         * @type {?}
         * @private
         */
        SocketIODirective.prototype.viewRef;
        /**
         * @type {?}
         * @private
         */
        SocketIODirective.prototype.templateRef;
        /**
         * @type {?}
         * @private
         */
        SocketIODirective.prototype.vcr;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/socket.io.on.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function SocketIOOnContext() { }
    if (false) {
        /** @type {?} */
        SocketIOOnContext.prototype.$implicit;
    }
    var SocketIOOnDirective = /** @class */ (function () {
        function SocketIOOnDirective(templateRef, vcr) {
            this.templateRef = templateRef;
            this.vcr = vcr;
            this.context = {
                $implicit: null
            };
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        SocketIOOnDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.socketIOOnOn || changes.socketIOOnFrom) {
                this.destroy();
                if (this.socketIOOnOn && this.socketIOOnFrom) {
                    if (changes.socketIOOnOn.previousValue !== this.socketIOOnOn ||
                        changes.socketIOOnFrom.previousValue !== this.socketIOOnFrom) {
                        this.init();
                    }
                }
            }
        };
        /**
         * @return {?}
         */
        SocketIOOnDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroy();
        };
        /**
         * @private
         * @return {?}
         */
        SocketIOOnDirective.prototype.init = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscription = rxjs.fromEvent(this.socketIOOnFrom, this.socketIOOnOn)
                .subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.context.$implicit = value;
                _this.viewRef = _this.templateRef.createEmbeddedView(_this.context);
                _this.viewRef.detectChanges();
                if (_this.viewRef) {
                    _this.viewRef.destroy();
                    _this.viewRef = null;
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        SocketIOOnDirective.prototype.destroy = /**
         * @private
         * @return {?}
         */
        function () {
            this.vcr.clear();
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            if (this.viewRef) {
                this.viewRef.destroy();
                this.viewRef = null;
            }
        };
        SocketIOOnDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[socketIOOn]'
                    },] }
        ];
        /** @nocollapse */
        SocketIOOnDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef }
        ]; };
        SocketIOOnDirective.propDecorators = {
            socketIOOnOn: [{ type: core.Input }],
            socketIOOnFrom: [{ type: core.Input }]
        };
        return SocketIOOnDirective;
    }());
    if (false) {
        /** @type {?} */
        SocketIOOnDirective.prototype.socketIOOnOn;
        /** @type {?} */
        SocketIOOnDirective.prototype.socketIOOnFrom;
        /**
         * @type {?}
         * @private
         */
        SocketIOOnDirective.prototype.context;
        /**
         * @type {?}
         * @private
         */
        SocketIOOnDirective.prototype.subscription;
        /**
         * @type {?}
         * @private
         */
        SocketIOOnDirective.prototype.viewRef;
        /**
         * @type {?}
         * @private
         */
        SocketIOOnDirective.prototype.templateRef;
        /**
         * @type {?}
         * @private
         */
        SocketIOOnDirective.prototype.vcr;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/socket.io.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DIRECTIVES = [
        SocketIODirective,
        SocketIOOnDirective
    ];
    var NgxfSocketIOModule = /** @class */ (function () {
        function NgxfSocketIOModule() {
        }
        NgxfSocketIOModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [DIRECTIVES],
                        exports: [DIRECTIVES]
                    },] }
        ];
        return NgxfSocketIOModule;
    }());

    exports.NgxfSocketIOModule = NgxfSocketIOModule;
    exports.SocketIODirective = SocketIODirective;
    exports.SocketIOOnDirective = SocketIOOnDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngxf-socket.io.umd.js.map
