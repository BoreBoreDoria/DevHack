/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import * as io_ from 'socket.io-client';
/**
 * Fixes for rollup:
 * Error: Cannot call a namespace ('io')
 * @type {?}
 */
var io = io_;
/**
 * @record
 */
function SocketIOContext() { }
if (false) {
    /** @type {?} */
    SocketIOContext.prototype.$implicit;
}
var SocketIODirective = /** @class */ (function () {
    function SocketIODirective(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SocketIODirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.socketIOOf && this.socketIOOf) {
            this.destroy();
            this.init();
        }
    };
    /**
     * @return {?}
     */
    SocketIODirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    SocketIODirective.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.context.$implicit = this.socket = io(this.socketIOOf);
        this.vcr.createEmbeddedView(this.templateRef, this.context);
    };
    /**
     * @private
     * @return {?}
     */
    SocketIODirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.vcr.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
        if (this.socket) {
            this.socket.disconnect();
            this.context.$implicit = this.socket = null;
        }
    };
    SocketIODirective.decorators = [
        { type: Directive, args: [{
                    selector: '[socketIO]'
                },] }
    ];
    /** @nocollapse */
    SocketIODirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    SocketIODirective.propDecorators = {
        socketIOOf: [{ type: Input }]
    };
    return SocketIODirective;
}());
export { SocketIODirective };
if (false) {
    /** @type {?} */
    SocketIODirective.prototype.socketIOOf;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.socket;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmlvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3NvY2tldC5pby8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NvY2tldC5pby5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQXdELE1BQU0sZUFBZSxDQUFDO0FBQ3RJLE9BQU8sS0FBSyxHQUFHLE1BQU0sa0JBQWtCLENBQUM7Ozs7OztJQU1sQyxFQUFFLEdBQUcsR0FBRzs7OztBQUVkLDhCQUVDOzs7SUFEQyxvQ0FBaUM7O0FBR25DO0lBWUUsMkJBQ1UsV0FBeUMsRUFDekMsR0FBcUI7UUFEckIsZ0JBQVcsR0FBWCxXQUFXLENBQThCO1FBQ3pDLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBUnZCLFlBQU8sR0FBb0I7WUFDakMsU0FBUyxFQUFFLElBQUk7U0FDaEIsQ0FBQztJQU9DLENBQUM7Ozs7O0lBRUosdUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7OztJQUVELHVDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7OztJQUVPLGdDQUFJOzs7O0lBQVo7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7OztJQUVPLG1DQUFPOzs7O0lBQWY7UUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUM3QztJQUNILENBQUM7O2dCQTNDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCOzs7O2dCQWYwQixXQUFXO2dCQUFFLGdCQUFnQjs7OzZCQWlCckQsS0FBSzs7SUF3Q1Isd0JBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQXpDWSxpQkFBaUI7OztJQUM1Qix1Q0FBNEI7Ozs7O0lBRTVCLG9DQUVFOzs7OztJQUNGLG1DQUFzQzs7Ozs7SUFDdEMsb0NBQWtEOzs7OztJQUdoRCx3Q0FBaUQ7Ozs7O0lBQ2pELGdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBFbWJlZGRlZFZpZXdSZWYsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBpb18gZnJvbSAnc29ja2V0LmlvLWNsaWVudCc7XG5cbi8qKlxuICogRml4ZXMgZm9yIHJvbGx1cDpcbiAqIEVycm9yOiBDYW5ub3QgY2FsbCBhIG5hbWVzcGFjZSAoJ2lvJylcbiAqL1xuY29uc3QgaW8gPSBpb187XG5cbmludGVyZmFjZSBTb2NrZXRJT0NvbnRleHQge1xuICAkaW1wbGljaXQ6IFNvY2tldElPQ2xpZW50LlNvY2tldDtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NvY2tldElPXSdcbn0pXG5leHBvcnQgY2xhc3MgU29ja2V0SU9EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHNvY2tldElPT2Y6IHN0cmluZztcblxuICBwcml2YXRlIGNvbnRleHQ6IFNvY2tldElPQ29udGV4dCA9IHtcbiAgICAkaW1wbGljaXQ6IG51bGxcbiAgfTtcbiAgcHJpdmF0ZSBzb2NrZXQ6IFNvY2tldElPQ2xpZW50LlNvY2tldDtcbiAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8U29ja2V0SU9Db250ZXh0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxTb2NrZXRJT0NvbnRleHQ+LFxuICAgIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc29ja2V0SU9PZiAmJiB0aGlzLnNvY2tldElPT2YpIHtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwcml2YXRlIGluaXQoKSB7XG4gICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdCA9IHRoaXMuc29ja2V0ID0gaW8odGhpcy5zb2NrZXRJT09mKTtcbiAgICB0aGlzLnZjci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwgdGhpcy5jb250ZXh0KTtcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveSgpIHtcbiAgICB0aGlzLnZjci5jbGVhcigpO1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5zb2NrZXQpIHtcbiAgICAgIHRoaXMuc29ja2V0LmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQgPSB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iXX0=