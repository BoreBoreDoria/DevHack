/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.on.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { fromEvent } from 'rxjs';
import 'socket.io-client';
/**
 * @record
 */
function SocketIOOnContext() { }
if (false) {
    /** @type {?} */
    SocketIOOnContext.prototype.$implicit;
}
var SocketIOOnDirective = /** @class */ (function () {
    function SocketIOOnDirective(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SocketIOOnDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.socketIOOnOn || changes.socketIOOnFrom) {
            this.destroy();
            if (this.socketIOOnOn && this.socketIOOnFrom) {
                if (changes.socketIOOnOn.previousValue !== this.socketIOOnOn ||
                    changes.socketIOOnFrom.previousValue !== this.socketIOOnFrom) {
                    this.init();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    SocketIOOnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    SocketIOOnDirective.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = fromEvent(this.socketIOOnFrom, this.socketIOOnOn)
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.context.$implicit = value;
            _this.viewRef = _this.templateRef.createEmbeddedView(_this.context);
            _this.viewRef.detectChanges();
            if (_this.viewRef) {
                _this.viewRef.destroy();
                _this.viewRef = null;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SocketIOOnDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.vcr.clear();
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    SocketIOOnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[socketIOOn]'
                },] }
    ];
    /** @nocollapse */
    SocketIOOnDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    SocketIOOnDirective.propDecorators = {
        socketIOOnOn: [{ type: Input }],
        socketIOOnFrom: [{ type: Input }]
    };
    return SocketIOOnDirective;
}());
export { SocketIOOnDirective };
if (false) {
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnOn;
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnFrom;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmlvLm9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3NvY2tldC5pby8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NvY2tldC5pby5vbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixLQUFLLEVBQXVDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SSxPQUFPLEVBQUUsU0FBUyxFQUFvQixNQUFNLE1BQU0sQ0FBQztBQUVuRCxPQUFPLGtCQUFrQixDQUFDOzs7O0FBRTFCLGdDQUVDOzs7SUFEQyxzQ0FBZTs7QUFHakI7SUFhRSw2QkFDVSxXQUEyQyxFQUMzQyxHQUFxQjtRQURyQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0M7UUFDM0MsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFSdkIsWUFBTyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSTtTQUNoQixDQUFDO0lBT0MsQ0FBQzs7Ozs7SUFFSix5Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQzVDLElBQ0UsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLFlBQVk7b0JBQ3hELE9BQU8sQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxjQUFjLEVBQzVEO29CQUNBLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7Ozs7O0lBRU8sa0NBQUk7Ozs7SUFBWjtRQUFBLGlCQVdDO1FBVkMsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDO2FBQ2xFLFNBQVM7Ozs7UUFBQyxVQUFDLEtBQVU7WUFDcEIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQy9CLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM3QixJQUFJLEtBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLEtBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZCLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVPLHFDQUFPOzs7O0lBQWY7UUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7SUFDSCxDQUFDOztnQkEzREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6Qjs7OztnQkFYZ0YsV0FBVztnQkFBRSxnQkFBZ0I7OzsrQkFhM0csS0FBSztpQ0FDTCxLQUFLOztJQXVEUiwwQkFBQztDQUFBLEFBNURELElBNERDO1NBekRZLG1CQUFtQjs7O0lBQzlCLDJDQUE4Qjs7SUFDOUIsNkNBQStDOzs7OztJQUUvQyxzQ0FFRTs7Ozs7SUFDRiwyQ0FBdUM7Ozs7O0lBQ3ZDLHNDQUFvRDs7Ozs7SUFHbEQsMENBQW1EOzs7OztJQUNuRCxrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVtYmVkZGVkVmlld1JlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb25MaWtlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCAnc29ja2V0LmlvLWNsaWVudCc7XG5cbmludGVyZmFjZSBTb2NrZXRJT09uQ29udGV4dCB7XG4gICRpbXBsaWNpdDogYW55O1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc29ja2V0SU9Pbl0nXG59KVxuZXhwb3J0IGNsYXNzIFNvY2tldElPT25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHNvY2tldElPT25Pbjogc3RyaW5nO1xuICBASW5wdXQoKSBzb2NrZXRJT09uRnJvbTogU29ja2V0SU9DbGllbnQuU29ja2V0O1xuXG4gIHByaXZhdGUgY29udGV4dDogU29ja2V0SU9PbkNvbnRleHQgPSB7XG4gICAgJGltcGxpY2l0OiBudWxsXG4gIH07XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25MaWtlO1xuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxTb2NrZXRJT09uQ29udGV4dD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8U29ja2V0SU9PbkNvbnRleHQ+LFxuICAgIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc29ja2V0SU9Pbk9uIHx8IGNoYW5nZXMuc29ja2V0SU9PbkZyb20pIHtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgaWYgKHRoaXMuc29ja2V0SU9Pbk9uICYmIHRoaXMuc29ja2V0SU9PbkZyb20pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoYW5nZXMuc29ja2V0SU9Pbk9uLnByZXZpb3VzVmFsdWUgIT09IHRoaXMuc29ja2V0SU9Pbk9uIHx8XG4gICAgICAgICAgY2hhbmdlcy5zb2NrZXRJT09uRnJvbS5wcmV2aW91c1ZhbHVlICE9PSB0aGlzLnNvY2tldElPT25Gcm9tXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwcml2YXRlIGluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSBmcm9tRXZlbnQodGhpcy5zb2NrZXRJT09uRnJvbSwgdGhpcy5zb2NrZXRJT09uT24pXG4gICAgICAuc3Vic2NyaWJlKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy50ZW1wbGF0ZVJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5jb250ZXh0KTtcbiAgICAgICAgdGhpcy52aWV3UmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMudmlld1JlZikge1xuICAgICAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgICAgICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGRlc3Ryb3koKSB7XG4gICAgdGhpcy52Y3IuY2xlYXIoKTtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19