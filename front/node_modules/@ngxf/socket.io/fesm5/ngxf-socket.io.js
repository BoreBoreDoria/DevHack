import { Directive, TemplateRef, ViewContainerRef, Input, NgModule } from '@angular/core';
import * as io_ from 'socket.io-client';
import { fromEvent } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Fixes for rollup:
 * Error: Cannot call a namespace ('io')
 * @type {?}
 */
var io = io_;
/**
 * @record
 */
function SocketIOContext() { }
if (false) {
    /** @type {?} */
    SocketIOContext.prototype.$implicit;
}
var SocketIODirective = /** @class */ (function () {
    function SocketIODirective(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SocketIODirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.socketIOOf && this.socketIOOf) {
            this.destroy();
            this.init();
        }
    };
    /**
     * @return {?}
     */
    SocketIODirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    SocketIODirective.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.context.$implicit = this.socket = io(this.socketIOOf);
        this.vcr.createEmbeddedView(this.templateRef, this.context);
    };
    /**
     * @private
     * @return {?}
     */
    SocketIODirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.vcr.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
        if (this.socket) {
            this.socket.disconnect();
            this.context.$implicit = this.socket = null;
        }
    };
    SocketIODirective.decorators = [
        { type: Directive, args: [{
                    selector: '[socketIO]'
                },] }
    ];
    /** @nocollapse */
    SocketIODirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    SocketIODirective.propDecorators = {
        socketIOOf: [{ type: Input }]
    };
    return SocketIODirective;
}());
if (false) {
    /** @type {?} */
    SocketIODirective.prototype.socketIOOf;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.socket;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.vcr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.on.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SocketIOOnContext() { }
if (false) {
    /** @type {?} */
    SocketIOOnContext.prototype.$implicit;
}
var SocketIOOnDirective = /** @class */ (function () {
    function SocketIOOnDirective(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SocketIOOnDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.socketIOOnOn || changes.socketIOOnFrom) {
            this.destroy();
            if (this.socketIOOnOn && this.socketIOOnFrom) {
                if (changes.socketIOOnOn.previousValue !== this.socketIOOnOn ||
                    changes.socketIOOnFrom.previousValue !== this.socketIOOnFrom) {
                    this.init();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    SocketIOOnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    SocketIOOnDirective.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = fromEvent(this.socketIOOnFrom, this.socketIOOnOn)
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.context.$implicit = value;
            _this.viewRef = _this.templateRef.createEmbeddedView(_this.context);
            _this.viewRef.detectChanges();
            if (_this.viewRef) {
                _this.viewRef.destroy();
                _this.viewRef = null;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SocketIOOnDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.vcr.clear();
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    SocketIOOnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[socketIOOn]'
                },] }
    ];
    /** @nocollapse */
    SocketIOOnDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    SocketIOOnDirective.propDecorators = {
        socketIOOnOn: [{ type: Input }],
        socketIOOnFrom: [{ type: Input }]
    };
    return SocketIOOnDirective;
}());
if (false) {
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnOn;
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnFrom;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.vcr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/socket.io.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DIRECTIVES = [
    SocketIODirective,
    SocketIOOnDirective
];
var NgxfSocketIOModule = /** @class */ (function () {
    function NgxfSocketIOModule() {
    }
    NgxfSocketIOModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [DIRECTIVES],
                    exports: [DIRECTIVES]
                },] }
    ];
    return NgxfSocketIOModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngxf-socket.io.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxfSocketIOModule, SocketIODirective, SocketIOOnDirective };
//# sourceMappingURL=ngxf-socket.io.js.map
