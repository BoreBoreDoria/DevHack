import { Directive, TemplateRef, ViewContainerRef, Input, NgModule } from '@angular/core';
import * as io_ from 'socket.io-client';
import { fromEvent } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Fixes for rollup:
 * Error: Cannot call a namespace ('io')
 * @type {?}
 */
const io = io_;
/**
 * @record
 */
function SocketIOContext() { }
if (false) {
    /** @type {?} */
    SocketIOContext.prototype.$implicit;
}
class SocketIODirective {
    /**
     * @param {?} templateRef
     * @param {?} vcr
     */
    constructor(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.socketIOOf && this.socketIOOf) {
            this.destroy();
            this.init();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.context.$implicit = this.socket = io(this.socketIOOf);
        this.vcr.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.vcr.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
        if (this.socket) {
            this.socket.disconnect();
            this.context.$implicit = this.socket = null;
        }
    }
}
SocketIODirective.decorators = [
    { type: Directive, args: [{
                selector: '[socketIO]'
            },] }
];
/** @nocollapse */
SocketIODirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
SocketIODirective.propDecorators = {
    socketIOOf: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SocketIODirective.prototype.socketIOOf;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.socket;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIODirective.prototype.vcr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.on.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SocketIOOnContext() { }
if (false) {
    /** @type {?} */
    SocketIOOnContext.prototype.$implicit;
}
class SocketIOOnDirective {
    /**
     * @param {?} templateRef
     * @param {?} vcr
     */
    constructor(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.socketIOOnOn || changes.socketIOOnFrom) {
            this.destroy();
            if (this.socketIOOnOn && this.socketIOOnFrom) {
                if (changes.socketIOOnOn.previousValue !== this.socketIOOnOn ||
                    changes.socketIOOnFrom.previousValue !== this.socketIOOnFrom) {
                    this.init();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.subscription = fromEvent(this.socketIOOnFrom, this.socketIOOnOn)
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.context.$implicit = value;
            this.viewRef = this.templateRef.createEmbeddedView(this.context);
            this.viewRef.detectChanges();
            if (this.viewRef) {
                this.viewRef.destroy();
                this.viewRef = null;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.vcr.clear();
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
}
SocketIOOnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[socketIOOn]'
            },] }
];
/** @nocollapse */
SocketIOOnDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
SocketIOOnDirective.propDecorators = {
    socketIOOnOn: [{ type: Input }],
    socketIOOnFrom: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnOn;
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnFrom;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.vcr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/socket.io.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DIRECTIVES = [
    SocketIODirective,
    SocketIOOnDirective
];
class NgxfSocketIOModule {
}
NgxfSocketIOModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DIRECTIVES],
                exports: [DIRECTIVES]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngxf-socket.io.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxfSocketIOModule, SocketIODirective, SocketIOOnDirective };
//# sourceMappingURL=ngxf-socket.io.js.map
