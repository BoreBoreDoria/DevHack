/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/socket.io.on.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { fromEvent } from 'rxjs';
import 'socket.io-client';
/**
 * @record
 */
function SocketIOOnContext() { }
if (false) {
    /** @type {?} */
    SocketIOOnContext.prototype.$implicit;
}
export class SocketIOOnDirective {
    /**
     * @param {?} templateRef
     * @param {?} vcr
     */
    constructor(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.socketIOOnOn || changes.socketIOOnFrom) {
            this.destroy();
            if (this.socketIOOnOn && this.socketIOOnFrom) {
                if (changes.socketIOOnOn.previousValue !== this.socketIOOnOn ||
                    changes.socketIOOnFrom.previousValue !== this.socketIOOnFrom) {
                    this.init();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.subscription = fromEvent(this.socketIOOnFrom, this.socketIOOnOn)
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.context.$implicit = value;
            this.viewRef = this.templateRef.createEmbeddedView(this.context);
            this.viewRef.detectChanges();
            if (this.viewRef) {
                this.viewRef.destroy();
                this.viewRef = null;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.vcr.clear();
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
}
SocketIOOnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[socketIOOn]'
            },] }
];
/** @nocollapse */
SocketIOOnDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
SocketIOOnDirective.propDecorators = {
    socketIOOnOn: [{ type: Input }],
    socketIOOnFrom: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnOn;
    /** @type {?} */
    SocketIOOnDirective.prototype.socketIOOnFrom;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SocketIOOnDirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmlvLm9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3NvY2tldC5pby8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NvY2tldC5pby5vbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixLQUFLLEVBQXVDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SSxPQUFPLEVBQUUsU0FBUyxFQUFvQixNQUFNLE1BQU0sQ0FBQztBQUVuRCxPQUFPLGtCQUFrQixDQUFDOzs7O0FBRTFCLGdDQUVDOzs7SUFEQyxzQ0FBZTs7QUFNakIsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUFVOUIsWUFDVSxXQUEyQyxFQUMzQyxHQUFxQjtRQURyQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0M7UUFDM0MsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFSdkIsWUFBTyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSTtTQUNoQixDQUFDO0lBT0MsQ0FBQzs7Ozs7SUFFSixXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQzVDLElBQ0UsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLFlBQVk7b0JBQ3hELE9BQU8sQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxjQUFjLEVBQzVEO29CQUNBLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7OztJQUVPLElBQUk7UUFDVixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDbEUsU0FBUzs7OztRQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM3QixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVPLE9BQU87UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7WUEzREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2FBQ3pCOzs7O1lBWGdGLFdBQVc7WUFBRSxnQkFBZ0I7OzsyQkFhM0csS0FBSzs2QkFDTCxLQUFLOzs7O0lBRE4sMkNBQThCOztJQUM5Qiw2Q0FBK0M7Ozs7O0lBRS9DLHNDQUVFOzs7OztJQUNGLDJDQUF1Qzs7Ozs7SUFDdkMsc0NBQW9EOzs7OztJQUdsRCwwQ0FBbUQ7Ozs7O0lBQ25ELGtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbkxpa2UgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0ICdzb2NrZXQuaW8tY2xpZW50JztcblxuaW50ZXJmYWNlIFNvY2tldElPT25Db250ZXh0IHtcbiAgJGltcGxpY2l0OiBhbnk7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzb2NrZXRJT09uXSdcbn0pXG5leHBvcnQgY2xhc3MgU29ja2V0SU9PbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgc29ja2V0SU9Pbk9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNvY2tldElPT25Gcm9tOiBTb2NrZXRJT0NsaWVudC5Tb2NrZXQ7XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBTb2NrZXRJT09uQ29udGV4dCA9IHtcbiAgICAkaW1wbGljaXQ6IG51bGxcbiAgfTtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbkxpa2U7XG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPFNvY2tldElPT25Db250ZXh0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxTb2NrZXRJT09uQ29udGV4dD4sXG4gICAgcHJpdmF0ZSB2Y3I6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5zb2NrZXRJT09uT24gfHwgY2hhbmdlcy5zb2NrZXRJT09uRnJvbSkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICBpZiAodGhpcy5zb2NrZXRJT09uT24gJiYgdGhpcy5zb2NrZXRJT09uRnJvbSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY2hhbmdlcy5zb2NrZXRJT09uT24ucHJldmlvdXNWYWx1ZSAhPT0gdGhpcy5zb2NrZXRJT09uT24gfHxcbiAgICAgICAgICBjaGFuZ2VzLnNvY2tldElPT25Gcm9tLnByZXZpb3VzVmFsdWUgIT09IHRoaXMuc29ja2V0SU9PbkZyb21cbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IGZyb21FdmVudCh0aGlzLnNvY2tldElPT25Gcm9tLCB0aGlzLnNvY2tldElPT25PbilcbiAgICAgIC5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnRlbXBsYXRlUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmNvbnRleHQpO1xuICAgICAgICB0aGlzLnZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICBpZiAodGhpcy52aWV3UmVmKSB7XG4gICAgICAgICAgdGhpcy52aWV3UmVmLmRlc3Ryb3koKTtcbiAgICAgICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveSgpIHtcbiAgICB0aGlzLnZjci5jbGVhcigpO1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMudmlld1JlZikge1xuICAgICAgdGhpcy52aWV3UmVmLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMudmlld1JlZiA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iXX0=