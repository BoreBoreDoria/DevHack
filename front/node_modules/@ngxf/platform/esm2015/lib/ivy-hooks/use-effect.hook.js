/**
 * @fileoverview added by tsickle
 * Generated from: lib/ivy-hooks/use-effect.hook.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const noop = (/**
 * @return {?}
 */
() => { });
const ɵ0 = noop;
/**
 * @param {?} effect
 * @param {?=} affectedKeys
 * @return {?}
 */
export function UseEffect(effect, affectedKeys) {
    /** @type {?} */
    const destroyEffectsMap = new WeakMap();
    /**
     * @return {?}
     */
    function init() {
        /** @type {?} */
        const destroyEffect = effect.call(this);
        destroyEffectsMap.set(this, destroyEffect);
    }
    /**
     * @return {?}
     */
    function destroy() {
        if (destroyEffectsMap.has(this)) {
            /** @type {?} */
            const destroyEffect = destroyEffectsMap.get(this);
            if (destroyEffect) {
                destroyEffect();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    function isChanged(changes) {
        if (!affectedKeys) {
            return true;
        }
        if (affectedKeys.length === 0) {
            return false;
        }
        return affectedKeys.every((/**
         * @param {?} affectedKey
         * @return {?}
         */
        (affectedKey) => affectedKey in changes));
    }
    return (/**
     * @param {?} def
     * @return {?}
     */
    (def) => {
        /** @type {?} */
        const originalOnInit = def.ngComponentDef.onInit || noop;
        def.ngComponentDef.onInit = (/**
         * @return {?}
         */
        function onInit() {
            originalOnInit();
            init.call(this);
        });
        /** @type {?} */
        const originalOnChanges = def.ngComponentDef.onChanges || noop;
        def.ngComponentDef.onChanges = (/**
         * @param {?} changes
         * @return {?}
         */
        function onChanges(changes) {
            originalOnChanges(changes);
            if (isChanged(changes)) {
                destroy.call(this);
                init.call(this);
            }
        });
        /** @type {?} */
        const originalOnDestroy = def.ngComponentDef.onDestroy || noop;
        def.ngComponentDef.onDestroy = (/**
         * @return {?}
         */
        function onDestroy() {
            originalOnDestroy();
            destroy.call(this);
        });
    });
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVmZmVjdC5ob29rLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvaXZ5LWhvb2tzL3VzZS1lZmZlY3QuaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7TUFFTSxJQUFJOzs7QUFBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7Ozs7Ozs7QUFDdEIsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsTUFBK0IsRUFDL0IsWUFBdUI7O1VBRWpCLGlCQUFpQixHQUFHLElBQUksT0FBTyxFQUFFOzs7O0lBQ3ZDLFNBQVMsSUFBSTs7Y0FDTCxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBQ0QsU0FBUyxPQUFPO1FBQ2QsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7O2tCQUN6QixhQUFhLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNqRCxJQUFJLGFBQWEsRUFBRTtnQkFDakIsYUFBYSxFQUFFLENBQUM7YUFDakI7U0FDRjtJQUNILENBQUM7Ozs7O0lBQ0QsU0FBUyxTQUFTLENBQUMsT0FBc0I7UUFDdkMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxZQUFZLENBQUMsS0FBSzs7OztRQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLElBQUksT0FBTyxFQUFDLENBQUM7SUFDckUsQ0FBQztJQUNEOzs7O0lBQU8sQ0FBQyxHQUFRLEVBQUUsRUFBRTs7Y0FDWixjQUFjLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLElBQUksSUFBSTtRQUN4RCxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU07OztRQUFHLFNBQVMsTUFBTTtZQUN6QyxjQUFjLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQSxDQUFDOztjQUVJLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxJQUFJLElBQUk7UUFDOUQsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTOzs7O1FBQUcsU0FBUyxTQUFTLENBQUMsT0FBc0I7WUFDdEUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0IsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakI7UUFDSCxDQUFDLENBQUEsQ0FBQzs7Y0FFSSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsSUFBSSxJQUFJO1FBQzlELEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUzs7O1FBQUcsU0FBUyxTQUFTO1lBQy9DLGlCQUFpQixFQUFFLENBQUM7WUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUEsQ0FBQztJQUNKLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XG5leHBvcnQgZnVuY3Rpb24gVXNlRWZmZWN0KFxuICBlZmZlY3Q6ICgpID0+ICgoKSA9PiBhbnkpIHwgYW55LFxuICBhZmZlY3RlZEtleXM/OiBzdHJpbmdbXVxuKSB7XG4gIGNvbnN0IGRlc3Ryb3lFZmZlY3RzTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBkZXN0cm95RWZmZWN0ID0gZWZmZWN0LmNhbGwodGhpcyk7XG4gICAgZGVzdHJveUVmZmVjdHNNYXAuc2V0KHRoaXMsIGRlc3Ryb3lFZmZlY3QpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKGRlc3Ryb3lFZmZlY3RzTWFwLmhhcyh0aGlzKSkge1xuICAgICAgY29uc3QgZGVzdHJveUVmZmVjdCA9IGRlc3Ryb3lFZmZlY3RzTWFwLmdldCh0aGlzKTtcbiAgICAgIGlmIChkZXN0cm95RWZmZWN0KSB7XG4gICAgICAgIGRlc3Ryb3lFZmZlY3QoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNDaGFuZ2VkKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiBib29sZWFuIHtcbiAgICBpZiAoIWFmZmVjdGVkS2V5cykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFmZmVjdGVkS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWZmZWN0ZWRLZXlzLmV2ZXJ5KChhZmZlY3RlZEtleSkgPT4gYWZmZWN0ZWRLZXkgaW4gY2hhbmdlcyk7XG4gIH1cbiAgcmV0dXJuIChkZWY6IGFueSkgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsT25Jbml0ID0gZGVmLm5nQ29tcG9uZW50RGVmLm9uSW5pdCB8fCBub29wO1xuICAgIGRlZi5uZ0NvbXBvbmVudERlZi5vbkluaXQgPSBmdW5jdGlvbiBvbkluaXQoKSB7XG4gICAgICBvcmlnaW5hbE9uSW5pdCgpO1xuICAgICAgaW5pdC5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICBjb25zdCBvcmlnaW5hbE9uQ2hhbmdlcyA9IGRlZi5uZ0NvbXBvbmVudERlZi5vbkNoYW5nZXMgfHwgbm9vcDtcbiAgICBkZWYubmdDb21wb25lbnREZWYub25DaGFuZ2VzID0gZnVuY3Rpb24gb25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgIG9yaWdpbmFsT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgICAgaWYgKGlzQ2hhbmdlZChjaGFuZ2VzKSkge1xuICAgICAgICBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIGluaXQuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgb3JpZ2luYWxPbkRlc3Ryb3kgPSBkZWYubmdDb21wb25lbnREZWYub25EZXN0cm95IHx8IG5vb3A7XG4gICAgZGVmLm5nQ29tcG9uZW50RGVmLm9uRGVzdHJveSA9IGZ1bmN0aW9uIG9uRGVzdHJveSgpIHtcbiAgICAgIG9yaWdpbmFsT25EZXN0cm95KCk7XG4gICAgICBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==