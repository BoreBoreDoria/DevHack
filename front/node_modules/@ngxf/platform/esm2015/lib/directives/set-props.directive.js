/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/set-props.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function SetPropsContext() { }
if (false) {
    /** @type {?} */
    SetPropsContext.prototype.$implicit;
    /** @type {?} */
    SetPropsContext.prototype.setProps;
}
export class SetPropsDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     */
    constructor(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = { $implicit: null, setProps: null };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('setProps' in changes) {
            this.onPropsDidChanged(this.setProps, changes.setProps.previousValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    onPropsDidChanged(current, previous) {
        if (!this.context.$implicit) {
            return current && this.create(current);
        }
        if (current !== previous) {
            this.destroy();
            return this.onPropsDidChanged(current, null);
        }
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    create(props) {
        this.composedView = new ComposedView(this.viewContainerRef);
        this.composedView.createEmbeddedView(this.context);
        this.composedView.updateContext((/**
         * @param {?} context
         * @param {?} parent
         * @return {?}
         */
        (context, parent) => {
            return Object.assign(context, parent, props);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.viewContainerRef.clear();
        if (this.composedView) {
            this.composedView.destroy();
            this.composedView = null;
        }
    }
}
SetPropsDirective.decorators = [
    { type: Directive, args: [{ selector: '[setProps]' },] }
];
/** @nocollapse */
SetPropsDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
SetPropsDirective.propDecorators = {
    setProps: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SetPropsDirective.prototype.setProps;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.composedView;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LXByb3BzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvc2V0LXByb3BzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRWhFLDhCQUdDOzs7SUFGQyxvQ0FBZTs7SUFDZixtQ0FBYzs7QUFJaEIsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFPNUIsWUFDVSxXQUF5QyxFQUN6QyxnQkFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQThCO1FBQ3pDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMcEMsWUFBTyxHQUFvQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0lBTXBFLENBQUM7Ozs7O0lBRUosV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksVUFBVSxJQUFJLE9BQU8sRUFBRTtZQUN6QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7Ozs7OztJQUVPLGlCQUFpQixDQUFDLE9BQXVDLEVBQUUsUUFBd0M7UUFDekcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQzNCLE9BQU8sT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7UUFFRCxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlDO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sTUFBTSxDQUFDLEtBQVU7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBa0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhOzs7OztRQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2xELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxPQUFPO1FBQ2IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7O1lBaERGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUU7Ozs7WUFSMkIsV0FBVztZQUFFLGdCQUFnQjs7O3VCQVcxRixLQUFLOzs7O0lBQU4scUNBQXVCOzs7OztJQUV2QixvQ0FBdUU7Ozs7O0lBQ3ZFLHlDQUFvRDs7Ozs7SUFHbEQsd0NBQWlEOzs7OztJQUNqRCw2Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvc2VkVmlldyB9IGZyb20gJy4uL3Rvb2xzL3JlY29tcG9zZS9jb21wb3NlZC52aWV3JztcblxuaW50ZXJmYWNlIFNldFByb3BzQ29udGV4dCB7XG4gICRpbXBsaWNpdDogYW55O1xuICBzZXRQcm9wczogYW55O1xufVxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbc2V0UHJvcHNdJyB9KVxuZXhwb3J0IGNsYXNzIFNldFByb3BzRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHNldFByb3BzOiBhbnk7XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBTZXRQcm9wc0NvbnRleHQgPSB7ICRpbXBsaWNpdDogbnVsbCwgc2V0UHJvcHM6IG51bGwgfTtcbiAgcHJpdmF0ZSBjb21wb3NlZFZpZXc6IENvbXBvc2VkVmlldzxTZXRQcm9wc0NvbnRleHQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFNldFByb3BzQ29udGV4dD4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCdzZXRQcm9wcycgaW4gY2hhbmdlcykge1xuICAgICAgdGhpcy5vblByb3BzRGlkQ2hhbmdlZCh0aGlzLnNldFByb3BzLCBjaGFuZ2VzLnNldFByb3BzLnByZXZpb3VzVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblByb3BzRGlkQ2hhbmdlZChjdXJyZW50OiBUZW1wbGF0ZVJlZjxTZXRQcm9wc0NvbnRleHQ+W10sIHByZXZpb3VzOiBUZW1wbGF0ZVJlZjxTZXRQcm9wc0NvbnRleHQ+W10pIHtcbiAgICBpZiAoIXRoaXMuY29udGV4dC4kaW1wbGljaXQpIHtcbiAgICAgIHJldHVybiBjdXJyZW50ICYmIHRoaXMuY3JlYXRlKGN1cnJlbnQpO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50ICE9PSBwcmV2aW91cykge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICByZXR1cm4gdGhpcy5vblByb3BzRGlkQ2hhbmdlZChjdXJyZW50LCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZShwcm9wczogYW55KSB7XG4gICAgdGhpcy5jb21wb3NlZFZpZXcgPSBuZXcgQ29tcG9zZWRWaWV3PFNldFByb3BzQ29udGV4dD4odGhpcy52aWV3Q29udGFpbmVyUmVmKTtcbiAgICB0aGlzLmNvbXBvc2VkVmlldy5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5jb250ZXh0KTtcbiAgICB0aGlzLmNvbXBvc2VkVmlldy51cGRhdGVDb250ZXh0KChjb250ZXh0LCBwYXJlbnQpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbnRleHQsIHBhcmVudCwgcHJvcHMpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIGlmICh0aGlzLmNvbXBvc2VkVmlldykge1xuICAgICAgdGhpcy5jb21wb3NlZFZpZXcuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jb21wb3NlZFZpZXcgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19