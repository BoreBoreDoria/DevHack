/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/keep-alive.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Injectable, TemplateRef, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
/** @enum {number} */
const KeepAliveFlags = {
    Detached: 0,
    Attached: 1,
};
export { KeepAliveFlags };
export class ViewRefAttachable {
    /**
     * @param {?} viewRef
     */
    constructor(viewRef) {
        this.flag = 0 /* Detached */;
        this.viewRef = viewRef;
    }
    /**
     * @return {?}
     */
    get attached() {
        return this.flag === 1 /* Attached */;
    }
    /**
     * @return {?}
     */
    get detached() {
        return this.flag === 0 /* Detached */;
    }
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    attachToViewContainerRef(viewContainer) {
        if (this.viewContainerRef || this.attached) {
            throw new TypeError(`You can't use *keepAlive with *ngFor:
  <ng-container *ngFor="...">
    <!-- Wrong! -->
    <ng-container *keepAlive></ng-container>
  </ng-container>

viewRef already attached to viewContainerRef`);
        }
        this.flag = 1 /* Attached */;
        (this.viewContainerRef = viewContainer).insert(this.viewRef);
    }
    /**
     * @return {?}
     */
    detachFromViewContainerRef() {
        if (!this.viewContainerRef || this.detached) {
            throw new TypeError('viewRef already detached from viewContainerRef');
        }
        this.flag = 0 /* Detached */;
        this.viewContainerRef.detach(this.viewContainerRef.indexOf(this.viewRef));
        delete this.viewContainerRef;
    }
    /**
     * @return {?}
     */
    destroy() {
        this.viewRef.destroy();
    }
}
if (false) {
    /** @type {?} */
    ViewRefAttachable.prototype.viewRef;
    /** @type {?} */
    ViewRefAttachable.prototype.flag;
    /** @type {?} */
    ViewRefAttachable.prototype.viewContainerRef;
}
export class KeepAliveConfig {
    constructor() {
        this.limit = 50;
    }
}
KeepAliveConfig.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ KeepAliveConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveConfig_Factory() { return new KeepAliveConfig(); }, token: KeepAliveConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    KeepAliveConfig.prototype.limit;
}
export class KeepAliveGC {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * @param {?} viewRefs
     * @return {?}
     */
    collect(viewRefs) {
        /** @type {?} */
        const limit = this.config.limit > 0 ? this.config.limit : Number.MAX_SAFE_INTEGER;
        for (const [templateDef, viewRefAttachable] of Array.from(viewRefs.entries())) {
            if (viewRefs.size <= limit) {
                break;
            }
            if (viewRefAttachable.flag === 0 /* Detached */) {
                viewRefAttachable.destroy();
                viewRefs.delete(templateDef);
                console.log('Collect', viewRefAttachable);
            }
        }
    }
}
KeepAliveGC.decorators = [
    { type: Injectable, args: [{ providedIn: 'root', },] }
];
/** @nocollapse */
KeepAliveGC.ctorParameters = () => [
    { type: KeepAliveConfig }
];
/** @nocollapse */ KeepAliveGC.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveGC_Factory() { return new KeepAliveGC(i0.ɵɵinject(KeepAliveConfig)); }, token: KeepAliveGC, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeepAliveGC.prototype.config;
}
export class KeepAliveViewRefs {
    /**
     * @param {?} gc
     */
    constructor(gc) {
        this.gc = gc;
        this.viewRefs = new Map();
    }
    /**
     * @param {?} templateRef
     * @param {?} viewRef
     * @return {?}
     */
    add(templateRef, viewRef) {
        /** @type {?} */
        const templateDef = this.getTemplateDef(templateRef);
        if (this.viewRefs.has(templateDef)) {
            throw new TypeError('templateRef already exists in viewRefs');
        }
        /** @type {?} */
        const viewRefAttachable = new ViewRefAttachable(viewRef);
        this.viewRefs.set(templateDef, viewRefAttachable);
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    has(templateRef) {
        /** @type {?} */
        const templateDef = this.getTemplateDef(templateRef);
        return this.viewRefs.has(templateDef);
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    get(templateRef) {
        /** @type {?} */
        const templateDef = this.getTemplateDef(templateRef);
        if (!this.viewRefs.has(templateDef)) {
            throw new TypeError('templateRef not exists in viewRefs');
        }
        return this.viewRefs.get(templateDef);
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    delete(templateRef) {
        /** @type {?} */
        const templateDef = this.getTemplateDef(templateRef);
        if (!this.viewRefs.has(templateDef)) {
            throw new TypeError('templateRef not exists in viewRefs');
        }
        this.viewRefs.get(templateRef).viewRef.destroy();
        return this.viewRefs.delete(templateDef);
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    reattach(templateRef) {
        /** @type {?} */
        const templateDef = this.getTemplateDef(templateRef);
        /** @type {?} */
        const viewRefAttachable = this.get(templateRef);
        this.viewRefs.set(templateDef, viewRefAttachable);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.viewRefs.forEach((/**
         * @param {?} viewRefAttachable
         * @return {?}
         */
        (viewRefAttachable) => viewRefAttachable.viewRef.destroy()));
        this.viewRefs.clear();
    }
    /**
     * @return {?}
     */
    collect() {
        this.gc.collect(this.viewRefs);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEach(fn) {
        this.viewRefs.forEach(fn);
    }
    /**
     * @private
     * @param {?} templateRef
     * @return {?}
     */
    getTemplateDef(templateRef) {
        return templateRef['_def'];
    }
}
KeepAliveViewRefs.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
KeepAliveViewRefs.ctorParameters = () => [
    { type: KeepAliveGC }
];
/** @nocollapse */ KeepAliveViewRefs.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveViewRefs_Factory() { return new KeepAliveViewRefs(i0.ɵɵinject(KeepAliveGC)); }, token: KeepAliveViewRefs, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeepAliveViewRefs.prototype.viewRefs;
    /**
     * @type {?}
     * @private
     */
    KeepAliveViewRefs.prototype.gc;
}
export class KeepAliveManager {
    /**
     * @param {?} viewRefs
     */
    constructor(viewRefs) {
        this.viewRefs = viewRefs;
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @return {?}
     */
    attach(viewContainerRef, templateRef) {
        if (!this.viewRefs.has(templateRef)) {
            /** @type {?} */
            const viewRef = templateRef.createEmbeddedView({});
            this.viewRefs.add(templateRef, viewRef);
        }
        else {
            this.viewRefs.reattach(templateRef);
        }
        this.patchClear(viewContainerRef);
        /** @type {?} */
        const viewRefAttachable = this.viewRefs.get(templateRef);
        viewRefAttachable.attachToViewContainerRef(viewContainerRef);
        this.viewRefs.collect();
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @return {?}
     */
    detach(viewContainerRef, templateRef) {
        /** @type {?} */
        const viewRefAttachable = this.viewRefs.get(templateRef);
        viewRefAttachable.detachFromViewContainerRef();
        this.viewRefs.collect();
    }
    /**
     * @private
     * @param {?} viewContainerRef
     * @return {?}
     */
    patchClear(viewContainerRef) {
        if (!viewContainerRef[KeepAliveManager.patched]) {
            /** @type {?} */
            const clear = Object.getPrototypeOf(viewContainerRef).clear;
            /** @type {?} */
            const viewRefs = this.viewRefs;
            Object.getPrototypeOf(viewContainerRef).clear = (/**
             * @this {?}
             * @return {?}
             */
            function () {
                viewRefs.forEach((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => { v.viewRef['_view'].state |= (1 << 7); }));
                clear.call(this);
                viewRefs.forEach((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => { v.viewRef['_view'].state &= ~(1 << 7); }));
            });
            Object.defineProperty(viewContainerRef, KeepAliveManager.patched, { get: (/**
                 * @return {?}
                 */
                () => true) });
        }
    }
}
KeepAliveManager.patched = Symbol('Already Patched ViewContainerRef Token');
KeepAliveManager.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
KeepAliveManager.ctorParameters = () => [
    { type: KeepAliveViewRefs }
];
/** @nocollapse */ KeepAliveManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveManager_Factory() { return new KeepAliveManager(i0.ɵɵinject(KeepAliveViewRefs)); }, token: KeepAliveManager, providedIn: "root" });
if (false) {
    /** @type {?} */
    KeepAliveManager.patched;
    /**
     * @type {?}
     * @private
     */
    KeepAliveManager.prototype.viewRefs;
}
export class KeepAliveDirective {
    /**
     * @param {?} manager
     * @param {?} viewContainerRef
     * @param {?} templateRef
     */
    constructor(manager, viewContainerRef, templateRef) {
        this.manager = manager;
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        manager.attach(viewContainerRef, templateRef);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.manager.detach(this.viewContainerRef, this.templateRef);
    }
}
KeepAliveDirective.decorators = [
    { type: Directive, args: [{
                selector: '[keepAlive]'
            },] }
];
/** @nocollapse */
KeepAliveDirective.ctorParameters = () => [
    { type: KeepAliveManager },
    { type: ViewContainerRef },
    { type: TemplateRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeepAliveDirective.prototype.manager;
    /**
     * @type {?}
     * @private
     */
    KeepAliveDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    KeepAliveDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,