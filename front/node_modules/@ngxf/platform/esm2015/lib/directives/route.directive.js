/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/route.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { ActivatedRoute, convertToParamMap } from '@angular/router';
import { distinctUntilChanged } from 'rxjs/operators';
/**
 * @record
 */
function RouteContext() { }
if (false) {
    /** @type {?} */
    RouteContext.prototype.$implicit;
    /** @type {?} */
    RouteContext.prototype.snapshot;
    /** @type {?} */
    RouteContext.prototype.url;
    /** @type {?} */
    RouteContext.prototype.params;
    /** @type {?} */
    RouteContext.prototype.queryParams;
    /** @type {?} */
    RouteContext.prototype.fragment;
    /** @type {?} */
    RouteContext.prototype.data;
    /** @type {?} */
    RouteContext.prototype.outlet;
    /** @type {?} */
    RouteContext.prototype.component;
    /** @type {?} */
    RouteContext.prototype.routeConfig;
    /** @type {?} */
    RouteContext.prototype.root;
    /** @type {?} */
    RouteContext.prototype.parent;
    /** @type {?} */
    RouteContext.prototype.firstChild;
    /** @type {?} */
    RouteContext.prototype.children;
    /** @type {?} */
    RouteContext.prototype.pathFromRoot;
    /** @type {?} */
    RouteContext.prototype.paramMap;
    /** @type {?} */
    RouteContext.prototype.queryParamMap;
}
/** @type {?} */
const ASYNC_FIELDS = ['url', 'params', 'queryParams', 'fragment', 'data', 'paramMap', 'queryParamMap'];
export class RouteDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     * @param {?} route
     */
    constructor(templateRef, viewContainerRef, route) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.route = route;
        this.context = {
            $implicit: this.route,
            /**
             * @return {?}
             */
            get snapshot() { return this.route.snapshot; },
            url: [],
            params: {},
            queryParams: {},
            fragment: null,
            data: null,
            /**
             * @return {?}
             */
            get outlet() { return this.route.outlet; },
            /**
             * @return {?}
             */
            get component() { return this.route.component; },
            /**
             * @return {?}
             */
            get routeConfig() { return this.route.routeConfig; },
            /**
             * @return {?}
             */
            get root() { return this.route.root; },
            /**
             * @return {?}
             */
            get parent() { return this.route.parent; },
            /**
             * @return {?}
             */
            get firstChild() { return this.route.firstChild; },
            /**
             * @return {?}
             */
            get children() { return this.route.children; },
            /**
             * @return {?}
             */
            get pathFromRoot() { return this.route.pathFromRoot; },
            paramMap: convertToParamMap({}),
            queryParamMap: convertToParamMap({})
        };
        this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
        this.subscriptions = this.attachFields(ASYNC_FIELDS);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => {
            subscription.unsubscribe();
        }));
        this.subscriptions = null;
        this.viewContainerRef.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
    /**
     * @private
     * @param {?} asyncFields
     * @return {?}
     */
    attachFields(asyncFields) {
        return asyncFields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => this.asyncAttach(field)));
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    asyncAttach(field) {
        return this.route[field]
            .pipe(distinctUntilChanged())
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.context[field] = value;
            this.viewRef.markForCheck();
        }));
    }
}
RouteDirective.decorators = [
    { type: Directive, args: [{ selector: '[route]' },] }
];
/** @nocollapse */
RouteDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ActivatedRoute }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9yb3V0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE4QixXQUFXLEVBQVEsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0csT0FBTyxFQUFFLGNBQWMsRUFBMEIsaUJBQWlCLEVBQTZDLE1BQU0saUJBQWlCLENBQUM7QUFFdkksT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFdEQsMkJBa0JDOzs7SUFqQkMsaUNBQTBCOztJQUMxQixnQ0FBaUM7O0lBQ2pDLDJCQUFrQjs7SUFDbEIsOEJBQWU7O0lBQ2YsbUNBQW9COztJQUNwQixnQ0FBaUI7O0lBQ2pCLDRCQUFXOztJQUNYLDhCQUFlOztJQUNmLGlDQUE4Qjs7SUFDOUIsbUNBQW1COztJQUNuQiw0QkFBcUI7O0lBQ3JCLDhCQUE4Qjs7SUFDOUIsa0NBQWtDOztJQUNsQyxnQ0FBMkI7O0lBQzNCLG9DQUErQjs7SUFDL0IsZ0NBQW1COztJQUNuQixxQ0FBd0I7OztNQUdwQixZQUFZLEdBQUcsQ0FBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxlQUFlLENBQUU7QUFHeEcsTUFBTSxPQUFPLGNBQWM7Ozs7OztJQXdCekIsWUFDVSxXQUFzQyxFQUN0QyxnQkFBa0MsRUFDbEMsS0FBcUI7UUFGckIsZ0JBQVcsR0FBWCxXQUFXLENBQTJCO1FBQ3RDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUExQnZCLFlBQU8sR0FBaUI7WUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLOzs7O1lBQ3JCLElBQUksUUFBUSxLQUFLLE9BQU8sSUFBSSxD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OUMsMENBQTBDOzs7OztJQUMxQywrQkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVtYmVkZGVkVmlld1JlZiwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVHlwZSwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIGNvbnZlcnRUb1BhcmFtTWFwLCBEYXRhLCBQYXJhbU1hcCwgUGFyYW1zLCBSb3V0ZSwgVXJsU2VnbWVudCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbnRlcmZhY2UgUm91dGVDb250ZXh0IHtcbiAgJGltcGxpY2l0OiBBY3RpdmF0ZWRSb3V0ZTtcbiAgc25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3Q7XG4gIHVybDogVXJsU2VnbWVudFtdO1xuICBwYXJhbXM6IFBhcmFtcztcbiAgcXVlcnlQYXJhbXM6IFBhcmFtcztcbiAgZnJhZ21lbnQ6IHN0cmluZztcbiAgZGF0YTogRGF0YTtcbiAgb3V0bGV0OiBzdHJpbmc7XG4gIGNvbXBvbmVudDogVHlwZTxhbnk+IHwgc3RyaW5nO1xuICByb3V0ZUNvbmZpZzogUm91dGU7XG4gIHJvb3Q6IEFjdGl2YXRlZFJvdXRlO1xuICBwYXJlbnQ6IEFjdGl2YXRlZFJvdXRlIHwgbnVsbDtcbiAgZmlyc3RDaGlsZDogQWN0aXZhdGVkUm91dGUgfCBudWxsO1xuICBjaGlsZHJlbjogQWN0aXZhdGVkUm91dGVbXTtcbiAgcGF0aEZyb21Sb290OiBBY3RpdmF0ZWRSb3V0ZVtdO1xuICBwYXJhbU1hcDogUGFyYW1NYXA7XG4gIHF1ZXJ5UGFyYW1NYXA6IFBhcmFtTWFwO1xufVxuXG5jb25zdCBBU1lOQ19GSUVMRFMgPSBbICd1cmwnLCAncGFyYW1zJywgJ3F1ZXJ5UGFyYW1zJywgJ2ZyYWdtZW50JywgJ2RhdGEnLCAncGFyYW1NYXAnLCAncXVlcnlQYXJhbU1hcCcgXTtcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3JvdXRlXScgfSlcbmV4cG9ydCBjbGFzcyBSb3V0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY29udGV4dDogUm91dGVDb250ZXh0ID0ge1xuICAgICRpbXBsaWNpdDogdGhpcy5yb3V0ZSxcbiAgICBnZXQgc25hcHNob3QoKSB7IHJldHVybiB0aGlzLnJvdXRlLnNuYXBzaG90OyB9LFxuICAgIHVybDogW10sXG4gICAgcGFyYW1zOiB7fSxcbiAgICBxdWVyeVBhcmFtczoge30sXG4gICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgZGF0YTogbnVsbCxcbiAgICBnZXQgb3V0bGV0KCkgeyByZXR1cm4gdGhpcy5yb3V0ZS5vdXRsZXQ7IH0sXG4gICAgZ2V0IGNvbXBvbmVudCgpIHsgcmV0dXJuIHRoaXMucm91dGUuY29tcG9uZW50OyB9LFxuICAgIGdldCByb3V0ZUNvbmZpZygpIHsgcmV0dXJuIHRoaXMucm91dGUucm91dGVDb25maWc7IH0sXG4gICAgZ2V0IHJvb3QoKSB7IHJldHVybiB0aGlzLnJvdXRlLnJvb3Q7IH0sXG4gICAgZ2V0IHBhcmVudCgpIHsgcmV0dXJuIHRoaXMucm91dGUucGFyZW50OyB9LFxuICAgIGdldCBmaXJzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5yb3V0ZS5maXJzdENoaWxkOyB9LFxuICAgIGdldCBjaGlsZHJlbigpIHsgcmV0dXJuIHRoaXMucm91dGUuY2hpbGRyZW47IH0sXG4gICAgZ2V0IHBhdGhGcm9tUm9vdCgpIHsgcmV0dXJuIHRoaXMucm91dGUucGF0aEZyb21Sb290OyB9LFxuICAgIHBhcmFtTWFwOiBjb252ZXJ0VG9QYXJhbU1hcCh7fSksXG4gICAgcXVlcnlQYXJhbU1hcDogY29udmVydFRvUGFyYW1NYXAoe30pXG4gIH07XG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPFJvdXRlQ29udGV4dD4gPVxuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwgdGhpcy5jb250ZXh0KTtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IHRoaXMuYXR0YWNoRmllbGRzKEFTWU5DX0ZJRUxEUyk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8Um91dGVDb250ZXh0PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGVcbiAgKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzdWJzY3JpcHRpb24pID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMudmlld1JlZikge1xuICAgICAgdGhpcy52aWV3UmVmLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMudmlld1JlZiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhdHRhY2hGaWVsZHMoYXN5bmNGaWVsZHM6IHN0cmluZ1tdKTogU3Vic2NyaXB0aW9uW10ge1xuICAgIHJldHVybiBhc3luY0ZpZWxkcy5tYXAoZmllbGQgPT4gdGhpcy5hc3luY0F0dGFjaChmaWVsZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luY0F0dGFjaChmaWVsZDogc3RyaW5nKTogU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5yb3V0ZVsgZmllbGQgXVxuICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcbiAgICAgIC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLmNvbnRleHRbIGZpZWxkIF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy52aWV3UmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==