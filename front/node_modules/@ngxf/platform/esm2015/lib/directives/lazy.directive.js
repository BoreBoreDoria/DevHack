/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/lazy.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, InjectionToken, Injector, Input, NgModuleFactoryLoader, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { from } from 'rxjs';
import { catchError, finalize, tap } from 'rxjs/operators';
/**
 * @record
 */
function LazyContext() { }
if (false) {
    /** @type {?} */
    LazyContext.prototype.$implicit;
}
/** @type {?} */
export const LAZY_COMPONENT_TOKEN = new InjectionToken('Lazy Component Token');
export class LazyDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} loader
     * @param {?} injector
     */
    constructor(templateRef, viewContainer, loader, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.loader = loader;
        this.injector = injector;
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.context = {
            $implicit: null
        };
        this.embeddedViewRef = this.templateRef.createEmbeddedView(this.context);
    }
    /**
     * @private
     * @return {?}
     */
    get component() {
        if (this.componentRef) {
            return this.componentRef.instance;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get projectableNodes() {
        return [this.templateRef.createEmbeddedView(this.context).rootNodes];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('lazy' in changes) {
            this.onLazyDidChanged(this.lazy, changes.lazy.previousValue);
        }
        if ('lazyLoadChildren' in changes) {
            this.onLazyDidChanged(this.lazyLoadChildren, changes.lazyLoadChildren.previousValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dispose();
        if (this.embeddedViewRef) {
            this.embeddedViewRef.destroy();
            this.embeddedViewRef = null;
        }
    }
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    onLazyDidChanged(current, previous) {
        if (!this.ngModuleRef) {
            return current && this.loadAndRender(current);
        }
        if (current !== previous) {
            this.dispose();
            return this.onLazyDidChanged(current, null);
        }
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    loadAndRender(path) {
        this.subscription = this.load(path).pipe(tap((/**
         * @param {?} ngModuleFactory
         * @return {?}
         */
        (ngModuleFactory) => {
            this.ngModuleRef = ngModuleFactory.create(this.injector);
            /** @type {?} */
            const component = this.ngModuleRef.injector.get(LAZY_COMPONENT_TOKEN);
            /** @type {?} */
            const componentFactory = this.ngModuleRef.componentFactoryResolver.resolveComponentFactory(component);
            this.componentRef = this.viewContainer.createComponent(componentFactory, this.viewContainer.length, this.injector, this.projectableNodes, this.ngModuleRef);
        })), finalize((/**
         * @return {?}
         */
        () => this.onActivate(this.component)))).subscribe();
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    load(path) {
        /** @type {?} */
        const pathProduction = path.split('#').join('.ts#');
        return from(this.loader.load(pathProduction)).pipe(catchError((/**
         * @return {?}
         */
        () => from(this.loader.load(path)))));
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    onActivate(component) {
        this.activate.emit(component);
        if (isFunction(this.lazyActivate)) {
            this.lazyActivate(component);
        }
        this.context.$implicit = component;
        this.embeddedViewRef.markForCheck();
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    onDeactivate(component) {
        this.deactivate.emit(component);
        if (isFunction(this.lazyDeactivate)) {
            this.lazyDeactivate(component);
        }
        this.context.$implicit = null;
        this.embeddedViewRef.markForCheck();
    }
    /**
     * @private
     * @return {?}
     */
    dispose() {
        if (this.componentRef) {
            /** @type {?} */
            const c = this.component;
            this.componentRef.destroy();
            this.componentRef = null;
            this.onDeactivate(c);
        }
        if (this.ngModuleRef) {
            this.ngModuleRef.destroy();
            this.ngModuleRef = null;
        }
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
}
LazyDirective.decorators = [
    { type: Directive, args: [{ selector: '[lazy]' },] }
];
/** @nocollapse */
LazyDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NgModuleFactoryLoader },
    { type: Injector }
];
LazyDirective.propDecorators = {
    lazy: [{ type: Input }],
    lazyLoadChildren: [{ type: Input }],
    lazyActivate: [{ type: Input }],
    lazyDeactivate: [{ type: Input }],
    activate: [{ type: Output }],
    deactivate: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LazyDirective.prototype.lazy;
    /** @type {?} */
    LazyDirective.prototype.lazyLoadChildren;
    /** @type {?} */
    LazyDirective.prototype.lazyActivate;
    /** @type {?} */
    LazyDirective.prototype.lazyDeactivate;
    /** @type {?} */
    LazyDirective.prototype.activate;
    /** @type {?} */
    LazyDirective.prototype.deactivate;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.embeddedViewRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.ngModuleRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.injector;
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=data:application/json;base64,