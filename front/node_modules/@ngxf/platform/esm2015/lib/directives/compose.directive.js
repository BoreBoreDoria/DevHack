/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/compose.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function ComposeContext() { }
if (false) {
    /** @type {?} */
    ComposeContext.prototype.$implicit;
    /** @type {?} */
    ComposeContext.prototype.compose;
}
export class ComposeDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     */
    constructor(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = { $implicit: null, compose: null };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('compose' in changes) {
            this.onTemplateRefsDidChanged(this.compose, changes.compose.previousValue);
        }
        if ('composeOf' in changes) {
            this.onTemplateRefsDidChanged(this.composeOf, changes.composeOf.previousValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    onTemplateRefsDidChanged(current, previous) {
        if (!this.viewRef) {
            return this.create(current);
        }
        if (this.viewRef.destroyed || current !== previous) {
            this.destroy();
            return this.onTemplateRefsDidChanged(current, null);
        }
    }
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    create(templateRefs) {
        this.context.compose = this.context.$implicit = this.createComposeFn(templateRefs);
        this.viewRef =
            this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        if (this.viewRef && !this.viewRef.destroyed) {
            this.viewRef.destroy();
        }
        this.viewRef = null;
    }
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    createComposeFn(templateRefs) {
        return (/**
         * @param {?} templateRef
         * @return {?}
         */
        (templateRef) => {
            return new ComposedView(this.viewContainerRef, [...templateRefs, templateRef]);
        });
    }
}
ComposeDirective.decorators = [
    { type: Directive, args: [{ selector: '[compose]' },] }
];
/** @nocollapse */
ComposeDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
ComposeDirective.propDecorators = {
    compose: [{ type: Input }],
    composeOf: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ComposeDirective.prototype.compose;
    /** @type {?} */
    ComposeDirective.prototype.composeOf;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2NvbXBvc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBbUIsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEksT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRWhFLDZCQUdDOzs7SUFGQyxtQ0FBMEI7O0lBQzFCLGlDQUF3Qjs7QUFNMUIsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7SUFRM0IsWUFDVSxXQUF3QyxFQUN4QyxnQkFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQTZCO1FBQ3hDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMcEMsWUFBTyxHQUFtQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0lBTWxFLENBQUM7Ozs7O0lBRUosV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksU0FBUyxJQUFJLE9BQU8sRUFBRTtZQUN4QixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzVFO1FBRUQsSUFBSSxXQUFXLElBQUksT0FBTyxFQUFFO1lBQzFCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDaEY7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7Ozs7O0lBRU8sd0JBQXdCLENBQUMsT0FBMkIsRUFBRSxRQUE0QjtRQUN4RixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sTUFBTSxDQUFDLFlBQVk7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsT0FBTztZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7OztJQUVPLE9BQU87UUFDYixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBRU8sZUFBZSxDQUFDLFlBQWdDO1FBQ3REOzs7O1FBQU8sQ0FBQyxXQUFpRCxFQUFxQixFQUFFO1lBQzlFLE9BQU8sSUFBSSxZQUFZLENBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsRUFDckIsQ0FBRSxHQUFHLFlBQVksRUFBRSxXQUFXLENBQUUsQ0FDakMsQ0FBQztRQUNKLENBQUMsRUFBQztJQUNKLENBQUM7OztZQTVERixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFOzs7O1lBVjZDLFdBQVc7WUFBRSxnQkFBZ0I7OztzQkFhM0csS0FBSzt3QkFDTCxLQUFLOzs7O0lBRE4sbUNBQXFDOztJQUNyQyxxQ0FBdUM7Ozs7O0lBRXZDLG1DQUFxRTs7Ozs7SUFDckUsbUNBQWlEOzs7OztJQUcvQyx1Q0FBZ0Q7Ozs7O0lBQ2hELDRDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb3NlZFZpZXcgfSBmcm9tICcuLi90b29scy9yZWNvbXBvc2UvY29tcG9zZWQudmlldyc7XG5cbmludGVyZmFjZSBDb21wb3NlQ29udGV4dCB7XG4gICRpbXBsaWNpdDogQ29tcG9zZUZuPGFueT47XG4gIGNvbXBvc2U6IENvbXBvc2VGbjxhbnk+O1xufVxuXG50eXBlIENvbXBvc2VGbjxUPiA9ICh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8VD4gfCBDb21wb3NlZFZpZXc8VD4pID0+IENvbXBvc2VkVmlldzxUPjtcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2NvbXBvc2VdJyB9KVxuZXhwb3J0IGNsYXNzIENvbXBvc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgY29tcG9zZTogVGVtcGxhdGVSZWY8YW55PltdO1xuICBASW5wdXQoKSBjb21wb3NlT2Y6IFRlbXBsYXRlUmVmPGFueT5bXTtcblxuICBwcml2YXRlIGNvbnRleHQ6IENvbXBvc2VDb250ZXh0ID0geyAkaW1wbGljaXQ6IG51bGwsIGNvbXBvc2U6IG51bGwgfTtcbiAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8Q29tcG9zZUNvbnRleHQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPENvbXBvc2VDb250ZXh0PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoJ2NvbXBvc2UnIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMub25UZW1wbGF0ZVJlZnNEaWRDaGFuZ2VkKHRoaXMuY29tcG9zZSwgY2hhbmdlcy5jb21wb3NlLnByZXZpb3VzVmFsdWUpO1xuICAgIH1cblxuICAgIGlmICgnY29tcG9zZU9mJyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLm9uVGVtcGxhdGVSZWZzRGlkQ2hhbmdlZCh0aGlzLmNvbXBvc2VPZiwgY2hhbmdlcy5jb21wb3NlT2YucHJldmlvdXNWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwcml2YXRlIG9uVGVtcGxhdGVSZWZzRGlkQ2hhbmdlZChjdXJyZW50OiBUZW1wbGF0ZVJlZjxhbnk+W10sIHByZXZpb3VzOiBUZW1wbGF0ZVJlZjxhbnk+W10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudmlld1JlZikge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKGN1cnJlbnQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXdSZWYuZGVzdHJveWVkIHx8IGN1cnJlbnQgIT09IHByZXZpb3VzKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgIHJldHVybiB0aGlzLm9uVGVtcGxhdGVSZWZzRGlkQ2hhbmdlZChjdXJyZW50LCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZSh0ZW1wbGF0ZVJlZnMpIHtcbiAgICB0aGlzLmNvbnRleHQuY29tcG9zZSA9IHRoaXMuY29udGV4dC4kaW1wbGljaXQgPSB0aGlzLmNyZWF0ZUNvbXBvc2VGbih0ZW1wbGF0ZVJlZnMpO1xuICAgIHRoaXMudmlld1JlZiA9XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHRoaXMuY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMudmlld1JlZiAmJiAhdGhpcy52aWV3UmVmLmRlc3Ryb3llZCkge1xuICAgICAgdGhpcy52aWV3UmVmLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDb21wb3NlRm4odGVtcGxhdGVSZWZzOiBUZW1wbGF0ZVJlZjxhbnk+W10pOiBDb21wb3NlRm48YW55PiB7XG4gICAgcmV0dXJuICh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PiB8IENvbXBvc2VkVmlldzxhbnk+KTogQ29tcG9zZWRWaWV3PGFueT4gPT4ge1xuICAgICAgcmV0dXJuIG5ldyBDb21wb3NlZFZpZXc8YW55PihcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBbIC4uLnRlbXBsYXRlUmVmcywgdGVtcGxhdGVSZWYgXVxuICAgICAgKTtcbiAgICB9O1xuICB9XG59XG4iXX0=