/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/init.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * @record
 * @template T
 */
function InitContext() { }
if (false) {
    /** @type {?} */
    InitContext.prototype.$implicit;
    /** @type {?} */
    InitContext.prototype.init;
}
/**
 * @template T
 */
export class InitDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     */
    constructor(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.context = { $implicit: null, init: null };
        this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set init(value) {
        this.setValue(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set initOf(value) {
        this.setValue(value);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.viewContainer.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        this.context.$implicit = this.context.init = value;
        if (this.viewRef) {
            this.viewRef.markForCheck();
        }
    }
}
InitDirective.decorators = [
    { type: Directive, args: [{ selector: '[init]' },] }
];
/** @nocollapse */
InitDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
InitDirective.propDecorators = {
    init: [{ type: Input }],
    initOf: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.viewContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2luaXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBbUIsS0FBSyxFQUFhLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFFNUcsMEJBR0M7OztJQUZDLGdDQUFhOztJQUNiLDJCQUFROzs7OztBQUlWLE1BQU0sT0FBTyxhQUFhOzs7OztJQWN4QixZQUNVLFdBQXdDLEVBQ3hDLGFBQStCO1FBRC9CLGdCQUFXLEdBQVgsV0FBVyxDQUE2QjtRQUN4QyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFOakMsWUFBTyxHQUFtQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQzFELFlBQU8sR0FDYixJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBS3JFLENBQUM7Ozs7O0lBZkosSUFBYSxJQUFJLENBQUMsS0FBUTtRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFBYSxNQUFNLENBQUMsS0FBUTtRQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFXRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7OztJQUVPLFFBQVEsQ0FBQyxLQUFRO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNuRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7OztZQWpDRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFOzs7O1lBUHNCLFdBQVc7WUFBRSxnQkFBZ0I7OzttQkFVakYsS0FBSztxQkFJTCxLQUFLOzs7Ozs7O0lBSU4sZ0NBQWtFOzs7OztJQUNsRSxnQ0FDd0U7Ozs7O0lBR3RFLG9DQUFnRDs7Ozs7SUFDaEQsc0NBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmludGVyZmFjZSBJbml0Q29udGV4dDxUPiB7XG4gICRpbXBsaWNpdDogVDtcbiAgaW5pdDogVDtcbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2luaXRdJyB9KVxuZXhwb3J0IGNsYXNzIEluaXREaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHNldCBpbml0KHZhbHVlOiBUKSB7XG4gICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgaW5pdE9mKHZhbHVlOiBUKSB7XG4gICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnRleHQ6IEluaXRDb250ZXh0PFQ+ID0geyAkaW1wbGljaXQ6IG51bGwsIGluaXQ6IG51bGwgfTtcbiAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8SW5pdENvbnRleHQ8VD4+ID1cbiAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHRoaXMuY29udGV4dCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8SW5pdENvbnRleHQ8VD4+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZlxuICApIHt9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMudmlld1JlZikge1xuICAgICAgdGhpcy52aWV3UmVmLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMudmlld1JlZiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRWYWx1ZSh2YWx1ZTogVCk6IHZvaWQge1xuICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQgPSB0aGlzLmNvbnRleHQuaW5pdCA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxufVxuIl19