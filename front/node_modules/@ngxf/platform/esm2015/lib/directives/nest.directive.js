/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/nest.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function NestContext() { }
if (false) {
    /** @type {?} */
    NestContext.prototype.$implicit;
    /** @type {?} */
    NestContext.prototype.nest;
}
export class NestDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     */
    constructor(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = { $implicit: null, nest: null };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('nest' in changes) {
            this.onTemplatesDidChanged(this.nest, changes.nest.previousValue);
        }
        if ('nestOf' in changes) {
            this.onTemplatesDidChanged(this.nestOf, changes.nestOf.previousValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    onTemplatesDidChanged(current, previous) {
        if (!this.context.$implicit) {
            return current && this.create(current);
        }
        if (current !== previous) {
            this.destroy();
            this.onTemplatesDidChanged(current, null);
        }
    }
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    create(templateRefs) {
        this.context.$implicit = this.context.nest = new ComposedView(this.viewContainerRef, templateRefs);
        this.viewRef =
            this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    update(templateRefs) {
        this.context.$implicit = this.context.nest = new ComposedView(this.viewContainerRef, templateRefs);
        this.viewRef.markForCheck();
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.viewContainerRef.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
}
NestDirective.decorators = [
    { type: Directive, args: [{ selector: '[nest]' },] }
];
/** @nocollapse */
NestDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
NestDirective.propDecorators = {
    nest: [{ type: Input }],
    nestOf: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NestDirective.prototype.nest;
    /** @type {?} */
    NestDirective.prototype.nestOf;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL25lc3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBbUIsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEksT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRWhFLDBCQUdDOzs7SUFGQyxnQ0FBZTs7SUFDZiwyQkFBVTs7QUFJWixNQUFNLE9BQU8sYUFBYTs7Ozs7SUFReEIsWUFDVSxXQUFxQyxFQUNyQyxnQkFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQTBCO1FBQ3JDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMcEMsWUFBTyxHQUFnQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0lBTTVELENBQUM7Ozs7O0lBRUosV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUNyQixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxRQUFRLElBQUksT0FBTyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkU7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7Ozs7O0lBRU8scUJBQXFCLENBQUMsT0FBbUMsRUFBRSxRQUFvQztRQUNyRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDM0IsT0FBTyxPQUFPLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUVELElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN4QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sTUFBTSxDQUFDLFlBQXdDO1FBQ3JELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksWUFBWSxDQUFjLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNoSCxJQUFJLENBQUMsT0FBTztZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7Ozs7SUFFTyxNQUFNLENBQUMsWUFBd0M7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQWMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFTyxPQUFPO1FBQ2IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7O1lBeERGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7Ozs7WUFSZ0QsV0FBVztZQUFFLGdCQUFnQjs7O21CQVczRyxLQUFLO3FCQUNMLEtBQUs7Ozs7SUFETiw2QkFBMEM7O0lBQzFDLCtCQUE0Qzs7Ozs7SUFFNUMsZ0NBQStEOzs7OztJQUMvRCxnQ0FBOEM7Ozs7O0lBRzVDLG9DQUE2Qzs7Ozs7SUFDN0MseUNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvc2VkVmlldyB9IGZyb20gJy4uL3Rvb2xzL3JlY29tcG9zZS9jb21wb3NlZC52aWV3JztcblxuaW50ZXJmYWNlIE5lc3RDb250ZXh0IHtcbiAgJGltcGxpY2l0OiBhbnk7XG4gIG5lc3Q6IGFueTtcbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW25lc3RdJyB9KVxuZXhwb3J0IGNsYXNzIE5lc3REaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgbmVzdDogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+W107XG4gIEBJbnB1dCgpIG5lc3RPZjogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+W107XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBOZXN0Q29udGV4dCA9IHsgJGltcGxpY2l0OiBudWxsLCBuZXN0OiBudWxsIH07XG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPE5lc3RDb250ZXh0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxOZXN0Q29udGV4dD4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCduZXN0JyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLm9uVGVtcGxhdGVzRGlkQ2hhbmdlZCh0aGlzLm5lc3QsIGNoYW5nZXMubmVzdC5wcmV2aW91c1ZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoJ25lc3RPZicgaW4gY2hhbmdlcykge1xuICAgICAgdGhpcy5vblRlbXBsYXRlc0RpZENoYW5nZWQodGhpcy5uZXN0T2YsIGNoYW5nZXMubmVzdE9mLnByZXZpb3VzVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblRlbXBsYXRlc0RpZENoYW5nZWQoY3VycmVudDogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+W10sIHByZXZpb3VzOiBUZW1wbGF0ZVJlZjxOZXN0Q29udGV4dD5bXSkge1xuICAgIGlmICghdGhpcy5jb250ZXh0LiRpbXBsaWNpdCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnQgJiYgdGhpcy5jcmVhdGUoY3VycmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnQgIT09IHByZXZpb3VzKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMub25UZW1wbGF0ZXNEaWRDaGFuZ2VkKGN1cnJlbnQsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlKHRlbXBsYXRlUmVmczogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+W10pIHtcbiAgICB0aGlzLmNvbnRleHQuJGltcGxpY2l0ID0gdGhpcy5jb250ZXh0Lm5lc3QgPSBuZXcgQ29tcG9zZWRWaWV3PE5lc3RDb250ZXh0Pih0aGlzLnZpZXdDb250YWluZXJSZWYsIHRlbXBsYXRlUmVmcyk7XG4gICAgdGhpcy52aWV3UmVmID1cbiAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwgdGhpcy5jb250ZXh0KTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlKHRlbXBsYXRlUmVmczogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+W10pIHtcbiAgICB0aGlzLmNvbnRleHQuJGltcGxpY2l0ID0gdGhpcy5jb250ZXh0Lm5lc3QgPSBuZXcgQ29tcG9zZWRWaWV3PE5lc3RDb250ZXh0Pih0aGlzLnZpZXdDb250YWluZXJSZWYsIHRlbXBsYXRlUmVmcyk7XG4gICAgdGhpcy52aWV3UmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19