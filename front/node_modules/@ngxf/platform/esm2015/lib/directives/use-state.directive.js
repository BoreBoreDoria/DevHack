/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/use-state.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * @record
 * @template T
 */
function UseStateContext() { }
if (false) {
    /** @type {?} */
    UseStateContext.prototype.$implicit;
}
export class UseStateDirective {
    /**
     * @param {?} templateRef
     * @param {?} vcr
     */
    constructor(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = (/** @type {?} */ ({}));
        Object.defineProperty(this.context, '$implicit', {
            get: (/**
             * @return {?}
             */
            () => this.value),
            set: (/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.value = value;
                if (this.embeddedViewRef) {
                    this.embeddedViewRef.detectChanges();
                }
            })
        });
        this.embeddedViewRef = this.vcr.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.useStateDefault) {
            this.value = this.useStateDefault;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.vcr.clear();
        this.embeddedViewRef.destroy();
        this.embeddedViewRef = null;
    }
}
UseStateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[useState]'
            },] }
];
/** @nocollapse */
UseStateDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
UseStateDirective.propDecorators = {
    useStateDefault: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    UseStateDirective.prototype.useStateDefault;
    /**
     * @type {?}
     * @private
     */
    UseStateDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    UseStateDirective.prototype.embeddedViewRef;
    /**
     * @type {?}
     * @private
     */
    UseStateDirective.prototype.value;
    /**
     * @type {?}
     * @private
     */
    UseStateDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    UseStateDirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0YXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdXNlLXN0YXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW1CLEtBQUssRUFBdUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQUV0SSw4QkFNQzs7O0lBTEMsb0NBSUU7O0FBTUosTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFPNUIsWUFDVSxXQUF5QyxFQUN6QyxHQUFxQjtRQURyQixnQkFBVyxHQUFYLFdBQVcsQ0FBOEI7UUFDekMsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFOdkIsWUFBTyxHQUFvQixtQkFBQSxFQUFFLEVBQU8sQ0FBQztRQVEzQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFO1lBQy9DLEdBQUc7OztZQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7WUFDckIsR0FBRzs7OztZQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ25CLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtvQkFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztpQkFDdEM7WUFDSCxDQUFDLENBQUE7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckYsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsZUFBZSxFQUFFO1lBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7OztZQXBDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7Ozs7WUFaZ0YsV0FBVztZQUFFLGdCQUFnQjs7OzhCQWMzRyxLQUFLOzs7O0lBQU4sNENBQThCOzs7OztJQUU5QixvQ0FBNkM7Ozs7O0lBQzdDLDRDQUEwRDs7Ozs7SUFDMUQsa0NBQW1COzs7OztJQUdqQix3Q0FBaUQ7Ozs7O0lBQ2pELGdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmludGVyZmFjZSBVc2VTdGF0ZUNvbnRleHQ8VCA9IGFueT4ge1xuICAkaW1wbGljaXQ6IHtcbiAgICBnZXQ6IFQsXG4gICAgc2V0OiAodmFsdWU6IFQpID0+IHZvaWQ7XG4gICAgZGV0ZWN0Q2hhbmdlczogRnVuY3Rpb247XG4gIH07XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t1c2VTdGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFVzZVN0YXRlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSB1c2VTdGF0ZURlZmF1bHQ6IGFueTtcblxuICBwcml2YXRlIGNvbnRleHQ6IFVzZVN0YXRlQ29udGV4dCA9IHt9IGFzIGFueTtcbiAgcHJpdmF0ZSBlbWJlZGRlZFZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxVc2VTdGF0ZUNvbnRleHQ+O1xuICBwcml2YXRlIHZhbHVlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8VXNlU3RhdGVDb250ZXh0PixcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZlxuICApIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5jb250ZXh0LCAnJGltcGxpY2l0Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLnZhbHVlLFxuICAgICAgc2V0OiAodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5lbWJlZGRlZFZpZXdSZWYpIHtcbiAgICAgICAgICB0aGlzLmVtYmVkZGVkVmlld1JlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtYmVkZGVkVmlld1JlZiA9IHRoaXMudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB0aGlzLmNvbnRleHQpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnVzZVN0YXRlRGVmYXVsdCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudXNlU3RhdGVEZWZhdWx0O1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudmNyLmNsZWFyKCk7XG4gICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYuZGVzdHJveSgpO1xuICAgIHRoaXMuZW1iZWRkZWRWaWV3UmVmID0gbnVsbDtcbiAgfVxuXG59XG4iXX0=