/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/cookies.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { CookiesService } from '../tools/cookies.tools';
/** @enum {string} */
const CookiesStrategies = {
    GET: "get",
    SET: "set",
    REMOVE: "remove",
};
/**
 * @record
 */
function CookiesContext() { }
if (false) {
    /** @type {?} */
    CookiesContext.prototype.$implicit;
    /** @type {?} */
    CookiesContext.prototype.data;
}
/**
 * @record
 */
function CookiesStrategy() { }
if (false) {
    /** @type {?} */
    CookiesStrategy.prototype.type;
    /** @type {?} */
    CookiesStrategy.prototype.changes;
    /** @type {?} */
    CookiesStrategy.prototype.require;
}
/** @type {?} */
const COOKIES_CONFIG = [
    {
        type: CookiesStrategies.GET,
        changes: ['cookiesGet'],
        require: ['cookiesGet']
    },
    {
        type: CookiesStrategies.SET,
        changes: [
            'cookiesSet',
            'cookiesValue',
            'cookiesPath',
            'cookiesDomain',
            'cookiesExpires',
            'cookiesSecure'
        ],
        require: ['cookiesSet']
    },
    {
        type: CookiesStrategies.REMOVE,
        changes: ['cookiesRemove', 'cookiesPath', 'cookiesDomain'],
        require: ['cookiesRemove']
    }
];
export class CookiesDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     * @param {?} cookiesService
     */
    constructor(templateRef, viewContainerRef, cookiesService) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.cookiesService = cookiesService;
        this.context = {
            $implicit: null,
            /**
             * @return {?}
             */
            get data() { return this.$implicit; }
        };
        this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const strategy = this.findStrategy(changes);
        if (strategy) {
            this.execute(strategy);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.viewContainerRef.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    findStrategy(changes) {
        return COOKIES_CONFIG.find((/**
         * @param {?} strategy
         * @return {?}
         */
        (strategy) => {
            return strategy.changes.some((/**
             * @param {?} field
             * @return {?}
             */
            field => !!changes[field]))
                && strategy.require.every((/**
                 * @param {?} field
                 * @return {?}
                 */
                field => !!this[field]));
        }));
    }
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    execute(strategy) {
        /** @type {?} */
        const options = strategy.changes.map((/**
         * @param {?} field
         * @return {?}
         */
        field => this[field]));
        this.action(strategy.type, ...options);
    }
    /**
     * @private
     * @param {?} type
     * @param {...?} options
     * @return {?}
     */
    action(type, ...options) {
        /** @type {?} */
        const name = options[0];
        /** @type {?} */
        const value = options[1];
        /** @type {?} */
        const cookieOptions = {
            path: options[2],
            domain: options[3],
            expires: options[4],
            secure: !!options[5]
        };
        if (CookiesStrategies.GET === type) {
            this.context.$implicit = this.getCookie(name);
        }
        if (CookiesStrategies.SET === type) {
            this.setCookie(name, value, cookieOptions);
            this.context.$implicit = value;
        }
        if (CookiesStrategies.REMOVE === type) {
            this.removeCookie(name, cookieOptions);
            this.context.$implicit = null;
        }
        this.viewRef.markForCheck();
    }
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    getCookie(name) {
        return this.cookiesService.get(name);
    }
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    setCookie(name, value, options) {
        this.cookiesService.set(name, value, options);
    }
    /**
     * @private
     * @param {?} name
     * @param {?=} options
     * @return {?}
     */
    removeCookie(name, options) {
        this.cookiesService.remove(name, options);
    }
}
CookiesDirective.decorators = [
    { type: Directive, args: [{ selector: '[cookies]' },] }
];
/** @nocollapse */
CookiesDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: CookiesService }
];
CookiesDirective.propDecorators = {
    cookiesGet: [{ type: Input }],
    cookiesSet: [{ type: Input }],
    cookiesRemove: [{ type: Input }],
    cookiesValue: [{ type: Input }],
    cookiesPath: [{ type: Input }],
    cookiesDomain: [{ type: Input }],
    cookiesExpires: [{ type: Input }],
    cookiesSecure: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesGet;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesSet;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesRemove;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesValue;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesPath;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesDomain;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesExpires;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesSecure;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    CookiesDirective.prototype.cookiesService;
}
//# sourceMappingURL=data:application/json;base64,