/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/use-reducer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * @record
 */
function Action() { }
if (false) {
    /** @type {?} */
    Action.prototype.type;
    /** @type {?} */
    Action.prototype.payload;
}
/**
 * @record
 * @template T
 */
function UseReducerImplicitContext() { }
if (false) {
    /** @type {?} */
    UseReducerImplicitContext.prototype.state;
    /** @type {?} */
    UseReducerImplicitContext.prototype.dispatch;
    /** @type {?} */
    UseReducerImplicitContext.prototype.reducer;
    /** @type {?} */
    UseReducerImplicitContext.prototype.detectChanges;
}
/**
 * @record
 * @template T
 */
function UseReducerContext() { }
if (false) {
    /** @type {?} */
    UseReducerContext.prototype.$implicit;
}
export class UseReducerDirective {
    /**
     * @param {?} templateRef
     * @param {?} vcr
     */
    constructor(templateRef, vcr) {
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: {
                state: null,
                /**
                 * @param {?} action
                 * @return {?}
                 */
                dispatch(action) {
                    this.state = this.reducer(this.state, action);
                    this.detectChanges();
                },
                reducer: ((/**
                 * @return {?}
                 */
                () => { })),
                detectChanges: (/**
                 * @return {?}
                 */
                () => {
                    this.embeddedViewRef.detectChanges();
                })
            }
        };
        this.embeddedViewRef = this.vcr.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.useReducerInit && typeof this.useReducerInit === 'function') {
            this.context.$implicit.reducer = this.useReducerInit;
            this.context.$implicit.state = this.useReducerWith;
            if (this.useReducerAnd) {
                this.context.$implicit.dispatch(this.useReducerAnd);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.vcr.clear();
        this.embeddedViewRef.destroy();
        this.embeddedViewRef = null;
    }
}
UseReducerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[useReducer]'
            },] }
];
/** @nocollapse */
UseReducerDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
UseReducerDirective.propDecorators = {
    useReducerInit: [{ type: Input }],
    useReducerWith: [{ type: Input }],
    useReducerAnd: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    UseReducerDirective.prototype.useReducerInit;
    /** @type {?} */
    UseReducerDirective.prototype.useReducerWith;
    /** @type {?} */
    UseReducerDirective.prototype.useReducerAnd;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.embeddedViewRef;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZHVjZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy91c2UtcmVkdWNlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixLQUFLLEVBQXVDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUV0SSxxQkFHQzs7O0lBRkMsc0JBQWE7O0lBQ2IseUJBQWE7Ozs7OztBQUtmLHdDQUtDOzs7SUFKQywwQ0FBUzs7SUFDVCw2Q0FBZ0M7O0lBQ2hDLDRDQUFpQjs7SUFDakIsa0RBQXdCOzs7Ozs7QUFHMUIsZ0NBRUM7OztJQURDLHNDQUF3Qzs7QUFNMUMsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUFxQjlCLFlBQ1UsV0FBMkMsRUFDM0MsR0FBcUI7UUFEckIsZ0JBQVcsR0FBWCxXQUFXLENBQWdDO1FBQzNDLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBbEJ2QixZQUFPLEdBQXNCO1lBQ25DLFNBQVMsRUFBRTtnQkFDVCxLQUFLLEVBQUUsSUFBSTs7Ozs7Z0JBQ1gsUUFBUSxDQUFFLE1BQWM7b0JBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUM5QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ3ZCLENBQUM7Z0JBQ0QsT0FBTyxFQUFFOzs7Z0JBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFDO2dCQUNuQixhQUFhOzs7Z0JBQUUsR0FBRyxFQUFFO29CQUNsQixJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN2QyxDQUFDLENBQUE7YUFDRjtTQUNGLENBQUM7UUFDTSxvQkFBZSxHQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBSzNELENBQUM7Ozs7O0lBRUosV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ3JELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ25ELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNyRDtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQzs7O1lBM0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7OztZQXRCZ0YsV0FBVztZQUFFLGdCQUFnQjs7OzZCQXdCM0csS0FBSzs2QkFDTCxLQUFLOzRCQUNMLEtBQUs7Ozs7SUFGTiw2Q0FBaUM7O0lBQ2pDLDZDQUE2Qjs7SUFDN0IsNENBQStCOzs7OztJQUUvQixzQ0FZRTs7Ozs7SUFDRiw4Q0FDOEQ7Ozs7O0lBRzVELDBDQUFtRDs7Ozs7SUFDbkQsa0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW50ZXJmYWNlIEFjdGlvbiB7XG4gIHR5cGU6IHN0cmluZztcbiAgcGF5bG9hZDogYW55O1xufVxuXG50eXBlIFJlZHVjZXI8VCA9IGFueT4gPSAoc3RhdGU6IFQsIGFjdGlvbjogQWN0aW9uKSA9PiBUO1xuXG5pbnRlcmZhY2UgVXNlUmVkdWNlckltcGxpY2l0Q29udGV4dDxUPiB7XG4gIHN0YXRlOiBUO1xuICBkaXNwYXRjaDogKGFjdGlvbjogQWN0aW9uKSA9PiBUO1xuICByZWR1Y2VyOiBSZWR1Y2VyO1xuICBkZXRlY3RDaGFuZ2VzOiBGdW5jdGlvbjtcbn1cblxuaW50ZXJmYWNlIFVzZVJlZHVjZXJDb250ZXh0PFQgPSBhbnk+IHtcbiAgJGltcGxpY2l0OiBVc2VSZWR1Y2VySW1wbGljaXRDb250ZXh0PFQ+O1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdXNlUmVkdWNlcl0nXG59KVxuZXhwb3J0IGNsYXNzIFVzZVJlZHVjZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHVzZVJlZHVjZXJJbml0OiBSZWR1Y2VyO1xuICBASW5wdXQoKSB1c2VSZWR1Y2VyV2l0aDogYW55O1xuICBASW5wdXQoKSB1c2VSZWR1Y2VyQW5kOiBBY3Rpb247XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBVc2VSZWR1Y2VyQ29udGV4dCA9IHtcbiAgICAkaW1wbGljaXQ6IHtcbiAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgZGlzcGF0Y2ggKGFjdGlvbjogQWN0aW9uKTogYW55IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucmVkdWNlcih0aGlzLnN0YXRlLCBhY3Rpb24pO1xuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0sXG4gICAgICByZWR1Y2VyOiAoKCkgPT4ge30pLFxuICAgICAgZGV0ZWN0Q2hhbmdlczogKCkgPT4ge1xuICAgICAgICB0aGlzLmVtYmVkZGVkVmlld1JlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwcml2YXRlIGVtYmVkZGVkVmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPFVzZVJlZHVjZXJDb250ZXh0PiA9XG4gICAgdGhpcy52Y3IuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHRoaXMuY29udGV4dCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8VXNlUmVkdWNlckNvbnRleHQ+LFxuICAgIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMudXNlUmVkdWNlckluaXQgJiYgdHlwZW9mIHRoaXMudXNlUmVkdWNlckluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQucmVkdWNlciA9IHRoaXMudXNlUmVkdWNlckluaXQ7XG4gICAgICB0aGlzLmNvbnRleHQuJGltcGxpY2l0LnN0YXRlID0gdGhpcy51c2VSZWR1Y2VyV2l0aDtcbiAgICAgIGlmICh0aGlzLnVzZVJlZHVjZXJBbmQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdC5kaXNwYXRjaCh0aGlzLnVzZVJlZHVjZXJBbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudmNyLmNsZWFyKCk7XG4gICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYuZGVzdHJveSgpO1xuICAgIHRoaXMuZW1iZWRkZWRWaWV3UmVmID0gbnVsbDtcbiAgfVxuXG59XG4iXX0=