/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/repeat.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
export class RepeatContext {
}
if (false) {
    /** @type {?} */
    RepeatContext.prototype.$implicit;
    /** @type {?} */
    RepeatContext.prototype.repeat;
    /** @type {?} */
    RepeatContext.prototype.index;
}
export class RepeatDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     */
    constructor(viewContainerRef, templateRef) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
    }
    /**
     * @return {?}
     */
    get count() {
        /** @type {?} */
        const count = isNumber(this.repeat) ? this.repeat :
            isNumber(this.repeatOf) ? this.repeatOf : 0;
        return Math.max(count, 0);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('repeat' in changes || 'repeatOf' in changes) {
            this.onRepeatChanged(this.count);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.viewContainerRef.clear();
    }
    /**
     * @private
     * @param {?} count
     * @return {?}
     */
    onRepeatChanged(count) {
        /** When we need to create new items */
        for (let i = this.viewContainerRef.length; i < count; i++) {
            this.viewContainerRef.createEmbeddedView(this.templateRef, {
                $implicit: i, index: i, repeat: i
            }, i);
        }
        /** When we need to remove old items */
        for (let i = this.viewContainerRef.length; i > count; i--) {
            this.viewContainerRef.remove(i - 1);
        }
    }
}
RepeatDirective.decorators = [
    { type: Directive, args: [{ selector: '[repeat]' },] }
];
/** @nocollapse */
RepeatDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
RepeatDirective.propDecorators = {
    repeat: [{ type: Input }],
    repeatOf: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RepeatDirective.prototype.repeat;
    /** @type {?} */
    RepeatDirective.prototype.repeatOf;
    /**
     * @type {?}
     * @private
     */
    RepeatDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    RepeatDirective.prototype.templateRef;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === 'number';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVwZWF0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckgsTUFBTSxPQUFPLGFBQWE7Q0FJekI7OztJQUhDLGtDQUFrQjs7SUFDbEIsK0JBQWU7O0lBQ2YsOEJBQWM7O0FBSWhCLE1BQU0sT0FBTyxlQUFlOzs7OztJQVkxQixZQUNVLGdCQUFrQyxFQUNsQyxXQUF1QztRQUR2QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGdCQUFXLEdBQVgsV0FBVyxDQUE0QjtJQUM5QyxDQUFDOzs7O0lBVkosSUFBSSxLQUFLOztjQUNELEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBT0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksT0FBTyxFQUFFO1lBQ2hELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBRU8sZUFBZSxDQUFDLEtBQWE7UUFDbkMsdUNBQXVDO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUN6RCxTQUFTLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNQO1FBRUQsdUNBQXVDO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQzs7O1lBeENGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7Ozs7WUFSMEMsZ0JBQWdCO1lBQTdCLFdBQVc7OztxQkFXeEUsS0FBSzt1QkFDTCxLQUFLOzs7O0lBRE4saUNBQXdCOztJQUN4QixtQ0FBMEI7Ozs7O0lBVXhCLDJDQUEwQzs7Ozs7SUFDMUMsc0NBQStDOzs7Ozs7QUE2Qm5ELFNBQVMsUUFBUSxDQUFDLEtBQWM7SUFDOUIsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgUmVwZWF0Q29udGV4dCB7XG4gICRpbXBsaWNpdDogbnVtYmVyO1xuICByZXBlYXQ6IG51bWJlcjtcbiAgaW5kZXg6IG51bWJlcjtcbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3JlcGVhdF0nIH0pXG5leHBvcnQgY2xhc3MgUmVwZWF0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHJlcGVhdDogbnVtYmVyO1xuICBASW5wdXQoKSByZXBlYXRPZjogbnVtYmVyO1xuXG4gIGdldCBjb3VudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IGNvdW50ID0gaXNOdW1iZXIodGhpcy5yZXBlYXQpID8gdGhpcy5yZXBlYXQgOlxuICAgICAgaXNOdW1iZXIodGhpcy5yZXBlYXRPZikgPyB0aGlzLnJlcGVhdE9mIDogMDtcblxuICAgIHJldHVybiBNYXRoLm1heChjb3VudCwgMCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8UmVwZWF0Q29udGV4dD5cbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoJ3JlcGVhdCcgaW4gY2hhbmdlcyB8fCAncmVwZWF0T2YnIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMub25SZXBlYXRDaGFuZ2VkKHRoaXMuY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblJlcGVhdENoYW5nZWQoY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIC8qKiBXaGVuIHdlIG5lZWQgdG8gY3JlYXRlIG5ldyBpdGVtcyAqL1xuICAgIGZvciAobGV0IGkgPSB0aGlzLnZpZXdDb250YWluZXJSZWYubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB7XG4gICAgICAgICRpbXBsaWNpdDogaSwgaW5kZXg6IGksIHJlcGVhdDogaVxuICAgICAgfSwgaSk7XG4gICAgfVxuXG4gICAgLyoqIFdoZW4gd2UgbmVlZCB0byByZW1vdmUgb2xkIGl0ZW1zICovXG4gICAgZm9yIChsZXQgaSA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5sZW5ndGg7IGkgPiBjb3VudDsgaS0tKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYucmVtb3ZlKGkgLSAxKTtcbiAgICB9XG4gIH1cblxufVxuXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIG51bWJlciB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuIl19