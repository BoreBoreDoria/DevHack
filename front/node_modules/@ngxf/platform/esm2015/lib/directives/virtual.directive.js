/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/virtual.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, Input } from '@angular/core';
import { VirtualHandler } from '../tools/virtual.handler';
export class VirtualDirective {
    /**
     * @param {?} handler
     * @param {?} elementRef
     * @param {?} cd
     */
    constructor(handler, elementRef, cd) {
        this.handler = handler;
        this.elementRef = elementRef;
        this.cd = cd;
        this.handler.register(this.elementRef.nativeElement, cd);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.handler.unregister(this.elementRef.nativeElement);
    }
}
VirtualDirective.decorators = [
    { type: Directive, args: [{ selector: '[virtual]' },] }
];
/** @nocollapse */
VirtualDirective.ctorParameters = () => [
    { type: VirtualHandler },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
VirtualDirective.propDecorators = {
    virtual: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VirtualDirective.prototype.virtual;
    /**
     * @type {?}
     * @private
     */
    VirtualDirective.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    VirtualDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    VirtualDirective.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3ZpcnR1YWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUcxRCxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7SUFHM0IsWUFDVSxPQUF1QixFQUN2QixVQUFzQixFQUN0QixFQUFxQjtRQUZyQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBRTdCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7WUFkRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFOzs7O1lBRjNCLGNBQWM7WUFEZ0IsVUFBVTtZQUF4QyxpQkFBaUI7OztzQkFLdkIsS0FBSzs7OztJQUFOLG1DQUFzQjs7Ozs7SUFHcEIsbUNBQStCOzs7OztJQUMvQixzQ0FBOEI7Ozs7O0lBQzlCLDhCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpcnR1YWxIYW5kbGVyIH0gZnJvbSAnLi4vdG9vbHMvdmlydHVhbC5oYW5kbGVyJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3ZpcnR1YWxdJyB9KVxuZXhwb3J0IGNsYXNzIFZpcnR1YWxEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSB2aXJ0dWFsOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBoYW5kbGVyOiBWaXJ0dWFsSGFuZGxlcixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgdGhpcy5oYW5kbGVyLnJlZ2lzdGVyKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjZCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmhhbmRsZXIudW5yZWdpc3Rlcih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cbn1cbiJdfQ==