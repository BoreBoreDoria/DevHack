/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/timeout.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
export class TimeoutDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     */
    constructor(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
    }
    /**
     * @param {?} milliseconds
     * @return {?}
     */
    set timeout(milliseconds) {
        this.dispose();
        if (isNumber(milliseconds)) {
            this.create(milliseconds);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dispose();
        this.viewContainerRef.clear();
    }
    /**
     * @private
     * @param {?} milliseconds
     * @return {?}
     */
    create(milliseconds) {
        this.timeoutId = setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.viewContainerRef) {
                this.viewContainerRef.createEmbeddedView(this.templateRef);
            }
        }), milliseconds);
    }
    /**
     * @private
     * @return {?}
     */
    dispose() {
        this.viewContainerRef.clear();
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
    }
}
TimeoutDirective.decorators = [
    { type: Directive, args: [{ selector: '[timeout]' },] }
];
/** @nocollapse */
TimeoutDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
TimeoutDirective.propDecorators = {
    timeout: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimeoutDirective.prototype.timeoutId;
    /**
     * @type {?}
     * @private
     */
    TimeoutDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    TimeoutDirective.prototype.viewContainerRef;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === 'number';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZW91dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3RpbWVvdXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWEsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNGLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBSTNCLFlBQ1UsV0FBOEIsRUFDOUIsZ0JBQWtDO1FBRGxDLGdCQUFXLEdBQVgsV0FBVyxDQUFtQjtRQUM5QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQ3pDLENBQUM7Ozs7O0lBRUosSUFBYSxPQUFPLENBQUMsWUFBb0I7UUFDdkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7OztJQUVPLE1BQU0sQ0FBQyxZQUFvQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUM1RDtRQUNILENBQUMsR0FBRSxZQUFZLENBQUMsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVPLE9BQU87UUFDYixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTs7OztZQUZFLFdBQVc7WUFBRSxnQkFBZ0I7OztzQkFZaEUsS0FBSzs7Ozs7OztJQVBOLHFDQUF1Qjs7Ozs7SUFHckIsdUNBQXNDOzs7OztJQUN0Qyw0Q0FBMEM7Ozs7OztBQWdDOUMsU0FBUyxRQUFRLENBQUMsS0FBYTtJQUM3QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNuQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbdGltZW91dF0nIH0pXG5leHBvcnQgY2xhc3MgVGltZW91dERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSB0aW1lb3V0SWQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxudWxsPixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7fVxuXG4gIEBJbnB1dCgpIHNldCB0aW1lb3V0KG1pbGxpc2Vjb25kczogbnVtYmVyKSB7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgaWYgKGlzTnVtYmVyKG1pbGxpc2Vjb25kcykpIHtcbiAgICAgIHRoaXMuY3JlYXRlKG1pbGxpc2Vjb25kcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZShtaWxsaXNlY29uZHM6IG51bWJlcikge1xuICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy52aWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICB9XG4gICAgfSwgbWlsbGlzZWNvbmRzKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICBpZiAodGhpcy50aW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gICAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiBudW1iZXIpOiB2YWx1ZSBpcyBudW1iZXIge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbn1cbiJdfQ==