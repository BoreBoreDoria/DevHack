/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/async.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { isObservable } from 'rxjs';
/**
 * @record
 */
function AsyncContext() { }
if (false) {
    /** @type {?} */
    AsyncContext.prototype.$implicit;
}
/**
 * @record
 */
function SubscriptionStrategy() { }
if (false) {
    /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    SubscriptionStrategy.prototype.createSubscription = function (async, next, error, complete) { };
    /**
     * @param {?} subscription
     * @return {?}
     */
    SubscriptionStrategy.prototype.dispose = function (subscription) { };
}
class ObservableStrategy {
    /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    createSubscription(async, next, error, complete) {
        return async.subscribe(next, error, complete);
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    dispose(subscription) {
        if (subscription) {
            subscription.unsubscribe();
        }
    }
}
class PromiseStrategy {
    /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    createSubscription(async, next, error, complete) {
        /** @type {?} */
        const promise = async.then(next, error);
        if ('finally' in promise) {
            return ((/** @type {?} */ (promise))).finally(complete);
        }
        return promise;
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    dispose(subscription) { }
}
/** @type {?} */
const observableStrategy = new ObservableStrategy();
/** @type {?} */
const promiseStrategy = new PromiseStrategy();
/**
 * @param {?} async
 * @return {?}
 */
function resolveStrategy(async) {
    if (isObservable(async)) {
        return observableStrategy;
    }
    if (isPromise(async)) {
        return promiseStrategy;
    }
    throw new Error(`InvalidDirectiveArgument: 'async' for directive 'async'`);
}
export class AsyncDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} cd
     */
    constructor(templateRef, viewContainer, cd) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this.next = new EventEmitter();
        this.error = new EventEmitter();
        this.complete = new EventEmitter();
        this.context = { $implicit: null };
        this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.context);
        this.componentInstance = ((/** @type {?} */ (cd))).context;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('async' in changes) {
            this.onAsyncDidChanged(this.async, changes.async.previousValue);
        }
        if ('asyncFrom' in changes) {
            this.onAsyncDidChanged(this.asyncFrom, changes.asyncFrom.previousValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dispose();
        this.viewContainer.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    onAsyncDidChanged(current, previous) {
        if (!this.subscription) {
            return current && this.subscribe(current);
        }
        if (current !== previous) {
            this.dispose();
            return this.onAsyncDidChanged(current, null);
        }
    }
    /**
     * @private
     * @param {?} async
     * @return {?}
     */
    subscribe(async) {
        this.strategy = resolveStrategy(async);
        this.subscription = this.strategy.createSubscription(async, (/**
         * @param {?} value
         * @return {?}
         */
        (value) => this.onNext(value)), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => this.onError(error)), (/**
         * @return {?}
         */
        () => this.onComplete()));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    onNext(value) {
        this.context.$implicit = value;
        this.next.emit(value);
        if (isFunction(this.asyncNext)) {
            this.asyncNext.call(this.componentInstance, value);
        }
        this.viewRef.markForCheck();
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        this.error.emit(error);
        if (isFunction(this.asyncError)) {
            this.asyncError.call(this.componentInstance, error);
        }
    }
    /**
     * @private
     * @return {?}
     */
    onComplete() {
        this.complete.next();
        if (isFunction(this.asyncComplete)) {
            this.asyncComplete.call(this.componentInstance);
        }
    }
    /**
     * @private
     * @return {?}
     */
    dispose() {
        if (this.strategy) {
            this.strategy.dispose(this.subscription);
            this.subscription = null;
            this.strategy = null;
        }
    }
}
AsyncDirective.decorators = [
    { type: Directive, args: [{ selector: '[async]' },] }
];
/** @nocollapse */
AsyncDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef }
];
AsyncDirective.propDecorators = {
    async: [{ type: Input }],
    asyncFrom: [{ type: Input }],
    asyncNext: [{ type: Input }],
    asyncError: [{ type: Input }],
    asyncComplete: [{ type: Input }],
    next: [{ type: Output }],
    error: [{ type: Output }],
    complete: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AsyncDirective.prototype.async;
    /** @type {?} */
    AsyncDirective.prototype.asyncFrom;
    /** @type {?} */
    AsyncDirective.prototype.asyncNext;
    /** @type {?} */
    AsyncDirective.prototype.asyncError;
    /** @type {?} */
    AsyncDirective.prototype.asyncComplete;
    /** @type {?} */
    AsyncDirective.prototype.next;
    /** @type {?} */
    AsyncDirective.prototype.error;
    /** @type {?} */
    AsyncDirective.prototype.complete;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.componentInstance;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.strategy;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.cd;
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=data:application/json;base64,