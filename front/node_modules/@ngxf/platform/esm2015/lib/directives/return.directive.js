/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/return.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function ReturnContext() { }
if (false) {
    /** @type {?} */
    ReturnContext.prototype.$implicit;
}
export class ReturnDirective {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('return' in changes) {
            if (!this.composedView) {
                this.create();
            }
            else {
                this.update();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.composedView) {
            this.composedView.destroy();
            this.composedView = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    create() {
        this.composedView = new ComposedView(this.viewContainerRef);
        this.composedView.createEmbeddedView(this.context);
        this.update();
    }
    /**
     * @private
     * @return {?}
     */
    update() {
        this.composedView.updateContext((/**
         * @param {?} context
         * @return {?}
         */
        (context) => {
            return Object.assign(context, this.return);
        }));
    }
}
ReturnDirective.decorators = [
    { type: Directive, args: [{ selector: '[return]' },] }
];
/** @nocollapse */
ReturnDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
ReturnDirective.propDecorators = {
    return: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ReturnDirective.prototype.return;
    /**
     * @type {?}
     * @private
     */
    ReturnDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ReturnDirective.prototype.composedView;
    /**
     * @type {?}
     * @private
     */
    ReturnDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0dXJuLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmV0dXJuLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QyxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFFaEUsNEJBRUM7OztJQURDLGtDQUFnQjs7QUFJbEIsTUFBTSxPQUFPLGVBQWU7Ozs7SUFTMUIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMOUMsWUFBTyxHQUFrQjtZQUMvQixTQUFTLEVBQUUsSUFBSTtTQUNoQixDQUFDO0lBR3VELENBQUM7Ozs7O0lBRTFELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQUU7WUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmO1NBQ0Y7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxNQUFNO1FBQ1osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFTyxNQUFNO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhOzs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUMxQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQXZDRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFOzs7O1lBUDZCLGdCQUFnQjs7O3FCQVU3RSxLQUFLOzs7O0lBQU4saUNBQXFCOzs7OztJQUVyQixrQ0FFRTs7Ozs7SUFDRix1Q0FBa0Q7Ozs7O0lBRXRDLDJDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb3NlZFZpZXcgfSBmcm9tICcuLi90b29scy9yZWNvbXBvc2UvY29tcG9zZWQudmlldyc7XG5cbmludGVyZmFjZSBSZXR1cm5Db250ZXh0IHtcbiAgJGltcGxpY2l0OiBudWxsO1xufVxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbcmV0dXJuXScgfSlcbmV4cG9ydCBjbGFzcyBSZXR1cm5EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgcmV0dXJuOiBhbnk7XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBSZXR1cm5Db250ZXh0ID0ge1xuICAgICRpbXBsaWNpdDogbnVsbFxuICB9O1xuICBwcml2YXRlIGNvbXBvc2VkVmlldzogQ29tcG9zZWRWaWV3PFJldHVybkNvbnRleHQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCdyZXR1cm4nIGluIGNoYW5nZXMpIHtcbiAgICAgIGlmICghdGhpcy5jb21wb3NlZFZpZXcpIHtcbiAgICAgICAgdGhpcy5jcmVhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY29tcG9zZWRWaWV3KSB7XG4gICAgICB0aGlzLmNvbXBvc2VkVmlldy5kZXN0cm95KCk7XG4gICAgICB0aGlzLmNvbXBvc2VkVmlldyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGUoKSB7XG4gICAgdGhpcy5jb21wb3NlZFZpZXcgPSBuZXcgQ29tcG9zZWRWaWV3KHRoaXMudmlld0NvbnRhaW5lclJlZik7XG4gICAgdGhpcy5jb21wb3NlZFZpZXcuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuY29udGV4dCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlKCkge1xuICAgIHRoaXMuY29tcG9zZWRWaWV3LnVwZGF0ZUNvbnRleHQoKGNvbnRleHQpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbnRleHQsIHRoaXMucmV0dXJuKTtcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=