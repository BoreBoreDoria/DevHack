/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/track-by-key.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgForOf } from '@angular/common';
import { Directive, Host, Input, Optional, ViewContainerRef } from '@angular/core';
/**
 * @template T
 */
export class NgForTrackByKeyDirective {
    /**
     * @param {?} ngFor
     * @param {?} viewContainerRef
     */
    constructor(ngFor, viewContainerRef) {
        this.ngFor = ngFor;
        this.viewContainerRef = viewContainerRef;
        if (!ngFor) {
            throw new Error('TrackByKey should use with *ngFor!');
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('ngForTrackByKey' in changes) {
            /** @type {?} */
            const key = this.ngForTrackByKey;
            if (key) {
                this.ngFor.ngForTrackBy = (/**
                 * @param {?} index
                 * @param {?} item
                 * @return {?}
                 */
                (index, item) => item[key]);
            }
            else {
                this.ngFor.ngForTrackBy = undefined;
            }
            this.ngFor['_differ'] = null;
            this.ngFor['_ngForOfDirty'] = true;
            this.viewContainerRef.clear();
            this.ngFor.ngDoCheck();
        }
    }
}
NgForTrackByKeyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngForTrackByKey]'
            },] }
];
/** @nocollapse */
NgForTrackByKeyDirective.ctorParameters = () => [
    { type: NgForOf, decorators: [{ type: Host }, { type: Optional }] },
    { type: ViewContainerRef }
];
NgForTrackByKeyDirective.propDecorators = {
    ngForTrackByKey: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgForTrackByKeyDirective.prototype.ngForTrackByKey;
    /**
     * @type {?}
     * @private
     */
    NgForTrackByKeyDirective.prototype.ngFor;
    /**
     * @type {?}
     * @private
     */
    NgForTrackByKeyDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2stYnkta2V5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdHJhY2stYnkta2V5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWEsUUFBUSxFQUFpQixnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUs3RyxNQUFNLE9BQU8sd0JBQXdCOzs7OztJQUluQyxZQUF3QyxLQUFpQixFQUFVLGdCQUFrQztRQUE3RCxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNuRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxpQkFBaUIsSUFBSSxPQUFPLEVBQUU7O2tCQUMxQixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWU7WUFDaEMsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZOzs7OztnQkFBRyxDQUFDLEtBQWEsRUFBRSxJQUFPLEVBQWMsRUFBRSxDQUFDLElBQUksQ0FBRSxHQUFHLENBQUUsQ0FBQSxDQUFDO2FBQy9FO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQzthQUNyQztZQUVELElBQUksQ0FBQyxLQUFLLENBQUUsU0FBUyxDQUFFLEdBQUcsSUFBSSxDQUFDO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUUsZUFBZSxDQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7O1lBM0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2FBQzlCOzs7O1lBTFEsT0FBTyx1QkFVRCxJQUFJLFlBQUksUUFBUTtZQVRzQyxnQkFBZ0I7Ozs4QkFPbEYsS0FBSzs7OztJQUFOLG1EQUFrQzs7Ozs7SUFFdEIseUNBQTZDOzs7OztJQUFFLG9EQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nRm9yT2YgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0LCBJbnB1dCwgT25DaGFuZ2VzLCBPcHRpb25hbCwgU2ltcGxlQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmdGb3JUcmFja0J5S2V5XSdcbn0pXG5leHBvcnQgY2xhc3MgTmdGb3JUcmFja0J5S2V5RGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBuZ0ZvclRyYWNrQnlLZXk6IGtleW9mIFQ7XG5cbiAgY29uc3RydWN0b3IoQEhvc3QoKSBAT3B0aW9uYWwoKSBwcml2YXRlIG5nRm9yOiBOZ0Zvck9mPFQ+LCBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgICBpZiAoIW5nRm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYWNrQnlLZXkgc2hvdWxkIHVzZSB3aXRoICpuZ0ZvciEnKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKCduZ0ZvclRyYWNrQnlLZXknIGluIGNoYW5nZXMpIHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMubmdGb3JUcmFja0J5S2V5O1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICB0aGlzLm5nRm9yLm5nRm9yVHJhY2tCeSA9IChpbmRleDogbnVtYmVyLCBpdGVtOiBUKTogVFtrZXlvZiBUXSA9PiBpdGVtWyBrZXkgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubmdGb3IubmdGb3JUcmFja0J5ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5nRm9yWyAnX2RpZmZlcicgXSA9IG51bGw7XG4gICAgICB0aGlzLm5nRm9yWyAnX25nRm9yT2ZEaXJ0eScgXSA9IHRydWU7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICAgIHRoaXMubmdGb3IubmdEb0NoZWNrKCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==