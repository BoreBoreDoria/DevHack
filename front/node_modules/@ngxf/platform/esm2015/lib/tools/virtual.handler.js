/**
 * @fileoverview added by tsickle
 * Generated from: lib/tools/virtual.handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class VirtualHandler {
    constructor() {
        this.elementLink = new Map();
        this.observer = new IntersectionObserver((/**
         * @param {?} entries
         * @return {?}
         */
        entries => {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                /** @type {?} */
                const cd = this.elementLink.get((/** @type {?} */ (entry.target)));
                entry.isIntersecting ? attachCD(cd) : detachCD(cd);
            }));
        }));
    }
    /**
     * @param {?} element
     * @param {?} cd
     * @return {?}
     */
    register(element, cd) {
        this.elementLink.set(element, cd);
        this.observer.observe(element);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    unregister(element) {
        this.elementLink.delete(element);
        this.observer.unobserve(element);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.elementLink.forEach((/**
         * @param {?} cd
         * @param {?} e
         * @return {?}
         */
        (cd, e) => this.observer.unobserve(e)));
        this.elementLink.clear();
    }
}
VirtualHandler.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ VirtualHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function VirtualHandler_Factory() { return new VirtualHandler(); }, token: VirtualHandler, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    VirtualHandler.prototype.elementLink;
    /**
     * @type {?}
     * @private
     */
    VirtualHandler.prototype.observer;
}
/**
 * @param {?} cd
 * @return {?}
 */
function attachCD(cd) {
    cd.reattach();
    cd.detectChanges();
}
/**
 * @param {?} cd
 * @return {?}
 */
function detachCD(cd) {
    cd.detach();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvdG9vbHMvdmlydHVhbC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0MsTUFBTSxlQUFlLENBQUM7O0FBR3pFLE1BQU0sT0FBTyxjQUFjO0lBRDNCO1FBR1UsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztRQUNwRCxhQUFRLEdBQUcsSUFBSSxvQkFBb0I7Ozs7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNwRCxPQUFPLENBQUMsT0FBTzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFOztzQkFDaEIsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLG1CQUFBLEtBQUssQ0FBQyxNQUFNLEVBQVcsQ0FBQztnQkFDeEQsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckQsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztLQWlCSjs7Ozs7O0lBZkMsUUFBUSxDQUFDLE9BQWdCLEVBQUUsRUFBcUI7UUFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLE9BQWdCO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7OztZQXhCRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7Ozs7OztJQUdoQyxxQ0FBNEQ7Ozs7O0lBQzVELGtDQUtHOzs7Ozs7QUFtQkwsU0FBUyxRQUFRLENBQUMsRUFBcUI7SUFDckMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2QsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3JCLENBQUM7Ozs7O0FBRUQsU0FBUyxRQUFRLENBQUMsRUFBcUI7SUFDckMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsSGFuZGxlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBlbGVtZW50TGluayA9IG5ldyBNYXA8RWxlbWVudCwgQ2hhbmdlRGV0ZWN0b3JSZWY+KCk7XG4gIHByaXZhdGUgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgIGNvbnN0IGNkID0gdGhpcy5lbGVtZW50TGluay5nZXQoZW50cnkudGFyZ2V0IGFzIEVsZW1lbnQpO1xuICAgICAgZW50cnkuaXNJbnRlcnNlY3RpbmcgPyBhdHRhY2hDRChjZCkgOiBkZXRhY2hDRChjZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJlZ2lzdGVyKGVsZW1lbnQ6IEVsZW1lbnQsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMuZWxlbWVudExpbmsuc2V0KGVsZW1lbnQsIGNkKTtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gIH1cblxuICB1bnJlZ2lzdGVyKGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnRMaW5rLmRlbGV0ZShlbGVtZW50KTtcbiAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudExpbmsuZm9yRWFjaCgoY2QsIGUpID0+IHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKGUpKTtcbiAgICB0aGlzLmVsZW1lbnRMaW5rLmNsZWFyKCk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBhdHRhY2hDRChjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgY2QucmVhdHRhY2goKTtcbiAgY2QuZGV0ZWN0Q2hhbmdlcygpO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hDRChjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgY2QuZGV0YWNoKCk7XG59XG4iXX0=