/**
 * @fileoverview added by tsickle
 * Generated from: lib/tools/cookies.tools.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { APP_BASE_HREF } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @record
 */
export function CookieOptionsArgs() { }
if (false) {
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.path;
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.domain;
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.expires;
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.secure;
}
/**
 * @record
 */
export function ICookies() { }
/**
 * @record
 */
export function ICookieService() { }
if (false) {
    /**
     * @param {?} key
     * @return {?}
     */
    ICookieService.prototype.get = function (key) { };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.set = function (key, value, options) { };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.remove = function (key, options) { };
}
export class CookieOptions {
    /**
     * @param {?=} __0
     */
    constructor({ path, domain, expires, secure } = {}) {
        this.path = this.isPresent(path) ? path : null;
        this.domain = this.isPresent(domain) ? domain : null;
        this.expires = this.isPresent(expires) ? expires : null;
        this.secure = this.isPresent(secure) ? secure : false;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    merge(options) {
        return new CookieOptions((/** @type {?} */ ({
            path: this.isPresent(options) && this.isPresent(options.path) ? options.path : this.path,
            domain: this.isPresent(options) && this.isPresent(options.domain) ? options.domain : this.domain,
            expires: this.isPresent(options) && this.isPresent(options.expires) ? options.expires : this.expires,
            secure: this.isPresent(options) && this.isPresent(options.secure) ? options.secure : this.secure,
        })));
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
}
if (false) {
    /** @type {?} */
    CookieOptions.prototype.path;
    /** @type {?} */
    CookieOptions.prototype.domain;
    /** @type {?} */
    CookieOptions.prototype.expires;
    /** @type {?} */
    CookieOptions.prototype.secure;
}
export class BaseCookieOptions extends CookieOptions {
    /**
     * @param {?} baseHref
     */
    constructor(baseHref) {
        super({ path: baseHref || '/' });
        this.baseHref = baseHref;
    }
}
BaseCookieOptions.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
BaseCookieOptions.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }
];
/** @nocollapse */ BaseCookieOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseCookieOptions_Factory() { return new BaseCookieOptions(i0.ɵɵinject(i1.APP_BASE_HREF, 8)); }, token: BaseCookieOptions, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    BaseCookieOptions.prototype.baseHref;
}
export class CookiesService {
    /**
     * @param {?=} defaultOptions
     */
    constructor(defaultOptions) {
        this.defaultOptions = defaultOptions;
    }
    /**
     * @protected
     * @return {?}
     */
    get cookieString() {
        return document.cookie || '';
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        document.cookie = val;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    cookieReader(key) {
        /** @type {?} */
        const currentCookieString = this.cookieString;
        if (currentCookieString) {
            /** @type {?} */
            const cookieArray = currentCookieString.split('; ');
            return cookieArray.reduce((/**
             * @param {?} cookies
             * @param {?} current
             * @return {?}
             */
            (cookies, current) => {
                /** @type {?} */
                const cookie = current.split('=');
                return Object.assign(Object.assign({}, cookies), { [cookie[0]]: decodeURIComponent(cookie[1]) });
            }), {})[key];
        }
    }
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    cookieWriter(name, value, options) {
        this.cookieString = this.buildCookieString(name, value, options);
    }
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    buildCookieString(name, value, options) {
        /** @type {?} */
        const defaultOpts = this.defaultOptions || new CookieOptions((/** @type {?} */ ({ path: '/' })));
        /** @type {?} */
        const opts = this.mergeOptions(defaultOpts, options);
        /** @type {?} */
        let expires = opts.expires;
        if (!value) {
            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
            value = '';
        }
        if (typeof expires === 'string') {
            expires = new Date(expires);
        }
        /** @type {?} */
        let str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        str += opts.path ? `;path=${opts.path}` : '';
        str += opts.domain ? `;domain=${opts.domain}` : '';
        str += expires ? `;expires=${expires.toUTCString()}` : '';
        str += opts.secure ? ';secure' : '';
        /** @type {?} */
        const cookieLength = str.length + 1;
        if (cookieLength > 4096) {
            console.log(`Cookie \'${name}\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);
        }
        return str;
    }
    /**
     * @private
     * @param {?} defaultOpts
     * @param {?=} providedOpts
     * @return {?}
     */
    mergeOptions(defaultOpts, providedOpts) {
        /** @type {?} */
        const newOpts = defaultOpts;
        if (providedOpts) {
            return newOpts.merge(new CookieOptions(providedOpts));
        }
        return newOpts;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return this.cookieReader(key);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    set(key, value, options) {
        this.cookieWriter(key, value, options);
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    remove(key, options) {
        this.cookieWriter(key, undefined, options);
    }
}
CookiesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CookiesService.ctorParameters = () => [
    { type: CookieOptions, decorators: [{ type: Optional }] }
];
/** @nocollapse */ CookiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookiesService_Factory() { return new CookiesService(i0.ɵɵinject(CookieOptions, 8)); }, token: CookiesService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CookiesService.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,