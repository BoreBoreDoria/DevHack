/**
 * @fileoverview added by tsickle
 * Generated from: lib/tools/recompose/composed.view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { omit } from '../utils';
/** @type {?} */
export const PARENT_CONTEXT_TOKEN = Symbol('[PARENT_CONTEXT_TOKEN]');
/**
 * @record
 */
export function ComposedContext() { }
if (false) {
    /* Skipping unnamed member:
    [ PARENT_CONTEXT_TOKEN ]: TemplateRef<ComposedContext>[];*/
    /** @type {?} */
    ComposedContext.prototype.children;
    /* Skipping unhandled member: [ key: string ]: any;*/
}
/**
 * @template C
 */
export class ComposedView {
    /**
     * @param {?} viewContainerRef
     * @param {?=} templateRefs
     */
    constructor(viewContainerRef, templateRefs) {
        this.viewContainerRef = viewContainerRef;
        this.templateRefs = templateRefs;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    createEmbeddedView(context) {
        const [templateRef, ...tail] = this.getParentTemplateRefs();
        this.context = (/** @type {?} */ ((/** @type {?} */ (context))));
        if (tail.length > 0) {
            this.elementRef = templateRef.elementRef;
            this.context[PARENT_CONTEXT_TOKEN] = tail;
            this.context.children = new ComposedView(this.viewContainerRef, tail);
        }
        this.viewRef =
            this.viewContainerRef.createEmbeddedView(templateRef, this.context);
        return (/** @type {?} */ ((/** @type {?} */ (this.viewRef))));
    }
    /**
     * @return {?}
     */
    markForCheck() {
        if (this.viewRef) {
            this.viewRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    detectChanges() {
        if (this.viewRef) {
            this.viewRef.detectChanges();
        }
    }
    /**
     * @param {?} update
     * @return {?}
     */
    updateContext(update) {
        /** @type {?} */
        const parent = this.getHydratedParentContext();
        update(this.context, parent);
        this.markForCheck();
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.viewRef && !this.viewRef.destroyed) {
            this.viewRef.destroy();
        }
        this.viewRef = null;
    }
    /**
     * @private
     * @return {?}
     */
    getParentTemplateRefs() {
        if (this.templateRefs) {
            return this.templateRefs;
        }
        /** @type {?} */
        const view = ((/** @type {?} */ (this.viewContainerRef.injector))).view;
        /** @type {?} */
        const context = findParentContext(view);
        return context[PARENT_CONTEXT_TOKEN];
    }
    /**
     * @private
     * @return {?}
     */
    getHydratedParentContext() {
        /** @type {?} */
        const view = ((/** @type {?} */ (this.viewContainerRef.injector))).view;
        return omit(findParentContext(view), [PARENT_CONTEXT_TOKEN, 'children']);
    }
}
if (false) {
    /** @type {?} */
    ComposedView.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.templateRefs;
}
/**
 * @param {?} view
 * @return {?}
 */
export function findParentContext(view) {
    /** @type {?} */
    const context = view.context;
    if (isParentContext(context)) {
        return context;
    }
    return findParentContext(view.parent);
}
/**
 * @param {?} context
 * @return {?}
 */
export function isParentContext(context) {
    return context && PARENT_CONTEXT_TOKEN in context;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zZWQudmlldy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL3Rvb2xzL3JlY29tcG9zZS9jb21wb3NlZC52aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFFaEMsTUFBTSxPQUFPLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQzs7OztBQUVwRSxxQ0FLQzs7Ozs7SUFIQyxtQ0FBd0M7Ozs7OztBQUsxQyxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFPdkIsWUFBb0IsZ0JBQWtDLEVBQVUsWUFBaUM7UUFBN0UscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtJQUFHLENBQUM7Ozs7O0lBRXJHLGtCQUFrQixDQUFDLE9BQVU7Y0FDckIsQ0FBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUUsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUU7UUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBQSxtQkFBQSxPQUFPLEVBQU8sRUFBbUIsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztZQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFFLG9CQUFvQixDQUFFLEdBQUcsSUFBSSxDQUFDO1lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxDQUFrQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDeEY7UUFDRCxJQUFJLENBQUMsT0FBTztZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXRFLE9BQU8sbUJBQUEsbUJBQUEsSUFBSSxDQUFDLE9BQU8sRUFBTyxFQUFzQixDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7O0lBRUQsYUFBYTtRQUNYLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzlCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsTUFBMEM7O2NBQ2hELE1BQU0sR0FBRyxJQUFJLENBQUMsd0JBQXdCLEVBQUU7UUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRU8scUJBQXFCO1FBQzNCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUI7O2NBRUssSUFBSSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsSUFBSTs7Y0FDbkQsT0FBTyxHQUFvQixpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDeEQsT0FBTyxPQUFPLENBQUUsb0JBQW9CLENBQUUsQ0FBQztJQUN6QyxDQUFDOzs7OztJQUVPLHdCQUF3Qjs7Y0FDeEIsSUFBSSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsSUFBSTtRQUN6RCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFFLG9CQUFvQixFQUFFLFVBQVUsQ0FBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztDQUNGOzs7SUE1REMsa0NBQXVCOzs7OztJQUV2QiwrQkFBaUM7Ozs7O0lBQ2pDLCtCQUFrRDs7Ozs7SUFFdEMsd0NBQTBDOzs7OztJQUFFLG9DQUF5Qzs7Ozs7O0FBeURuRyxNQUFNLFVBQVUsaUJBQWlCLENBQUMsSUFBUzs7VUFDbkMsT0FBTyxHQUFRLElBQUksQ0FBQyxPQUFPO0lBRWpDLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzVCLE9BQU8sT0FBTyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQVk7SUFDMUMsT0FBTyxPQUFPLElBQUksb0JBQW9CLElBQUksT0FBTyxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFbWJlZGRlZFZpZXdSZWYsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBvbWl0IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgUEFSRU5UX0NPTlRFWFRfVE9LRU4gPSBTeW1ib2woJ1tQQVJFTlRfQ09OVEVYVF9UT0tFTl0nKTtcblxuZXhwb3J0IGludGVyZmFjZSBDb21wb3NlZENvbnRleHQge1xuICBbIFBBUkVOVF9DT05URVhUX1RPS0VOIF06IFRlbXBsYXRlUmVmPENvbXBvc2VkQ29udGV4dD5bXTtcbiAgY2hpbGRyZW46IENvbXBvc2VkVmlldzxDb21wb3NlZENvbnRleHQ+O1xuXG4gIFsga2V5OiBzdHJpbmcgXTogYW55O1xufVxuXG5leHBvcnQgY2xhc3MgQ29tcG9zZWRWaWV3PEM+IHtcblxuICBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuXG4gIHByaXZhdGUgY29udGV4dDogQ29tcG9zZWRDb250ZXh0O1xuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxDb21wb3NlZENvbnRleHQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSB0ZW1wbGF0ZVJlZnM/OiBUZW1wbGF0ZVJlZjxhbnk+W10pIHt9XG5cbiAgY3JlYXRlRW1iZWRkZWRWaWV3KGNvbnRleHQ6IEMpOiBFbWJlZGRlZFZpZXdSZWY8Qz4ge1xuICAgIGNvbnN0IFsgdGVtcGxhdGVSZWYsIC4uLnRhaWwgXSA9IHRoaXMuZ2V0UGFyZW50VGVtcGxhdGVSZWZzKCk7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCBhcyBhbnkgYXMgQ29tcG9zZWRDb250ZXh0O1xuICAgIGlmICh0YWlsLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZWxlbWVudFJlZiA9IHRlbXBsYXRlUmVmLmVsZW1lbnRSZWY7XG4gICAgICB0aGlzLmNvbnRleHRbIFBBUkVOVF9DT05URVhUX1RPS0VOIF0gPSB0YWlsO1xuICAgICAgdGhpcy5jb250ZXh0LmNoaWxkcmVuID0gbmV3IENvbXBvc2VkVmlldzxDb21wb3NlZENvbnRleHQ+KHRoaXMudmlld0NvbnRhaW5lclJlZiwgdGFpbCk7XG4gICAgfVxuICAgIHRoaXMudmlld1JlZiA9XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRlbXBsYXRlUmVmLCB0aGlzLmNvbnRleHQpO1xuXG4gICAgcmV0dXJuIHRoaXMudmlld1JlZiBhcyBhbnkgYXMgRW1iZWRkZWRWaWV3UmVmPEM+O1xuICB9XG5cbiAgbWFya0ZvckNoZWNrKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBkZXRlY3RDaGFuZ2VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQ29udGV4dCh1cGRhdGU6IChjb250ZXh0OiBhbnksIHBhcmVudDogYW55KSA9PiBhbnkpIHtcbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldEh5ZHJhdGVkUGFyZW50Q29udGV4dCgpO1xuICAgIHVwZGF0ZSh0aGlzLmNvbnRleHQsIHBhcmVudCk7XG4gICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMudmlld1JlZiAmJiAhdGhpcy52aWV3UmVmLmRlc3Ryb3llZCkge1xuICAgICAgdGhpcy52aWV3UmVmLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UGFyZW50VGVtcGxhdGVSZWZzKCk6IFRlbXBsYXRlUmVmPENvbXBvc2VkQ29udGV4dD5bXSB7XG4gICAgaWYgKHRoaXMudGVtcGxhdGVSZWZzKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZVJlZnM7XG4gICAgfVxuXG4gICAgY29uc3QgdmlldyA9ICh0aGlzLnZpZXdDb250YWluZXJSZWYuaW5qZWN0b3IgYXMgYW55KS52aWV3O1xuICAgIGNvbnN0IGNvbnRleHQ6IENvbXBvc2VkQ29udGV4dCA9IGZpbmRQYXJlbnRDb250ZXh0KHZpZXcpO1xuICAgIHJldHVybiBjb250ZXh0WyBQQVJFTlRfQ09OVEVYVF9UT0tFTiBdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIeWRyYXRlZFBhcmVudENvbnRleHQoKTogYW55IHtcbiAgICBjb25zdCB2aWV3ID0gKHRoaXMudmlld0NvbnRhaW5lclJlZi5pbmplY3RvciBhcyBhbnkpLnZpZXc7XG4gICAgcmV0dXJuIG9taXQoZmluZFBhcmVudENvbnRleHQodmlldyksIFsgUEFSRU5UX0NPTlRFWFRfVE9LRU4sICdjaGlsZHJlbicgXSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYXJlbnRDb250ZXh0KHZpZXc6IGFueSk6IENvbXBvc2VkQ29udGV4dCB7XG4gIGNvbnN0IGNvbnRleHQ6IGFueSA9IHZpZXcuY29udGV4dDtcblxuICBpZiAoaXNQYXJlbnRDb250ZXh0KGNvbnRleHQpKSB7XG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cblxuICByZXR1cm4gZmluZFBhcmVudENvbnRleHQodmlldy5wYXJlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQYXJlbnRDb250ZXh0KGNvbnRleHQ6IGFueSk6IGNvbnRleHQgaXMgQ29tcG9zZWRDb250ZXh0IHtcbiAgcmV0dXJuIGNvbnRleHQgJiYgUEFSRU5UX0NPTlRFWFRfVE9LRU4gaW4gY29udGV4dDtcbn1cbiJdfQ==