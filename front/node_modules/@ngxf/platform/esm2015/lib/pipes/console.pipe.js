/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/console.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken, Pipe } from '@angular/core';
/**
 * @return {?}
 */
export function consoleFactory() {
    return console;
}
/** @type {?} */
export const CONSOLE = new InjectionToken('Console', {
    providedIn: 'root',
    factory: consoleFactory
});
/** @type {?} */
export const skipValueOperators = [
    'count',
    'markTimeline',
    'time',
    'timeEnd',
    'profile',
    'profileEnd',
    'timeline',
    'timelineEnd',
    'timeStamp',
    'group',
    'groupCollapsed'
];
export class ConsolePipe {
    /**
     * @param {?} console
     */
    constructor(console) {
        this.console = console;
    }
    /**
     * @template T
     * @param {?} message
     * @param {?=} logLevel
     * @param {...?} optionalParams
     * @return {?}
     */
    transform(message, logLevel = 'log', ...optionalParams) {
        /** @type {?} */
        let params;
        if (skipValueOperators.includes(logLevel)) {
            if (optionalParams.length > 0) {
                params = optionalParams;
            }
            else {
                params = [message];
            }
        }
        else {
            params = [message, ...optionalParams];
        }
        this.console[logLevel](...params);
        return message;
    }
}
ConsolePipe.decorators = [
    { type: Pipe, args: [{
                name: 'console'
            },] }
];
/** @nocollapse */
ConsolePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONSOLE,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConsolePipe.prototype.console;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvcGlwZXMvY29uc29sZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7OztBQUU1RSxNQUFNLFVBQVUsY0FBYztJQUM1QixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDOztBQUVELE1BQU0sT0FBTyxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQVUsU0FBUyxFQUFFO0lBQzVELFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxjQUFjO0NBQ3hCLENBQUM7O0FBRUYsTUFBTSxPQUFPLGtCQUFrQixHQUFHO0lBQ2hDLE9BQU87SUFDUCxjQUFjO0lBQ2QsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsWUFBWTtJQUNaLFVBQVU7SUFDVixhQUFhO0lBQ2IsV0FBVztJQUNYLE9BQU87SUFDUCxnQkFBZ0I7Q0FDakI7QUFLRCxNQUFNLE9BQU8sV0FBVzs7OztJQUV0QixZQUFxQyxPQUFZO1FBQVosWUFBTyxHQUFQLE9BQU8sQ0FBSztJQUFHLENBQUM7Ozs7Ozs7O0lBa0RyRCxTQUFTLENBQUksT0FBbUIsRUFBRSxXQUEwQixLQUFLLEVBQUUsR0FBRyxjQUFxQjs7WUFDckYsTUFBTTtRQUNWLElBQUksa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pDLElBQUksY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzdCLE1BQU0sR0FBRyxjQUFjLENBQUM7YUFDekI7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLENBQUUsT0FBTyxDQUFFLENBQUM7YUFDdEI7U0FDRjthQUFNO1lBQ0wsTUFBTSxHQUFHLENBQUUsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFFLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFFLFFBQVEsQ0FBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7O1lBckVGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsU0FBUzthQUNoQjs7Ozs0Q0FHYyxNQUFNLFNBQUMsT0FBTzs7Ozs7OztJQUFmLDhCQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnNvbGVGYWN0b3J5KCkge1xuICByZXR1cm4gY29uc29sZTtcbn1cblxuZXhwb3J0IGNvbnN0IENPTlNPTEUgPSBuZXcgSW5qZWN0aW9uVG9rZW48Q29uc29sZT4oJ0NvbnNvbGUnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogY29uc29sZUZhY3Rvcnlcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2tpcFZhbHVlT3BlcmF0b3JzID0gW1xuICAnY291bnQnLFxuICAnbWFya1RpbWVsaW5lJyxcbiAgJ3RpbWUnLFxuICAndGltZUVuZCcsXG4gICdwcm9maWxlJyxcbiAgJ3Byb2ZpbGVFbmQnLFxuICAndGltZWxpbmUnLFxuICAndGltZWxpbmVFbmQnLFxuICAndGltZVN0YW1wJyxcbiAgJ2dyb3VwJyxcbiAgJ2dyb3VwQ29sbGFwc2VkJ1xuXTtcblxuQFBpcGUoe1xuICBuYW1lOiAnY29uc29sZSdcbn0pXG5leHBvcnQgY2xhc3MgQ29uc29sZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KENPTlNPTEUpIHByaXZhdGUgY29uc29sZTogYW55KSB7fVxuXG4gIC8vIGluZm8obWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXMpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4obWVzc2FnZTogVCwgbG9nTGV2ZWw6ICdpbmZvJywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gbG9nKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KG1lc3NhZ2U6IFQsIGxvZ0xldmVsOiAnbG9nJywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gd2FybihtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtcyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPihtZXNzYWdlOiBULCBsb2dMZXZlbDogJ3dhcm4nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyBleGNlcHRpb24obWVzc2FnZT86IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXMpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4obWVzc2FnZTogVCwgbG9nTGV2ZWw6ICdleGNlcHRpb24nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyBlcnJvcihtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtcyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPihtZXNzYWdlOiBULCBsb2dMZXZlbDogJ2Vycm9yJywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gZGVidWcobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KG1lc3NhZ2U6IFQsIGxvZ0xldmVsOiAnZGVidWcnLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyB0cmFjZShtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4obWVzc2FnZTogVCwgbG9nTGV2ZWw6ICd0cmFjZScsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IFQ7XG4gIC8vIGRpcihvYmo6IGFueSwgb3B0aW9ucz86IE5vZGVKUy5JbnNwZWN0T3B0aW9ucyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPihvYmo6IFQsIGxvZ0xldmVsOiAnZGlyJy8qLCBvcHRpb25zPzogTm9kZUpTLkluc3BlY3RPcHRpb25zKi8pOiBUO1xuICAvLyBkaXJ4bWwodmFsdWU6IGFueSk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICdkaXJ4bWwnKTogVDtcbiAgLy8gdGFibGUoLi4udGFidWxhckRhdGEpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAndGFibGUnKTogVDtcbiAgLy8gYXNzZXJ0KHZhbHVlOiBhbnksIG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ3RyYWNlJywgbWVzc2FnZTogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyBjb3VudChsYWJlbD86IHN0cmluZyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICdjb3VudCcsIGxhYmVsPzogc3RyaW5nKTogVDtcbiAgLy8gbWFya1RpbWVsaW5lKGxhYmVsPzogc3RyaW5nKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ21hcmtUaW1lbGluZScsIGxhYmVsPzogc3RyaW5nKTogVDtcbiAgLy8gdGltZShsYWJlbDogc3RyaW5nKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ3RpbWUnLCBsYWJlbD86IHN0cmluZyk6IFQ7XG4gIC8vIHRpbWVFbmQobGFiZWw6IHN0cmluZyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICd0aW1lRW5kJywgbGFiZWw/OiBzdHJpbmcpOiBUO1xuICAvLyBwcm9maWxlKHJlcG9ydE5hbWU/OiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAncHJvZmlsZScsIHJlcG9ydE5hbWU/OiBzdHJpbmcpOiBUO1xuICAvLyBwcm9maWxlRW5kKHJlcG9ydE5hbWU/OiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAncHJvZmlsZUVuZCcsIHJlcG9ydE5hbWU/OiBzdHJpbmcpOiBUO1xuICAvLyB0aW1lbGluZShsYWJlbD86IHN0cmluZyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICd0aW1lbGluZScsIGxhYmVsPzogc3RyaW5nKTogVDtcbiAgLy8gdGltZWxpbmVFbmQobGFiZWw/OiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAndGltZWxpbmVFbmQnLCBsYWJlbD86IHN0cmluZyk6IFQ7XG4gIC8vIHRpbWVTdGFtcChsYWJlbD86IHN0cmluZyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICd0aW1lU3RhbXAnLCBsYWJlbD86IHN0cmluZyk6IFQ7XG4gIC8vIGdyb3VwKGdyb3VwVGl0bGU/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICdncm91cCcsIGdyb3VwVGl0bGU/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IFQ7XG4gIC8vIGdyb3VwQ29sbGFwc2VkKGdyb3VwVGl0bGU/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICdncm91cENvbGxhcHNlZCcsIGdyb3VwVGl0bGU/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IFQ7XG4gIC8vIGdyb3VwRW5kKCk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICdncm91cEVuZCcpOiBUO1xuICAvLyBjbGVhcigpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAnY2xlYXInKTogVDtcbiAgdHJhbnNmb3JtPFQ+KG1lc3NhZ2U6IHN0cmluZyB8IFQsIGxvZ0xldmVsOiBrZXlvZiBDb25zb2xlID0gJ2xvZycsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHN0cmluZyB8IFQge1xuICAgIGxldCBwYXJhbXM7XG4gICAgaWYgKHNraXBWYWx1ZU9wZXJhdG9ycy5pbmNsdWRlcyhsb2dMZXZlbCkpIHtcbiAgICAgIGlmIChvcHRpb25hbFBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhcmFtcyA9IG9wdGlvbmFsUGFyYW1zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zID0gWyBtZXNzYWdlIF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcyA9IFsgbWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMgXTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnNvbGVbIGxvZ0xldmVsIF0oLi4ucGFyYW1zKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxuXG59XG4iXX0=