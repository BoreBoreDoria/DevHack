{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ngxf/platform/lib/directives/async.directive.ts","ng://@ngxf/platform/lib/tools/utils/index.ts","ng://@ngxf/platform/lib/tools/recompose/composed.view.ts","ng://@ngxf/platform/lib/directives/compose.directive.ts","ng://@ngxf/platform/lib/tools/cookies.tools.ts","ng://@ngxf/platform/lib/directives/cookies.directive.ts","ng://@ngxf/platform/lib/directives/http.directive.ts","ng://@ngxf/platform/lib/directives/init.directive.ts","ng://@ngxf/platform/lib/directives/is-dev-mode.directive.ts","ng://@ngxf/platform/lib/directives/keep-alive.directive.ts","ng://@ngxf/platform/lib/directives/lazy.directive.ts","ng://@ngxf/platform/lib/directives/nest.directive.ts","ng://@ngxf/platform/lib/directives/rename-prop.directive.ts","ng://@ngxf/platform/lib/directives/repeat.directive.ts","ng://@ngxf/platform/lib/directives/return.directive.ts","ng://@ngxf/platform/lib/directives/route.directive.ts","ng://@ngxf/platform/lib/directives/set-props.directive.ts","ng://@ngxf/platform/lib/directives/timeout.directive.ts","ng://@ngxf/platform/lib/directives/track-by-key.directive.ts","ng://@ngxf/platform/lib/directives/use-effect.directive.ts","ng://@ngxf/platform/lib/directives/use-reducer.directive.ts","ng://@ngxf/platform/lib/directives/use-state.directive.ts","ng://@ngxf/platform/lib/tools/virtual.handler.ts","ng://@ngxf/platform/lib/directives/virtual.directive.ts","ng://@ngxf/platform/lib/pipes/call.pipe.ts","ng://@ngxf/platform/lib/pipes/console.pipe.ts","ng://@ngxf/platform/lib/ivy-hooks/use-effect.hook.ts","ng://@ngxf/platform/lib/platform.module.ts","ng://@ngxf/platform/lib/ivy-hooks/use-reducer.hook.ts","ng://@ngxf/platform/lib/ivy-hooks/use-state.hook.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","r","e","ar","push","error","__spread","concat","ObservableStrategy","createSubscription","async","complete","subscribe","dispose","subscription","unsubscribe","PromiseStrategy","promise","then","finally","observableStrategy","promiseStrategy","AsyncDirective","templateRef","viewContainer","cd","EventEmitter","context","$implicit","viewRef","createEmbeddedView","componentInstance","ngOnChanges","changes","onAsyncDidChanged","previousValue","asyncFrom","ngOnDestroy","clear","destroy","current","previous","_this","strategy","isObservable","Error","resolveStrategy","onNext","onError","onComplete","emit","isFunction","asyncNext","markForCheck","asyncError","asyncComplete","Directive","args","selector","TemplateRef","ViewContainerRef","ChangeDetectorRef","Input","Output","omit","obj","fields","shallowCopy","PARENT_CONTEXT_TOKEN","ComposedView","viewContainerRef","templateRefs","_a","getParentTemplateRefs","tail","slice","elementRef","children","detectChanges","updateContext","update","parent","getHydratedParentContext","destroyed","findParentContext","view","isParentContext","ComposeDirective","compose","onTemplateRefsDidChanged","composeOf","create","createComposeFn","CookieOptions","_b","path","domain","expires","secure","isPresent","merge","options","_super","BaseCookieOptions","baseHref","__","constructor","__extends","Injectable","providedIn","Optional","type","Inject","APP_BASE_HREF","CookiesService","defaultOptions","defineProperty","document","cookie","val","cookieReader","key","currentCookieString","cookieString","split","reduce","cookies","decodeURIComponent","cookieWriter","name","buildCookieString","defaultOpts","opts","mergeOptions","Date","str","encodeURIComponent","toUTCString","cookieLength","console","log","providedOpts","newOpts","get","set","remove","undefined","decorators","CookiesStrategies","COOKIES_CONFIG","require","CookiesDirective","cookiesService","data","findStrategy","execute","find","some","field","every","map","action","_i","cookieOptions","getCookie","setCookie","removeCookie","HTTP_CONFIG","HttpDirective","http","params","request","method","pipe","catchError","of","closed","HttpClient","InitDirective","init","setValue","DevModeService","isDevMode","IsDevModeDirective","devModeService","ViewRefAttachable","flag","attachToViewContainerRef","attached","insert","detachFromViewContainerRef","detached","detach","indexOf","KeepAliveConfig","limit","KeepAliveGC","config","collect","viewRefs","Number","MAX_SAFE_INTEGER","from","entries","_c","_d","templateDef","viewRefAttachable","size","delete","KeepAliveViewRefs","gc","Map","add","getTemplateDef","has","reattach","forEach","fn","KeepAliveManager","attach","patchClear","patched","clear_1","getPrototypeOf","viewRefs_1","v","state","KeepAliveDirective","manager","LAZY_COMPONENT_TOKEN","InjectionToken","LazyDirective","loader","injector","activate","deactivate","embeddedViewRef","componentRef","instance","rootNodes","onLazyDidChanged","lazy","lazyLoadChildren","ngModuleRef","loadAndRender","load","tap","ngModuleFactory","component","componentFactory","componentFactoryResolver","resolveComponentFactory","createComponent","projectableNodes","finalize","onActivate","pathProduction","join","lazyActivate","onDeactivate","lazyDeactivate","c","NgModuleFactoryLoader","Injector","NestDirective","nest","onTemplatesDidChanged","nestOf","RenamePropDirective","onRenameDidChanged","renameProp","renamePropTo","to","fromPrevious","toPrevious","composedView","rename","RepeatContext","RepeatDirective","count","isNumber","repeat","repeatOf","Math","max","onRepeatChanged","index","ReturnDirective","return","ASYNC_FIELDS","RouteDirective","route","snapshot","url","queryParams","fragment","outlet","routeConfig","root","firstChild","pathFromRoot","paramMap","convertToParamMap","queryParamMap","subscriptions","attachFields","asyncFields","asyncAttach","distinctUntilChanged","ActivatedRoute","SetPropsDirective","setProps","onPropsDidChanged","props","TimeoutDirective","milliseconds","timeoutId","setTimeout","clearTimeout","NgForTrackByKeyDirective","ngFor","key_1","ngForTrackByKey","ngForTrackBy","item","ngDoCheck","NgForOf","Host","UseEffectDirective","vcr","useEffect","useEffectOn","isArray","current_1","currentValue","onDestroyCallback","UseReducerDirective","dispatch","reducer","useReducerInit","useReducerWith","useReducerAnd","UseStateDirective","useStateDefault","VirtualHandler","elementLink","observer","IntersectionObserver","entry","isIntersecting","attachCD","detachCD","register","element","observe","unregister","unobserve","VirtualDirective","handler","nativeElement","ElementRef","CallPipe","transform","param","Pipe","consoleFactory","CONSOLE","factory","skipValueOperators","ConsolePipe","message","logLevel","optionalParams","includes","noop","DIRECTIVES","PIPES","NgxfModule","forLazy","ngModule","providers","provide","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","multi","forKeepAlive","keepAliveConfig","NgModule","imports","declarations","exports","effect","affectedKeys","destroyEffectsMap","WeakMap","destroyEffect","def","originalOnInit","ngComponentDef","onInit","originalOnChanges","onChanges","affectedKey","isChanged","originalOnDestroy","onDestroy","initialValue","stateKey","dispatchKey","originalFactory","cmp","setStateKey"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\nimport { isObservable, Observable, SubscriptionLike } from 'rxjs';\n\ntype ObservableOrPromise<T> = Observable<T> | Promise<T>;\n\ninterface AsyncContext {\n  $implicit: any;\n}\n\ninterface SubscriptionStrategy {\n  createSubscription(async: ObservableOrPromise<any>, next: any, error: any, complete: any): SubscriptionLike | Promise<any>;\n\n  dispose(subscription: SubscriptionLike | Promise<any>): void;\n}\n\nclass ObservableStrategy implements SubscriptionStrategy {\n  createSubscription(async: Observable<any>, next: any, error: any, complete: any): SubscriptionLike {\n    return async.subscribe(next, error, complete);\n  }\n\n  dispose(subscription: SubscriptionLike): void {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, next: any, error: any, complete: any): Promise<any> {\n    const promise = async.then(next, error);\n\n    if ('finally' in promise) {\n      return (promise as any).finally(complete);\n    }\n\n    return promise;\n  }\n\n  dispose(subscription: Promise<any>): void {}\n}\n\nconst observableStrategy = new ObservableStrategy();\nconst promiseStrategy = new PromiseStrategy();\n\nfunction resolveStrategy(async: ObservableOrPromise<any>): SubscriptionStrategy {\n  if (isObservable(async)) {\n    return observableStrategy;\n  }\n\n  if (isPromise(async)) {\n    return promiseStrategy;\n  }\n\n  throw new Error(`InvalidDirectiveArgument: 'async' for directive 'async'`);\n}\n\n@Directive({ selector: '[async]' })\nexport class AsyncDirective implements OnChanges, OnDestroy {\n\n  @Input() async: ObservableOrPromise<any>;\n  @Input() asyncFrom: ObservableOrPromise<any>;\n  @Input() asyncNext: (value: any) => void;\n  @Input() asyncError: (error: any) => void;\n  @Input() asyncComplete: () => void;\n\n  @Output() next: EventEmitter<any> = new EventEmitter<any>();\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  @Output() complete: EventEmitter<any> = new EventEmitter<any>();\n\n  private context: AsyncContext = { $implicit: null };\n  private viewRef: EmbeddedViewRef<AsyncContext> =\n    this.viewContainer.createEmbeddedView(this.templateRef, this.context);\n  private componentInstance: any;\n\n  private strategy: SubscriptionStrategy;\n  private subscription: SubscriptionLike | Promise<any>;\n\n  constructor(\n    private templateRef: TemplateRef<AsyncContext>,\n    private viewContainer: ViewContainerRef,\n    private cd: ChangeDetectorRef\n  ) {\n    this.componentInstance = (cd as EmbeddedViewRef<any>).context;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('async' in changes) {\n      this.onAsyncDidChanged(this.async, changes.async.previousValue);\n    }\n    if ('asyncFrom' in changes) {\n      this.onAsyncDidChanged(this.asyncFrom, changes.asyncFrom.previousValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this.viewContainer.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  private onAsyncDidChanged(current: ObservableOrPromise<any>, previous: ObservableOrPromise<any>): void {\n    if (!this.subscription) {\n      return current && this.subscribe(current);\n    }\n\n    if (current !== previous) {\n      this.dispose();\n      return this.onAsyncDidChanged(current, null);\n    }\n  }\n\n  private subscribe(async: ObservableOrPromise<any>) {\n    this.strategy = resolveStrategy(async);\n    this.subscription = this.strategy.createSubscription(\n      async,\n      (value: any) => this.onNext(value),\n      (error: any) => this.onError(error),\n      () => this.onComplete()\n    );\n  }\n\n  private onNext(value: any): void {\n    this.context.$implicit = value;\n    this.next.emit(value);\n    if (isFunction(this.asyncNext)) {\n      this.asyncNext.call(this.componentInstance, value);\n    }\n    this.viewRef.markForCheck();\n  }\n\n  private onError(error: any): void {\n    this.error.emit(error);\n    if (isFunction(this.asyncError)) {\n      this.asyncError.call(this.componentInstance, error);\n    }\n  }\n\n  private onComplete(): void {\n    this.complete.next();\n    if (isFunction(this.asyncComplete)) {\n      this.asyncComplete.call(this.componentInstance);\n    }\n  }\n\n  private dispose(): void {\n    if (this.strategy) {\n      this.strategy.dispose(this.subscription);\n      this.subscription = null;\n      this.strategy = null;\n    }\n  }\n\n}\n\nfunction isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\nfunction isPromise<T>(value: any): value is Promise<T> {\n  return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n","export function omit(obj, fields) {\n  const shallowCopy = {\n    ...obj,\n  };\n  for (let i = 0; i < fields.length; i++) {\n    const key = fields[i];\n    delete shallowCopy[key];\n  }\n  return shallowCopy;\n}\n","import { ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { omit } from '../utils';\n\nexport const PARENT_CONTEXT_TOKEN = Symbol('[PARENT_CONTEXT_TOKEN]');\n\nexport interface ComposedContext {\n  [ PARENT_CONTEXT_TOKEN ]: TemplateRef<ComposedContext>[];\n  children: ComposedView<ComposedContext>;\n\n  [ key: string ]: any;\n}\n\nexport class ComposedView<C> {\n\n  elementRef: ElementRef;\n\n  private context: ComposedContext;\n  private viewRef: EmbeddedViewRef<ComposedContext>;\n\n  constructor(private viewContainerRef: ViewContainerRef, private templateRefs?: TemplateRef<any>[]) {}\n\n  createEmbeddedView(context: C): EmbeddedViewRef<C> {\n    const [ templateRef, ...tail ] = this.getParentTemplateRefs();\n    this.context = context as any as ComposedContext;\n    if (tail.length > 0) {\n      this.elementRef = templateRef.elementRef;\n      this.context[ PARENT_CONTEXT_TOKEN ] = tail;\n      this.context.children = new ComposedView<ComposedContext>(this.viewContainerRef, tail);\n    }\n    this.viewRef =\n      this.viewContainerRef.createEmbeddedView(templateRef, this.context);\n\n    return this.viewRef as any as EmbeddedViewRef<C>;\n  }\n\n  markForCheck(): void {\n    if (this.viewRef) {\n      this.viewRef.markForCheck();\n    }\n  }\n\n  detectChanges(): void {\n    if (this.viewRef) {\n      this.viewRef.detectChanges();\n    }\n  }\n\n  updateContext(update: (context: any, parent: any) => any) {\n    const parent = this.getHydratedParentContext();\n    update(this.context, parent);\n    this.markForCheck();\n  }\n\n  destroy() {\n    if (this.viewRef && !this.viewRef.destroyed) {\n      this.viewRef.destroy();\n    }\n    this.viewRef = null;\n  }\n\n  private getParentTemplateRefs(): TemplateRef<ComposedContext>[] {\n    if (this.templateRefs) {\n      return this.templateRefs;\n    }\n\n    const view = (this.viewContainerRef.injector as any).view;\n    const context: ComposedContext = findParentContext(view);\n    return context[ PARENT_CONTEXT_TOKEN ];\n  }\n\n  private getHydratedParentContext(): any {\n    const view = (this.viewContainerRef.injector as any).view;\n    return omit(findParentContext(view), [ PARENT_CONTEXT_TOKEN, 'children' ]);\n  }\n}\n\nexport function findParentContext(view: any): ComposedContext {\n  const context: any = view.context;\n\n  if (isParentContext(context)) {\n    return context;\n  }\n\n  return findParentContext(view.parent);\n}\n\nexport function isParentContext(context: any): context is ComposedContext {\n  return context && PARENT_CONTEXT_TOKEN in context;\n}\n","import { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ComposedView } from '../tools/recompose/composed.view';\n\ninterface ComposeContext {\n  $implicit: ComposeFn<any>;\n  compose: ComposeFn<any>;\n}\n\ntype ComposeFn<T> = (templateRef: TemplateRef<T> | ComposedView<T>) => ComposedView<T>;\n\n@Directive({ selector: '[compose]' })\nexport class ComposeDirective implements OnChanges, OnDestroy {\n\n  @Input() compose: TemplateRef<any>[];\n  @Input() composeOf: TemplateRef<any>[];\n\n  private context: ComposeContext = { $implicit: null, compose: null };\n  private viewRef: EmbeddedViewRef<ComposeContext>;\n\n  constructor(\n    private templateRef: TemplateRef<ComposeContext>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('compose' in changes) {\n      this.onTemplateRefsDidChanged(this.compose, changes.compose.previousValue);\n    }\n\n    if ('composeOf' in changes) {\n      this.onTemplateRefsDidChanged(this.composeOf, changes.composeOf.previousValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private onTemplateRefsDidChanged(current: TemplateRef<any>[], previous: TemplateRef<any>[]): void {\n    if (!this.viewRef) {\n      return this.create(current);\n    }\n\n    if (this.viewRef.destroyed || current !== previous) {\n      this.destroy();\n      return this.onTemplateRefsDidChanged(current, null);\n    }\n  }\n\n  private create(templateRefs) {\n    this.context.compose = this.context.$implicit = this.createComposeFn(templateRefs);\n    this.viewRef =\n      this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n  }\n\n  private destroy() {\n    if (this.viewRef && !this.viewRef.destroyed) {\n      this.viewRef.destroy();\n    }\n\n    this.viewRef = null;\n  }\n\n  private createComposeFn(templateRefs: TemplateRef<any>[]): ComposeFn<any> {\n    return (templateRef: TemplateRef<any> | ComposedView<any>): ComposedView<any> => {\n      return new ComposedView<any>(\n        this.viewContainerRef,\n        [ ...templateRefs, templateRef ]\n      );\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { APP_BASE_HREF } from '@angular/common';\r\n\r\nexport interface CookieOptionsArgs {\r\n    path?: string;\r\n    domain?: string;\r\n    expires?: string | Date;\r\n    secure?: boolean;\r\n}\r\n\r\nexport interface ICookies {\r\n    [key: string]: string[];\r\n}\r\n\r\nexport interface ICookieService {\r\n    get(key: string): string;\r\n    set(key: string, value: string, options?: CookieOptionsArgs): void;\r\n    remove(key: string, options?: CookieOptionsArgs): void;\r\n}\r\n\r\nexport class CookieOptions {\r\n\r\n    public path: string;\r\n    public domain: string;\r\n    public expires: string | Date;\r\n    public secure: boolean;\r\n\r\n    constructor({ path, domain, expires, secure }: CookieOptionsArgs = {}) {\r\n        this.path = this.isPresent(path) ? path : null;\r\n        this.domain = this.isPresent(domain) ? domain : null;\r\n        this.expires = this.isPresent(expires) ? expires : null;\r\n        this.secure = this.isPresent(secure) ? secure : false;\r\n    }\r\n\r\n    public merge(options?: CookieOptionsArgs): CookieOptions {\r\n        return new CookieOptions(<CookieOptionsArgs>{\r\n            path: this.isPresent(options) && this.isPresent(options.path) ? options.path : this.path,\r\n            domain: this.isPresent(options) && this.isPresent(options.domain) ? options.domain : this.domain,\r\n            expires: this.isPresent(options) && this.isPresent(options.expires) ? options.expires : this.expires,\r\n            secure: this.isPresent(options) && this.isPresent(options.secure) ? options.secure : this.secure,\r\n        });\r\n    }\r\n\r\n    private isPresent(obj: any): boolean {\r\n        return obj !== undefined && obj !== null;\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class BaseCookieOptions extends CookieOptions {\r\n    constructor(@Optional() @Inject(APP_BASE_HREF) private baseHref: string) {\r\n        super({ path: baseHref || '/' });\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CookiesService implements ICookieService {\r\n\r\n    constructor(\r\n        @Optional() private defaultOptions?: CookieOptions\r\n    ) {\r\n    }\r\n\r\n    protected get cookieString(): string {\r\n        return document.cookie || '';\r\n    }\r\n\r\n    protected set cookieString(val: string) {\r\n        document.cookie = val;\r\n    }\r\n\r\n    private cookieReader(key: string): string {\r\n        const currentCookieString = this.cookieString;\r\n\r\n        if (currentCookieString) {\r\n            const cookieArray = currentCookieString.split('; ');\r\n\r\n            return cookieArray.reduce((cookies: ICookies, current: string): object => {\r\n                const cookie = current.split('=');\r\n\r\n                return { ...cookies, [cookie[0]]: decodeURIComponent(cookie[1]) };\r\n            }, {})[key];\r\n        }\r\n    }\r\n\r\n    private cookieWriter(name: string, value: string, options?: CookieOptionsArgs) {\r\n        this.cookieString = this.buildCookieString(name, value, options);\r\n    }\r\n\r\n    private buildCookieString(name: string, value: string, options?: CookieOptionsArgs): string {\r\n        const defaultOpts = this.defaultOptions || new CookieOptions(<CookieOptionsArgs>{ path: '/' });\r\n        const opts: CookieOptions = this.mergeOptions(defaultOpts, options);\r\n\r\n        let expires = opts.expires;\r\n\r\n        if (!value) {\r\n            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\r\n            value = '';\r\n        }\r\n\r\n        if (typeof expires === 'string') {\r\n            expires = new Date(expires);\r\n        }\r\n\r\n        let str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n\r\n        str += opts.path ? `;path=${opts.path}` : '';\r\n        str += opts.domain ? `;domain=${opts.domain}` : '';\r\n        str += expires ? `;expires=${expires.toUTCString()}` : '';\r\n        str += opts.secure ? ';secure' : '';\r\n\r\n        const cookieLength = str.length + 1;\r\n\r\n        if (cookieLength > 4096) {\r\n            console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    private mergeOptions(defaultOpts: CookieOptions, providedOpts?: CookieOptionsArgs): CookieOptions {\r\n        const newOpts = defaultOpts;\r\n\r\n        if (providedOpts) {\r\n            return newOpts.merge(new CookieOptions(providedOpts));\r\n        }\r\n\r\n        return newOpts;\r\n    }\r\n\r\n    public get(key: string): string {\r\n        return this.cookieReader(key);\r\n    }\r\n\r\n    public set(key: string, value: string, options?: CookieOptionsArgs): void {\r\n        this.cookieWriter(key, value, options);\r\n    }\r\n\r\n    public remove(key: string, options?: CookieOptionsArgs): void {\r\n        this.cookieWriter(key, undefined, options);\r\n    }\r\n}\r\n","import { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { CookieOptionsArgs, CookiesService } from '../tools/cookies.tools';\n\nenum CookiesStrategies {\n  GET = 'get',\n  SET = 'set',\n  REMOVE = 'remove'\n}\n\ninterface CookiesContext {\n  $implicit: any;\n  data: any;\n}\n\ninterface CookiesStrategy {\n  type: CookiesStrategies;\n  changes: string[];\n  require: string[];\n}\n\nconst COOKIES_CONFIG: CookiesStrategy[] = [\n  {\n    type: CookiesStrategies.GET,\n    changes: [ 'cookiesGet' ],\n    require: [ 'cookiesGet' ]\n  },\n  {\n    type: CookiesStrategies.SET,\n    changes: [\n      'cookiesSet',\n      'cookiesValue',\n      'cookiesPath',\n      'cookiesDomain',\n      'cookiesExpires',\n      'cookiesSecure'\n    ],\n    require: [ 'cookiesSet' ]\n  },\n  {\n    type: CookiesStrategies.REMOVE,\n    changes: [ 'cookiesRemove', 'cookiesPath', 'cookiesDomain' ],\n    require: [ 'cookiesRemove' ]\n  }\n];\n\n@Directive({ selector: '[cookies]' })\nexport class CookiesDirective implements OnChanges, OnDestroy {\n\n  @Input() private cookiesGet: string;\n  @Input() private cookiesSet: string;\n  @Input() private cookiesRemove: string;\n  @Input() private cookiesValue: any;\n\n  @Input() private cookiesPath: string;\n  @Input() private cookiesDomain: string;\n  @Input() private cookiesExpires: string | Date;\n  @Input() private cookiesSecure: boolean;\n\n  private context: CookiesContext = {\n    $implicit: null,\n    get data() { return this.$implicit; }\n  };\n\n  private viewRef: EmbeddedViewRef<CookiesContext> =\n    this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n\n  constructor(\n    private templateRef: TemplateRef<CookiesContext>,\n    private viewContainerRef: ViewContainerRef,\n    private cookiesService: CookiesService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const strategy: CookiesStrategy = this.findStrategy(changes);\n    if (strategy) {\n      this.execute(strategy);\n    }\n  }\n\n  ngOnDestroy() {\n    this.viewContainerRef.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  private findStrategy(changes: SimpleChanges): CookiesStrategy {\n    return COOKIES_CONFIG.find((strategy) => {\n      return strategy.changes.some(field => !!changes[ field ])\n        && strategy.require.every(field => !!this[ field ]);\n    });\n  }\n\n  private execute(strategy: CookiesStrategy): void {\n    const options = strategy.changes.map(field => this[ field ]);\n\n    this.action(strategy.type, ...options);\n  }\n\n  private action(type: string, ...options: string[]): void {\n    const name = options[ 0 ];\n    const value = options[ 1 ];\n    const cookieOptions: CookieOptionsArgs = {\n      path: options[ 2 ],\n      domain: options[ 3 ],\n      expires: options[ 4 ],\n      secure: !!options[ 5 ]\n    };\n\n    if (CookiesStrategies.GET === type) {\n      this.context.$implicit = this.getCookie(name);\n    }\n\n    if (CookiesStrategies.SET === type) {\n      this.setCookie(name, value, cookieOptions);\n      this.context.$implicit = value;\n    }\n\n    if (CookiesStrategies.REMOVE === type) {\n      this.removeCookie(name, cookieOptions);\n      this.context.$implicit = null;\n    }\n\n    this.viewRef.markForCheck();\n  }\n\n  private getCookie(name: string): string {\n    return this.cookiesService.get(name);\n  }\n\n  private setCookie(name: string, value: string, options?: CookieOptionsArgs): void {\n    this.cookiesService.set(name, value, options);\n  }\n\n  private removeCookie(name: string, options?: CookieOptionsArgs): void {\n    this.cookiesService.remove(name, options);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { of, Subscription } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nenum HttpStrategies {\n  DELETE = 'delete',\n  GET = 'get',\n  HEAD = 'head',\n  JSONP = 'jsonp',\n  OPTIONS = 'options',\n  PATCH = 'patch',\n  POST = 'post',\n  PUT = 'put'\n}\n\ninterface HttpContext {\n  $implicit: any;\n  data: any;\n}\n\ninterface HttpStrategy {\n  type: HttpStrategies;\n  changes: string[];\n  require: string[];\n}\n\nconst HTTP_CONFIG: HttpStrategy[] = [\n  {\n    type: HttpStrategies.DELETE,\n    changes: [ 'httpDelete', 'httpWith' ],\n    require: [ 'httpDelete' ]\n  },\n  {\n    type: HttpStrategies.GET,\n    changes: [ 'httpGet', 'httpWith' ],\n    require: [ 'httpGet' ]\n  },\n  {\n    type: HttpStrategies.HEAD,\n    changes: [ 'httpHead', 'httpWith' ],\n    require: [ 'httpHead' ]\n  },\n  {\n    type: HttpStrategies.JSONP,\n    changes: [ 'httpJsonp', 'httpCallback' ],\n    require: [ 'httpJsonp', 'httpCallback' ]\n  },\n  {\n    type: HttpStrategies.OPTIONS,\n    changes: [ 'httpOptions', 'httpWith' ],\n    require: [ 'httpOptions' ]\n  },\n  {\n    type: HttpStrategies.PATCH,\n    changes: [ 'httpPatch', 'httpSend', 'httpWith' ],\n    require: [ 'httpPatch' ]\n  },\n  {\n    type: HttpStrategies.POST,\n    changes: [ 'httpPost', 'httpSend', 'httpWith' ],\n    require: [ 'httpPost' ]\n  },\n  {\n    type: HttpStrategies.PUT,\n    changes: [ 'httpPut', 'httpSend', 'httpWith' ],\n    require: [ 'httpPut' ]\n  }\n];\n\n@Directive({ selector: '[http]' })\nexport class HttpDirective implements OnChanges, OnDestroy {\n\n  @Input() httpDelete: string;\n  @Input() httpGet: string;\n  @Input() httpHead: string;\n  @Input() httpJsonp: string;\n  @Input() httpOptions: string;\n  @Input() httpPatch: string;\n  @Input() httpPost: string;\n  @Input() httpPut: string;\n\n  @Input() httpSend: any;\n  @Input() httpCallback: string;\n  @Input() httpWith: any;\n\n  private context: HttpContext = {\n    $implicit: null,\n    get data() { return this.$implicit; }\n  };\n\n  private viewRef: EmbeddedViewRef<HttpContext> =\n    this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n\n  private subscription: Subscription;\n\n  constructor(\n    private http: HttpClient,\n    private templateRef: TemplateRef<HttpContext>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const strategy: HttpStrategy = this.findStrategy(changes);\n    if (strategy) {\n      this.execute(strategy);\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this.viewContainerRef.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  private findStrategy(changes: SimpleChanges): HttpStrategy {\n    return HTTP_CONFIG.find((strategy) => {\n      return strategy.changes.some(field => !!changes[ field ])\n        && strategy.require.every(field => !!this[ field ]);\n    });\n  }\n\n  private execute(strategy: HttpStrategy) {\n    const params = strategy.changes.map(field => this[ field ]);\n\n    this.request(strategy.type, ...params);\n  }\n\n  private request(method, ...params) {\n    this.dispose();\n    this.subscription = this.http[ method ](...params)\n      .pipe(catchError((e) => {\n        console.error(e);\n        return of(null);\n      }))\n      .subscribe((data) => {\n        this.context.$implicit = data;\n        this.viewRef.markForCheck();\n      });\n  }\n\n  private dispose() {\n    if (this.subscription && !this.subscription.closed) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n  }\n}\n","import { Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\n\ninterface InitContext<T> {\n  $implicit: T;\n  init: T;\n}\n\n@Directive({ selector: '[init]' })\nexport class InitDirective<T> implements OnDestroy {\n\n  @Input() set init(value: T) {\n    this.setValue(value);\n  }\n\n  @Input() set initOf(value: T) {\n    this.setValue(value);\n  }\n\n  private context: InitContext<T> = { $implicit: null, init: null };\n  private viewRef: EmbeddedViewRef<InitContext<T>> =\n    this.viewContainer.createEmbeddedView(this.templateRef, this.context);\n\n  constructor(\n    private templateRef: TemplateRef<InitContext<T>>,\n    private viewContainer: ViewContainerRef\n  ) {}\n\n  ngOnDestroy() {\n    this.viewContainer.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  private setValue(value: T): void {\n    this.context.$implicit = this.context.init = value;\n    if (this.viewRef) {\n      this.viewRef.markForCheck();\n    }\n  }\n\n}\n","import { Directive, EmbeddedViewRef, OnDestroy, TemplateRef, ViewContainerRef, isDevMode, Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class DevModeService {\n  constructor() {}\n\n  isDevMode() {\n    return isDevMode();\n  }\n}\n\n@Directive({\n  selector: '[isDevMode]'\n})\nexport class IsDevModeDirective implements OnDestroy {\n  private viewRef: EmbeddedViewRef<null>;\n\n  constructor(\n    devModeService: DevModeService,\n    viewContainerRef: ViewContainerRef,\n    templateRef: TemplateRef<null>\n  ) {\n    if (devModeService.isDevMode()) {\n      viewContainerRef.createEmbeddedView(templateRef);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n}\n","import { Directive, Injectable, OnDestroy, TemplateRef, ViewContainerRef, ViewRef } from '@angular/core';\n\nexport type TemplateDef = any;\n\nexport const enum KeepAliveFlags {\n  Detached,\n  Attached\n}\n\nexport class ViewRefAttachable {\n\n  viewRef: ViewRef;\n\n  flag: KeepAliveFlags = KeepAliveFlags.Detached;\n\n  viewContainerRef: ViewContainerRef;\n\n  get attached(): boolean {\n    return this.flag === KeepAliveFlags.Attached;\n  }\n\n  get detached(): boolean {\n    return this.flag === KeepAliveFlags.Detached;\n  }\n\n  constructor(viewRef: ViewRef) {\n    this.viewRef = viewRef;\n  }\n\n  attachToViewContainerRef(viewContainer: ViewContainerRef): void {\n    if (this.viewContainerRef || this.attached) {\n      throw new TypeError(`You can't use *keepAlive with *ngFor:\n  <ng-container *ngFor=\"...\">\n    <!-- Wrong! -->\n    <ng-container *keepAlive></ng-container>\n  </ng-container>\n\nviewRef already attached to viewContainerRef`);\n    }\n\n    this.flag = KeepAliveFlags.Attached;\n    (this.viewContainerRef = viewContainer).insert(this.viewRef);\n  }\n\n  detachFromViewContainerRef(): void {\n    if (!this.viewContainerRef || this.detached) {\n      throw new TypeError('viewRef already detached from viewContainerRef');\n    }\n\n    this.flag = KeepAliveFlags.Detached;\n    this.viewContainerRef.detach(this.viewContainerRef.indexOf(this.viewRef));\n    delete this.viewContainerRef;\n  }\n\n  destroy(): void {\n    this.viewRef.destroy();\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class KeepAliveConfig {\n  limit: number = 50;\n}\n\n@Injectable({ providedIn: 'root',  })\nexport class KeepAliveGC {\n  constructor(private config: KeepAliveConfig) {}\n\n  collect(viewRefs: Map<TemplateDef, ViewRefAttachable>): void {\n    const limit = this.config.limit > 0 ? this.config.limit : Number.MAX_SAFE_INTEGER;\n    for (const [templateDef, viewRefAttachable] of Array.from(viewRefs.entries())) {\n      if (viewRefs.size <= limit) {\n        break;\n      }\n\n      if (viewRefAttachable.flag === KeepAliveFlags.Detached) {\n        viewRefAttachable.destroy();\n        viewRefs.delete(templateDef);\n        console.log('Collect', viewRefAttachable);\n      }\n    }\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class KeepAliveViewRefs implements OnDestroy {\n\n  private viewRefs: Map<TemplateDef, ViewRefAttachable> = new Map<TemplateDef, ViewRefAttachable>();\n\n  constructor(private gc: KeepAliveGC) {}\n\n  add(templateRef: TemplateRef<any>, viewRef: ViewRef): void {\n    const templateDef = this.getTemplateDef(templateRef);\n    if (this.viewRefs.has(templateDef)) {\n      throw new TypeError('templateRef already exists in viewRefs');\n    }\n\n    const viewRefAttachable = new ViewRefAttachable(viewRef);\n    this.viewRefs.set(templateDef, viewRefAttachable);\n  }\n\n  has(templateRef: TemplateRef<any>): boolean {\n    const templateDef = this.getTemplateDef(templateRef);\n    return this.viewRefs.has(templateDef);\n  }\n\n  get(templateRef: TemplateRef<any>): ViewRefAttachable {\n    const templateDef = this.getTemplateDef(templateRef);\n    if (!this.viewRefs.has(templateDef)) {\n      throw new TypeError('templateRef not exists in viewRefs');\n    }\n    return this.viewRefs.get(templateDef);\n  }\n\n  delete(templateRef: TemplateRef<any>): boolean {\n    const templateDef = this.getTemplateDef(templateRef);\n    if (!this.viewRefs.has(templateDef)) {\n      throw new TypeError('templateRef not exists in viewRefs');\n    }\n    this.viewRefs.get(templateRef).viewRef.destroy();\n    return this.viewRefs.delete(templateDef);\n  }\n\n  reattach(templateRef: TemplateRef<any>): void {\n    const templateDef = this.getTemplateDef(templateRef);\n    const viewRefAttachable = this.get(templateRef);\n    this.viewRefs.set(templateDef, viewRefAttachable);\n  }\n\n  ngOnDestroy(): void {\n    this.viewRefs.forEach((viewRefAttachable) =>\n      viewRefAttachable.viewRef.destroy());\n    this.viewRefs.clear();\n  }\n\n  collect(): void {\n    this.gc.collect(this.viewRefs);\n  }\n\n  forEach(fn: (v: ViewRefAttachable) => void): void {\n    this.viewRefs.forEach(fn);\n  }\n\n  private getTemplateDef(templateRef: TemplateRef<any>): TemplateDef {\n    return templateRef['_def'];\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class KeepAliveManager {\n  static patched = Symbol('Already Patched ViewContainerRef Token');\n\n  constructor(private viewRefs: KeepAliveViewRefs) {}\n\n  attach(viewContainerRef: ViewContainerRef, templateRef: TemplateRef<any>): void {\n    if (!this.viewRefs.has(templateRef)) {\n      const viewRef = templateRef.createEmbeddedView({});\n      this.viewRefs.add(templateRef, viewRef);\n    } else {\n      this.viewRefs.reattach(templateRef);\n    }\n\n    this.patchClear(viewContainerRef);\n\n    const viewRefAttachable = this.viewRefs.get(templateRef);\n    viewRefAttachable.attachToViewContainerRef(viewContainerRef);\n\n    this.viewRefs.collect();\n  }\n\n  detach(viewContainerRef: ViewContainerRef, templateRef: TemplateRef<any>): void {\n    const viewRefAttachable = this.viewRefs.get(templateRef);\n    viewRefAttachable.detachFromViewContainerRef();\n\n    this.viewRefs.collect();\n  }\n\n  private patchClear(viewContainerRef: ViewContainerRef): void {\n    if (!viewContainerRef[KeepAliveManager.patched]) {\n      const clear = Object.getPrototypeOf(viewContainerRef).clear;\n      const viewRefs = this.viewRefs;\n      Object.getPrototypeOf(viewContainerRef).clear = function (this: ViewContainerRef) {\n        viewRefs.forEach(v => { v.viewRef[ '_view' ].state |= (1 << 7); });\n        clear.call(this);\n        viewRefs.forEach(v => { v.viewRef[ '_view' ].state &= ~(1 << 7); });\n      };\n      Object.defineProperty(viewContainerRef, KeepAliveManager.patched, { get: () => true });\n    }\n  }\n\n}\n\n@Directive({\n  selector: '[keepAlive]'\n})\nexport class KeepAliveDirective implements OnDestroy {\n  constructor(\n    private manager: KeepAliveManager,\n    private viewContainerRef: ViewContainerRef,\n    private templateRef: TemplateRef<any>\n  ) {\n    manager.attach(viewContainerRef, templateRef);\n  }\n\n  ngOnDestroy(): void {\n    this.manager.detach(this.viewContainerRef, this.templateRef);\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  InjectionToken,\n  Injector,\n  Input,\n  NgModuleFactory,\n  NgModuleFactoryLoader,\n  NgModuleRef,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\nimport { from, Observable, SubscriptionLike } from 'rxjs';\nimport { catchError, finalize, tap } from 'rxjs/operators';\n\ninterface LazyContext {\n  $implicit: any;\n}\n\nexport const LAZY_COMPONENT_TOKEN = new InjectionToken<Type<any>>('Lazy Component Token');\n\n@Directive({ selector: '[lazy]' })\nexport class LazyDirective implements OnChanges, OnDestroy {\n\n  @Input() lazy: string;\n  @Input() lazyLoadChildren: string;\n  @Input() lazyActivate: (component: any) => void;\n  @Input() lazyDeactivate: (component: any) => void;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter<any>();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter<any>();\n\n  private context: LazyContext = {\n    $implicit: null\n  };\n\n  private get component(): any {\n    if (this.componentRef) {\n      return this.componentRef.instance;\n    }\n  }\n\n  private componentRef: ComponentRef<any>;\n\n  private get projectableNodes(): any[][] {\n    return [ this.templateRef.createEmbeddedView(this.context).rootNodes ];\n  }\n\n  private embeddedViewRef: EmbeddedViewRef<LazyContext> =\n    this.templateRef.createEmbeddedView(this.context);\n\n  private subscription: SubscriptionLike;\n  private ngModuleRef: NgModuleRef<any>;\n\n  constructor(\n    private templateRef: TemplateRef<LazyContext>,\n    private viewContainer: ViewContainerRef,\n    private loader: NgModuleFactoryLoader,\n    private injector: Injector\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('lazy' in changes) {\n      this.onLazyDidChanged(this.lazy, changes.lazy.previousValue);\n    }\n\n    if ('lazyLoadChildren' in changes) {\n      this.onLazyDidChanged(this.lazyLoadChildren, changes.lazyLoadChildren.previousValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n\n    if (this.embeddedViewRef) {\n      this.embeddedViewRef.destroy();\n      this.embeddedViewRef = null;\n    }\n  }\n\n  private onLazyDidChanged(current: string, previous: string): void {\n    if (!this.ngModuleRef) {\n      return current && this.loadAndRender(current);\n    }\n\n    if (current !== previous) {\n      this.dispose();\n      return this.onLazyDidChanged(current, null);\n    }\n  }\n\n  private loadAndRender(path: string): void {\n    this.subscription = this.load(path).pipe(\n      tap((ngModuleFactory: NgModuleFactory<any>) => {\n        this.ngModuleRef = ngModuleFactory.create(this.injector);\n\n        const component: Type<any> = this.ngModuleRef.injector.get(LAZY_COMPONENT_TOKEN);\n        const componentFactory: ComponentFactory<any> =\n          this.ngModuleRef.componentFactoryResolver.resolveComponentFactory(component);\n\n        this.componentRef = this.viewContainer.createComponent(\n          componentFactory, this.viewContainer.length, this.injector,\n          this.projectableNodes, this.ngModuleRef\n        );\n      }),\n      finalize(() => this.onActivate(this.component))\n    ).subscribe();\n  }\n\n  private load(path: string): Observable<NgModuleFactory<any>> {\n    const pathProduction = path.split('#').join('.ts#');\n    return from(this.loader.load(pathProduction)).pipe(\n      catchError(() => from(this.loader.load(path)))\n    );\n  }\n\n  private onActivate(component: any): void {\n    this.activate.emit(component);\n    if (isFunction(this.lazyActivate)) {\n      this.lazyActivate(component);\n    }\n    this.context.$implicit = component;\n    this.embeddedViewRef.markForCheck();\n  }\n\n  private onDeactivate(component: any): void {\n    this.deactivate.emit(component);\n    if (isFunction(this.lazyDeactivate)) {\n      this.lazyDeactivate(component);\n    }\n    this.context.$implicit = null;\n    this.embeddedViewRef.markForCheck();\n  }\n\n  private dispose(): void {\n    if (this.componentRef) {\n      const c = this.component;\n      this.componentRef.destroy();\n      this.componentRef = null;\n      this.onDeactivate(c);\n    }\n\n    if (this.ngModuleRef) {\n      this.ngModuleRef.destroy();\n      this.ngModuleRef = null;\n    }\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n  }\n\n}\n\nfunction isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","import { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ComposedView } from '../tools/recompose/composed.view';\n\ninterface NestContext {\n  $implicit: any;\n  nest: any;\n}\n\n@Directive({ selector: '[nest]' })\nexport class NestDirective implements OnChanges, OnDestroy {\n\n  @Input() nest: TemplateRef<NestContext>[];\n  @Input() nestOf: TemplateRef<NestContext>[];\n\n  private context: NestContext = { $implicit: null, nest: null };\n  private viewRef: EmbeddedViewRef<NestContext>;\n\n  constructor(\n    private templateRef: TemplateRef<NestContext>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('nest' in changes) {\n      this.onTemplatesDidChanged(this.nest, changes.nest.previousValue);\n    }\n\n    if ('nestOf' in changes) {\n      this.onTemplatesDidChanged(this.nestOf, changes.nestOf.previousValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private onTemplatesDidChanged(current: TemplateRef<NestContext>[], previous: TemplateRef<NestContext>[]) {\n    if (!this.context.$implicit) {\n      return current && this.create(current);\n    }\n\n    if (current !== previous) {\n      this.destroy();\n      this.onTemplatesDidChanged(current, null);\n    }\n  }\n\n  private create(templateRefs: TemplateRef<NestContext>[]) {\n    this.context.$implicit = this.context.nest = new ComposedView<NestContext>(this.viewContainerRef, templateRefs);\n    this.viewRef =\n      this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n  }\n\n  private update(templateRefs: TemplateRef<NestContext>[]) {\n    this.context.$implicit = this.context.nest = new ComposedView<NestContext>(this.viewContainerRef, templateRefs);\n    this.viewRef.markForCheck();\n  }\n\n  private destroy() {\n    this.viewContainerRef.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ComposedView } from '../tools/recompose/composed.view';\nimport { omit } from '../tools/utils/index';\n\ninterface RenamePropContext {\n  $implicit: null;\n}\n\n@Directive({ selector: '[renameProp]' })\nexport class RenamePropDirective implements OnChanges, OnDestroy {\n\n  @Input() renameProp: string;\n  @Input() renamePropTo: string;\n\n  private context: RenamePropContext = {\n    $implicit: null\n  };\n  private composedView: ComposedView<RenamePropContext>;\n\n  constructor(\n    private templateRef: TemplateRef<RenamePropContext>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('renameProp' in changes && 'renamePropTo' in changes) {\n      this.onRenameDidChanged(\n        this.renameProp, this.renamePropTo,\n        changes.renameProp.previousValue, changes.renamePropTo.previousValue\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private onRenameDidChanged(from: string, to: string, fromPrevious: string, toPrevious: string) {\n    if (!this.composedView) {\n      this.create();\n    }\n\n    if (from !== fromPrevious || to !== toPrevious) {\n      this.rename(from, to);\n    }\n  }\n\n  private create() {\n    this.composedView = new ComposedView<RenamePropContext>(this.viewContainerRef);\n    this.composedView.createEmbeddedView(this.context);\n  }\n\n  private rename(from: string, to: string) {\n    this.composedView.updateContext((context, parent) => {\n      return Object.assign(\n        context,\n        omit(parent, [ from ]),\n        { [ to ]: parent[ from ] }\n      );\n    });\n  }\n\n  private destroy() {\n    this.viewContainerRef.clear();\n    if (this.composedView) {\n      this.composedView.destroy();\n      this.composedView = null;\n    }\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\n\nexport class RepeatContext {\n  $implicit: number;\n  repeat: number;\n  index: number;\n}\n\n@Directive({ selector: '[repeat]' })\nexport class RepeatDirective implements OnChanges, OnDestroy {\n\n  @Input() repeat: number;\n  @Input() repeatOf: number;\n\n  get count(): number {\n    const count = isNumber(this.repeat) ? this.repeat :\n      isNumber(this.repeatOf) ? this.repeatOf : 0;\n\n    return Math.max(count, 0);\n  }\n\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private templateRef: TemplateRef<RepeatContext>\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('repeat' in changes || 'repeatOf' in changes) {\n      this.onRepeatChanged(this.count);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.viewContainerRef.clear();\n  }\n\n  private onRepeatChanged(count: number): void {\n    /** When we need to create new items */\n    for (let i = this.viewContainerRef.length; i < count; i++) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef, {\n        $implicit: i, index: i, repeat: i\n      }, i);\n    }\n\n    /** When we need to remove old items */\n    for (let i = this.viewContainerRef.length; i > count; i--) {\n      this.viewContainerRef.remove(i - 1);\n    }\n  }\n\n}\n\nfunction isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { ComposedView } from '../tools/recompose/composed.view';\n\ninterface ReturnContext {\n  $implicit: null;\n}\n\n@Directive({ selector: '[return]' })\nexport class ReturnDirective implements OnChanges, OnDestroy {\n\n  @Input() return: any;\n\n  private context: ReturnContext = {\n    $implicit: null\n  };\n  private composedView: ComposedView<ReturnContext>;\n\n  constructor(private viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('return' in changes) {\n      if (!this.composedView) {\n        this.create();\n      } else {\n        this.update();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.composedView) {\n      this.composedView.destroy();\n      this.composedView = null;\n    }\n  }\n\n  private create() {\n    this.composedView = new ComposedView(this.viewContainerRef);\n    this.composedView.createEmbeddedView(this.context);\n    this.update();\n  }\n\n  private update() {\n    this.composedView.updateContext((context) => {\n      return Object.assign(context, this.return);\n    });\n  }\n\n}\n","import { Directive, EmbeddedViewRef, OnDestroy, TemplateRef, Type, ViewContainerRef } from '@angular/core';\nimport { ActivatedRoute, ActivatedRouteSnapshot, convertToParamMap, Data, ParamMap, Params, Route, UrlSegment } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\ninterface RouteContext {\n  $implicit: ActivatedRoute;\n  snapshot: ActivatedRouteSnapshot;\n  url: UrlSegment[];\n  params: Params;\n  queryParams: Params;\n  fragment: string;\n  data: Data;\n  outlet: string;\n  component: Type<any> | string;\n  routeConfig: Route;\n  root: ActivatedRoute;\n  parent: ActivatedRoute | null;\n  firstChild: ActivatedRoute | null;\n  children: ActivatedRoute[];\n  pathFromRoot: ActivatedRoute[];\n  paramMap: ParamMap;\n  queryParamMap: ParamMap;\n}\n\nconst ASYNC_FIELDS = [ 'url', 'params', 'queryParams', 'fragment', 'data', 'paramMap', 'queryParamMap' ];\n\n@Directive({ selector: '[route]' })\nexport class RouteDirective implements OnDestroy {\n  private context: RouteContext = {\n    $implicit: this.route,\n    get snapshot() { return this.route.snapshot; },\n    url: [],\n    params: {},\n    queryParams: {},\n    fragment: null,\n    data: null,\n    get outlet() { return this.route.outlet; },\n    get component() { return this.route.component; },\n    get routeConfig() { return this.route.routeConfig; },\n    get root() { return this.route.root; },\n    get parent() { return this.route.parent; },\n    get firstChild() { return this.route.firstChild; },\n    get children() { return this.route.children; },\n    get pathFromRoot() { return this.route.pathFromRoot; },\n    paramMap: convertToParamMap({}),\n    queryParamMap: convertToParamMap({})\n  };\n  private viewRef: EmbeddedViewRef<RouteContext> =\n    this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n  private subscriptions: Subscription[] = this.attachFields(ASYNC_FIELDS);\n\n  constructor(\n    private templateRef: TemplateRef<RouteContext>,\n    private viewContainerRef: ViewContainerRef,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => {\n      subscription.unsubscribe();\n    });\n    this.subscriptions = null;\n    this.viewContainerRef.clear();\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  private attachFields(asyncFields: string[]): Subscription[] {\n    return asyncFields.map(field => this.asyncAttach(field));\n  }\n\n  private asyncAttach(field: string): Subscription {\n    return this.route[ field ]\n      .pipe(distinctUntilChanged())\n      .subscribe(value => {\n        this.context[ field ] = value;\n        this.viewRef.markForCheck();\n      });\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ComposedView } from '../tools/recompose/composed.view';\n\ninterface SetPropsContext {\n  $implicit: any;\n  setProps: any;\n}\n\n@Directive({ selector: '[setProps]' })\nexport class SetPropsDirective implements OnChanges, OnDestroy {\n\n  @Input() setProps: any;\n\n  private context: SetPropsContext = { $implicit: null, setProps: null };\n  private composedView: ComposedView<SetPropsContext>;\n\n  constructor(\n    private templateRef: TemplateRef<SetPropsContext>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('setProps' in changes) {\n      this.onPropsDidChanged(this.setProps, changes.setProps.previousValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private onPropsDidChanged(current: TemplateRef<SetPropsContext>[], previous: TemplateRef<SetPropsContext>[]) {\n    if (!this.context.$implicit) {\n      return current && this.create(current);\n    }\n\n    if (current !== previous) {\n      this.destroy();\n      return this.onPropsDidChanged(current, null);\n    }\n  }\n\n  private create(props: any) {\n    this.composedView = new ComposedView<SetPropsContext>(this.viewContainerRef);\n    this.composedView.createEmbeddedView(this.context);\n    this.composedView.updateContext((context, parent) => {\n      return Object.assign(context, parent, props);\n    });\n  }\n\n  private destroy() {\n    this.viewContainerRef.clear();\n    if (this.composedView) {\n      this.composedView.destroy();\n      this.composedView = null;\n    }\n  }\n}\n","import { Directive, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({ selector: '[timeout]' })\nexport class TimeoutDirective implements OnDestroy {\n\n  private timeoutId: any;\n\n  constructor(\n    private templateRef: TemplateRef<null>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  @Input() set timeout(milliseconds: number) {\n    this.dispose();\n    if (isNumber(milliseconds)) {\n      this.create(milliseconds);\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this.viewContainerRef.clear();\n  }\n\n  private create(milliseconds: number) {\n    this.timeoutId = setTimeout(() => {\n      if (this.viewContainerRef) {\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\n      }\n    }, milliseconds);\n  }\n\n  private dispose() {\n    this.viewContainerRef.clear();\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n}\n\nfunction isNumber(value: number): value is number {\n  return typeof value === 'number';\n}\n","import { NgForOf } from '@angular/common';\nimport { Directive, Host, Input, OnChanges, Optional, SimpleChanges, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngForTrackByKey]'\n})\nexport class NgForTrackByKeyDirective<T> implements OnChanges {\n\n  @Input() ngForTrackByKey: keyof T;\n\n  constructor(@Host() @Optional() private ngFor: NgForOf<T>, private viewContainerRef: ViewContainerRef) {\n    if (!ngFor) {\n      throw new Error('TrackByKey should use with *ngFor!');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('ngForTrackByKey' in changes) {\n      const key = this.ngForTrackByKey;\n      if (key) {\n        this.ngFor.ngForTrackBy = (index: number, item: T): T[keyof T] => item[ key ];\n      } else {\n        this.ngFor.ngForTrackBy = undefined;\n      }\n\n      this.ngFor[ '_differ' ] = null;\n      this.ngFor[ '_ngForOfDirty' ] = true;\n      this.viewContainerRef.clear();\n      this.ngFor.ngDoCheck();\n    }\n  }\n\n}\n","import {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\n@Directive({\n  selector: '[useEffect]'\n})\nexport class UseEffectDirective implements OnChanges, DoCheck, OnDestroy {\n  private context: {} = {};\n\n  @Input() useEffect: Function;\n  @Input() useEffectOn: [];\n\n  private onDestroyCallback: Function;\n\n  private viewRef: EmbeddedViewRef<{}>;\n\n  constructor(\n    private templateRef: TemplateRef<{}>,\n    private vcr: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.useEffect && this.useEffect) {\n      this.destroy();\n      this.init();\n    } else if (changes.useEffectOn) {\n      if (Array.isArray(this.useEffectOn)) {\n        const previous = changes.useEffectOn.previousValue || [];\n        const current = changes.useEffectOn.currentValue || [];\n\n        const isChanged = !previous.every((item, index) => current[index] === item);\n\n        if (isChanged) {\n          this.destroy();\n          this.init();\n        }\n      } else {\n        this.destroy();\n        this.init();\n      }\n    }\n  }\n\n  ngDoCheck() {\n    if (!Array.isArray(this.useEffectOn)) {\n      this.destroy();\n      this.init();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private init() {\n    this.viewRef = this.vcr.createEmbeddedView(this.templateRef, this.context);\n    if (this.useEffect) {\n      this.onDestroyCallback = this.useEffect();\n    }\n  }\n\n  private destroy() {\n    if (this.onDestroyCallback) {\n      this.onDestroyCallback();\n      this.onDestroyCallback = null;\n    }\n\n    this.vcr.clear();\n\n    if (this.viewRef) {\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n}\n","import { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\n\ninterface Action {\n  type: string;\n  payload: any;\n}\n\ntype Reducer<T = any> = (state: T, action: Action) => T;\n\ninterface UseReducerImplicitContext<T> {\n  state: T;\n  dispatch: (action: Action) => T;\n  reducer: Reducer;\n  detectChanges: Function;\n}\n\ninterface UseReducerContext<T = any> {\n  $implicit: UseReducerImplicitContext<T>;\n}\n\n@Directive({\n  selector: '[useReducer]'\n})\nexport class UseReducerDirective implements OnChanges, OnDestroy {\n  @Input() useReducerInit: Reducer;\n  @Input() useReducerWith: any;\n  @Input() useReducerAnd: Action;\n\n  private context: UseReducerContext = {\n    $implicit: {\n      state: null,\n      dispatch (action: Action): any {\n        this.state = this.reducer(this.state, action);\n        this.detectChanges();\n      },\n      reducer: (() => {}),\n      detectChanges: () => {\n        this.embeddedViewRef.detectChanges();\n      }\n    }\n  };\n  private embeddedViewRef: EmbeddedViewRef<UseReducerContext> =\n    this.vcr.createEmbeddedView(this.templateRef, this.context);\n\n  constructor(\n    private templateRef: TemplateRef<UseReducerContext>,\n    private vcr: ViewContainerRef\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.useReducerInit && typeof this.useReducerInit === 'function') {\n      this.context.$implicit.reducer = this.useReducerInit;\n      this.context.$implicit.state = this.useReducerWith;\n      if (this.useReducerAnd) {\n        this.context.$implicit.dispatch(this.useReducerAnd);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.vcr.clear();\n    this.embeddedViewRef.destroy();\n    this.embeddedViewRef = null;\n  }\n\n}\n","import { Directive, EmbeddedViewRef, Input, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\n\ninterface UseStateContext<T = any> {\n  $implicit: {\n    get: T,\n    set: (value: T) => void;\n    detectChanges: Function;\n  };\n}\n\n@Directive({\n  selector: '[useState]'\n})\nexport class UseStateDirective implements OnChanges, OnDestroy {\n  @Input() useStateDefault: any;\n\n  private context: UseStateContext = {} as any;\n  private embeddedViewRef: EmbeddedViewRef<UseStateContext>;\n  private value: any;\n\n  constructor(\n    private templateRef: TemplateRef<UseStateContext>,\n    private vcr: ViewContainerRef\n  ) {\n    Object.defineProperty(this.context, '$implicit', {\n      get: () => this.value,\n      set: (value) => {\n        this.value = value;\n        if (this.embeddedViewRef) {\n          this.embeddedViewRef.detectChanges();\n        }\n      }\n    });\n    this.embeddedViewRef = this.vcr.createEmbeddedView(this.templateRef, this.context);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.useStateDefault) {\n      this.value = this.useStateDefault;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.vcr.clear();\n    this.embeddedViewRef.destroy();\n    this.embeddedViewRef = null;\n  }\n\n}\n","import { Injectable, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class VirtualHandler implements OnDestroy {\n\n  private elementLink = new Map<Element, ChangeDetectorRef>();\n  private observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const cd = this.elementLink.get(entry.target as Element);\n      entry.isIntersecting ? attachCD(cd) : detachCD(cd);\n    });\n  });\n\n  register(element: Element, cd: ChangeDetectorRef) {\n    this.elementLink.set(element, cd);\n    this.observer.observe(element);\n  }\n\n  unregister(element: Element) {\n    this.elementLink.delete(element);\n    this.observer.unobserve(element);\n  }\n\n  ngOnDestroy() {\n    this.elementLink.forEach((cd, e) => this.observer.unobserve(e));\n    this.elementLink.clear();\n  }\n\n}\n\nfunction attachCD(cd: ChangeDetectorRef) {\n  cd.reattach();\n  cd.detectChanges();\n}\n\nfunction detachCD(cd: ChangeDetectorRef) {\n  cd.detach();\n}\n","import { ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { VirtualHandler } from '../tools/virtual.handler';\n\n@Directive({ selector: '[virtual]' })\nexport class VirtualDirective implements OnDestroy {\n  @Input() virtual: any;\n\n  constructor(\n    private handler: VirtualHandler,\n    private elementRef: ElementRef,\n    private cd: ChangeDetectorRef\n  ) {\n    this.handler.register(this.elementRef.nativeElement, cd);\n  }\n\n  ngOnDestroy() {\n    this.handler.unregister(this.elementRef.nativeElement);\n  }\n}\n","import { ChangeDetectorRef, EmbeddedViewRef, Pipe, PipeTransform } from '@angular/core';\n\ntype Method<T = any> = (this: T, ...args: any[]) => any;\ntype Head<T extends Method> = Parameters<T>[0];\ntype Tail<T extends Method> = T extends (first: any, ...rest: infer R) => any ? R : never;\n\n@Pipe({ name: 'call' })\nexport class CallPipe<C> implements PipeTransform {\n  private readonly context: C;\n\n  // with Ivy you can inject EmbeddedViewRef directly\n  constructor(private cd: ChangeDetectorRef) {\n    this.context = (this.cd as EmbeddedViewRef<C>).context;\n  }\n\n  transform<M extends Method<C>>(param: Head<M>, fn: M, ...params: Tail<M>): ReturnType<M> {\n    return fn.apply(this.context, [param, ...params]);\n  }\n}\n","import { Inject, InjectionToken, Pipe, PipeTransform } from '@angular/core';\n\nexport function consoleFactory() {\n  return console;\n}\n\nexport const CONSOLE = new InjectionToken<Console>('Console', {\n  providedIn: 'root',\n  factory: consoleFactory\n});\n\nexport const skipValueOperators = [\n  'count',\n  'markTimeline',\n  'time',\n  'timeEnd',\n  'profile',\n  'profileEnd',\n  'timeline',\n  'timelineEnd',\n  'timeStamp',\n  'group',\n  'groupCollapsed'\n];\n\n@Pipe({\n  name: 'console'\n})\nexport class ConsolePipe implements PipeTransform {\n\n  constructor(@Inject(CONSOLE) private console: any) {}\n\n  // info(message?: any, ...optionalParams): void;\n  transform<T>(message: T, logLevel: 'info', ...optionalParams: any[]): T;\n  // log(message?: any, ...optionalParams): void;\n  transform<T>(message: T, logLevel: 'log', ...optionalParams: any[]): T;\n  // warn(message?: any, ...optionalParams): void;\n  transform<T>(message: T, logLevel: 'warn', ...optionalParams: any[]): T;\n  // exception(message?: string, ...optionalParams): void;\n  transform<T>(message: T, logLevel: 'exception', ...optionalParams: any[]): T;\n  // error(message?: any, ...optionalParams): void;\n  transform<T>(message: T, logLevel: 'error', ...optionalParams: any[]): T;\n  // debug(message?: any, ...optionalParams: any[]): void;\n  transform<T>(message: T, logLevel: 'debug', ...optionalParams: any[]): T;\n  // trace(message?: any, ...optionalParams: any[]): void;\n  transform<T>(message: T, logLevel: 'trace', ...optionalParams: any[]): T;\n  // dir(obj: any, options?: NodeJS.InspectOptions): void;\n  transform<T>(obj: T, logLevel: 'dir'/*, options?: NodeJS.InspectOptions*/): T;\n  // dirxml(value: any): void;\n  transform<T>(value: T, logLevel: 'dirxml'): T;\n  // table(...tabularData): void;\n  transform<T>(value: T, logLevel: 'table'): T;\n  // assert(value: any, message?: string, ...optionalParams): void;\n  transform<T>(value: T, logLevel: 'trace', message: string, ...optionalParams: any[]): T;\n  // count(label?: string): void;\n  transform<T>(value: T, logLevel: 'count', label?: string): T;\n  // markTimeline(label?: string): void;\n  transform<T>(value: T, logLevel: 'markTimeline', label?: string): T;\n  // time(label: string): void;\n  transform<T>(value: T, logLevel: 'time', label?: string): T;\n  // timeEnd(label: string): void;\n  transform<T>(value: T, logLevel: 'timeEnd', label?: string): T;\n  // profile(reportName?: string): void;\n  transform<T>(value: T, logLevel: 'profile', reportName?: string): T;\n  // profileEnd(reportName?: string): void;\n  transform<T>(value: T, logLevel: 'profileEnd', reportName?: string): T;\n  // timeline(label?: string): void;\n  transform<T>(value: T, logLevel: 'timeline', label?: string): T;\n  // timelineEnd(label?: string): void;\n  transform<T>(value: T, logLevel: 'timelineEnd', label?: string): T;\n  // timeStamp(label?: string): void;\n  transform<T>(value: T, logLevel: 'timeStamp', label?: string): T;\n  // group(groupTitle?: string, ...optionalParams: any[]): void;\n  transform<T>(value: T, logLevel: 'group', groupTitle?: string, ...optionalParams: any[]): T;\n  // groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\n  transform<T>(value: T, logLevel: 'groupCollapsed', groupTitle?: string, ...optionalParams: any[]): T;\n  // groupEnd(): void;\n  transform<T>(value: T, logLevel: 'groupEnd'): T;\n  // clear(): void;\n  transform<T>(value: T, logLevel: 'clear'): T;\n  transform<T>(message: string | T, logLevel: keyof Console = 'log', ...optionalParams: any[]): string | T {\n    let params;\n    if (skipValueOperators.includes(logLevel)) {\n      if (optionalParams.length > 0) {\n        params = optionalParams;\n      } else {\n        params = [ message ];\n      }\n    } else {\n      params = [ message, ...optionalParams ];\n    }\n\n    this.console[ logLevel ](...params);\n    return message;\n  }\n\n}\n","import { SimpleChanges } from '@angular/core';\n\nconst noop = () => { };\nexport function UseEffect(\n  effect: () => (() => any) | any,\n  affectedKeys?: string[]\n) {\n  const destroyEffectsMap = new WeakMap();\n  function init() {\n    const destroyEffect = effect.call(this);\n    destroyEffectsMap.set(this, destroyEffect);\n  }\n  function destroy() {\n    if (destroyEffectsMap.has(this)) {\n      const destroyEffect = destroyEffectsMap.get(this);\n      if (destroyEffect) {\n        destroyEffect();\n      }\n    }\n  }\n  function isChanged(changes: SimpleChanges): boolean {\n    if (!affectedKeys) {\n      return true;\n    }\n\n    if (affectedKeys.length === 0) {\n      return false;\n    }\n\n    return affectedKeys.every((affectedKey) => affectedKey in changes);\n  }\n  return (def: any) => {\n    const originalOnInit = def.ngComponentDef.onInit || noop;\n    def.ngComponentDef.onInit = function onInit() {\n      originalOnInit();\n      init.call(this);\n    };\n\n    const originalOnChanges = def.ngComponentDef.onChanges || noop;\n    def.ngComponentDef.onChanges = function onChanges(changes: SimpleChanges) {\n      originalOnChanges(changes);\n      if (isChanged(changes)) {\n        destroy.call(this);\n        init.call(this);\n      }\n    };\n\n    const originalOnDestroy = def.ngComponentDef.onDestroy || noop;\n    def.ngComponentDef.onDestroy = function onDestroy() {\n      originalOnDestroy();\n      destroy.call(this);\n    };\n  };\n}\n","import { ANALYZE_FOR_ENTRY_COMPONENTS, ModuleWithProviders, NgModule, Type } from '@angular/core';\n\nimport { AsyncDirective } from './directives/async.directive';\nimport { ComposeDirective } from './directives/compose.directive';\nimport { CookiesDirective } from './directives/cookies.directive';\nimport { HttpDirective } from './directives/http.directive';\nimport { InitDirective } from './directives/init.directive';\nimport { IsDevModeDirective } from './directives/is-dev-mode.directive';\nimport { KeepAliveConfig, KeepAliveDirective } from './directives/keep-alive.directive';\nimport { LazyDirective, LAZY_COMPONENT_TOKEN } from './directives/lazy.directive';\nimport { NestDirective } from './directives/nest.directive';\nimport { RenamePropDirective } from './directives/rename-prop.directive';\nimport { RepeatDirective } from './directives/repeat.directive';\nimport { ReturnDirective } from './directives/return.directive';\nimport { RouteDirective } from './directives/route.directive';\nimport { SetPropsDirective } from './directives/set-props.directive';\nimport { TimeoutDirective } from './directives/timeout.directive';\nimport { NgForTrackByKeyDirective } from './directives/track-by-key.directive';\nimport { UseEffectDirective } from './directives/use-effect.directive';\nimport { UseReducerDirective } from './directives/use-reducer.directive';\nimport { UseStateDirective } from './directives/use-state.directive';\nimport { VirtualDirective } from './directives/virtual.directive';\n\nimport { CallPipe } from './pipes/call.pipe';\nimport { ConsolePipe } from './pipes/console.pipe';\n\nconst DIRECTIVES = [\n  AsyncDirective,\n  ComposeDirective,\n  CookiesDirective,\n  HttpDirective,\n  LazyDirective,\n  InitDirective,\n  IsDevModeDirective,\n  KeepAliveDirective,\n  NestDirective,\n  RenamePropDirective,\n  RepeatDirective,\n  ReturnDirective,\n  RouteDirective,\n  SetPropsDirective,\n  TimeoutDirective,\n  NgForTrackByKeyDirective,\n  UseReducerDirective,\n  UseStateDirective,\n  UseEffectDirective,\n  VirtualDirective\n];\n\nconst PIPES = [\n  CallPipe,\n  ConsolePipe\n];\n\n@NgModule({\n  imports: [],\n  declarations: [ DIRECTIVES, PIPES ],\n  exports: [ DIRECTIVES, PIPES ]\n})\nexport class NgxfModule {\n  static forLazy(component: Type<any>): ModuleWithProviders<NgxfModule> {\n    return {\n      ngModule: NgxfModule,\n      providers: [\n        { provide: LAZY_COMPONENT_TOKEN, useValue: component },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: component, multi: true }\n      ]\n    };\n  }\n  static forKeepAlive(keepAliveConfig: KeepAliveConfig): ModuleWithProviders<NgxfModule> {\n    return {\n      ngModule: NgxfModule,\n      providers: [\n        { provide: KeepAliveConfig, useValue: keepAliveConfig }\n      ]\n    };\n  }\n}\n\nexport { AsyncDirective } from './directives/async.directive';\nexport { ComposeDirective } from './directives/compose.directive';\nexport { CookiesDirective } from './directives/cookies.directive';\nexport { HttpDirective } from './directives/http.directive';\nexport { InitDirective } from './directives/init.directive';\nexport { IsDevModeDirective } from './directives/is-dev-mode.directive';\nexport { KeepAliveDirective, KeepAliveConfig, KeepAliveGC } from './directives/keep-alive.directive';\nexport { LazyDirective, LAZY_COMPONENT_TOKEN } from './directives/lazy.directive';\nexport { NestDirective } from './directives/nest.directive';\nexport { RenamePropDirective } from './directives/rename-prop.directive';\nexport { RepeatDirective } from './directives/repeat.directive';\nexport { ReturnDirective } from './directives/return.directive';\nexport { RouteDirective } from './directives/route.directive';\nexport { SetPropsDirective } from './directives/set-props.directive';\nexport { TimeoutDirective } from './directives/timeout.directive';\nexport { NgForTrackByKeyDirective } from './directives/track-by-key.directive';\nexport { UseEffectDirective } from './directives/use-effect.directive';\nexport { UseReducerDirective } from './directives/use-reducer.directive';\nexport { UseStateDirective } from './directives/use-state.directive';\nexport { VirtualDirective } from './directives/virtual.directive';\n\nexport { CallPipe } from './pipes/call.pipe';\nexport { ConsolePipe } from './pipes/console.pipe';\n\nexport { UseEffect } from './ivy-hooks/use-effect.hook';\nexport { UseReducer } from './ivy-hooks/use-reducer.hook';\nexport { UseState } from './ivy-hooks/use-state.hook';\n","export function UseReducer<T = any>(\n  [stateKey, dispatchKey]: [string, string],\n  reducer: (state: T, action: { type: any }) => any,\n  initialValue?: T\n) {\n  return (def: any) => {\n    const originalFactory = def.ngComponentDef.factory;\n    def.ngComponentDef.factory = () => {\n      const cmp = originalFactory(def.ngComponentDef.type);\n      cmp[stateKey] = initialValue;\n      cmp[dispatchKey] = (action) => cmp[stateKey] = reducer(cmp[stateKey], action);\n      return cmp;\n    };\n  };\n}\n","export function UseState<T = any>(\n  [stateKey, setStateKey]: [string, string],\n  initialValue?: T\n) {\n  return (def: any) => {\n    const originalFactory = def.ngComponentDef.factory;\n    def.ngComponentDef.factory = () => {\n      const cmp = originalFactory(def.ngComponentDef.type);\n      cmp[stateKey] = initialValue;\n      cmp[setStateKey] = (value) => cmp[stateKey] = value;\n      return cmp;\n    };\n  };\n}\n"]}