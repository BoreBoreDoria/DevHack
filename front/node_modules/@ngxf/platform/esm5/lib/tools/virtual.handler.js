/**
 * @fileoverview added by tsickle
 * Generated from: lib/tools/virtual.handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var VirtualHandler = /** @class */ (function () {
    function VirtualHandler() {
        var _this = this;
        this.elementLink = new Map();
        this.observer = new IntersectionObserver((/**
         * @param {?} entries
         * @return {?}
         */
        function (entries) {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                /** @type {?} */
                var cd = _this.elementLink.get((/** @type {?} */ (entry.target)));
                entry.isIntersecting ? attachCD(cd) : detachCD(cd);
            }));
        }));
    }
    /**
     * @param {?} element
     * @param {?} cd
     * @return {?}
     */
    VirtualHandler.prototype.register = /**
     * @param {?} element
     * @param {?} cd
     * @return {?}
     */
    function (element, cd) {
        this.elementLink.set(element, cd);
        this.observer.observe(element);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    VirtualHandler.prototype.unregister = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        this.elementLink.delete(element);
        this.observer.unobserve(element);
    };
    /**
     * @return {?}
     */
    VirtualHandler.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.elementLink.forEach((/**
         * @param {?} cd
         * @param {?} e
         * @return {?}
         */
        function (cd, e) { return _this.observer.unobserve(e); }));
        this.elementLink.clear();
    };
    VirtualHandler.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ VirtualHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function VirtualHandler_Factory() { return new VirtualHandler(); }, token: VirtualHandler, providedIn: "root" });
    return VirtualHandler;
}());
export { VirtualHandler };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VirtualHandler.prototype.elementLink;
    /**
     * @type {?}
     * @private
     */
    VirtualHandler.prototype.observer;
}
/**
 * @param {?} cd
 * @return {?}
 */
function attachCD(cd) {
    cd.reattach();
    cd.detectChanges();
}
/**
 * @param {?} cd
 * @return {?}
 */
function detachCD(cd) {
    cd.detach();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvdG9vbHMvdmlydHVhbC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0MsTUFBTSxlQUFlLENBQUM7O0FBRXpFO0lBQUE7UUFBQSxpQkEwQkM7UUF2QlMsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztRQUNwRCxhQUFRLEdBQUcsSUFBSSxvQkFBb0I7Ozs7UUFBQyxVQUFBLE9BQU87WUFDakQsT0FBTyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLEtBQUs7O29CQUNiLEVBQUUsR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxtQkFBQSxLQUFLLENBQUMsTUFBTSxFQUFXLENBQUM7Z0JBQ3hELEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7S0FpQko7Ozs7OztJQWZDLGlDQUFROzs7OztJQUFSLFVBQVMsT0FBZ0IsRUFBRSxFQUFxQjtRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCxtQ0FBVTs7OztJQUFWLFVBQVcsT0FBZ0I7UUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELG9DQUFXOzs7SUFBWDtRQUFBLGlCQUdDO1FBRkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsRUFBRSxFQUFFLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUExQixDQUEwQixFQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDOztnQkF4QkYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O3lCQUZsQztDQTRCQyxBQTFCRCxJQTBCQztTQXpCWSxjQUFjOzs7Ozs7SUFFekIscUNBQTREOzs7OztJQUM1RCxrQ0FLRzs7Ozs7O0FBbUJMLFNBQVMsUUFBUSxDQUFDLEVBQXFCO0lBQ3JDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNkLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNyQixDQUFDOzs7OztBQUVELFNBQVMsUUFBUSxDQUFDLEVBQXFCO0lBQ3JDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVmlydHVhbEhhbmRsZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgZWxlbWVudExpbmsgPSBuZXcgTWFwPEVsZW1lbnQsIENoYW5nZURldGVjdG9yUmVmPigpO1xuICBwcml2YXRlIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBjb25zdCBjZCA9IHRoaXMuZWxlbWVudExpbmsuZ2V0KGVudHJ5LnRhcmdldCBhcyBFbGVtZW50KTtcbiAgICAgIGVudHJ5LmlzSW50ZXJzZWN0aW5nID8gYXR0YWNoQ0QoY2QpIDogZGV0YWNoQ0QoY2QpO1xuICAgIH0pO1xuICB9KTtcblxuICByZWdpc3RlcihlbGVtZW50OiBFbGVtZW50LCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB0aGlzLmVsZW1lbnRMaW5rLnNldChlbGVtZW50LCBjZCk7XG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICB9XG5cbiAgdW5yZWdpc3RlcihlbGVtZW50OiBFbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50TGluay5kZWxldGUoZWxlbWVudCk7XG4gICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmVsZW1lbnRMaW5rLmZvckVhY2goKGNkLCBlKSA9PiB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShlKSk7XG4gICAgdGhpcy5lbGVtZW50TGluay5jbGVhcigpO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gYXR0YWNoQ0QoY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIGNkLnJlYXR0YWNoKCk7XG4gIGNkLmRldGVjdENoYW5nZXMoKTtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQ0QoY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIGNkLmRldGFjaCgpO1xufVxuIl19