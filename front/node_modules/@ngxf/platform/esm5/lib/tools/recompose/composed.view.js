/**
 * @fileoverview added by tsickle
 * Generated from: lib/tools/recompose/composed.view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read } from "tslib";
import { omit } from '../utils';
/** @type {?} */
export var PARENT_CONTEXT_TOKEN = Symbol('[PARENT_CONTEXT_TOKEN]');
/**
 * @record
 */
export function ComposedContext() { }
if (false) {
    /* Skipping unnamed member:
    [ PARENT_CONTEXT_TOKEN ]: TemplateRef<ComposedContext>[];*/
    /** @type {?} */
    ComposedContext.prototype.children;
    /* Skipping unhandled member: [ key: string ]: any;*/
}
/**
 * @template C
 */
var /**
 * @template C
 */
ComposedView = /** @class */ (function () {
    function ComposedView(viewContainerRef, templateRefs) {
        this.viewContainerRef = viewContainerRef;
        this.templateRefs = templateRefs;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    ComposedView.prototype.createEmbeddedView = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _a = __read(this.getParentTemplateRefs()), templateRef = _a[0], tail = _a.slice(1);
        this.context = (/** @type {?} */ ((/** @type {?} */ (context))));
        if (tail.length > 0) {
            this.elementRef = templateRef.elementRef;
            this.context[PARENT_CONTEXT_TOKEN] = tail;
            this.context.children = new ComposedView(this.viewContainerRef, tail);
        }
        this.viewRef =
            this.viewContainerRef.createEmbeddedView(templateRef, this.context);
        return (/** @type {?} */ ((/** @type {?} */ (this.viewRef))));
    };
    /**
     * @return {?}
     */
    ComposedView.prototype.markForCheck = /**
     * @return {?}
     */
    function () {
        if (this.viewRef) {
            this.viewRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    ComposedView.prototype.detectChanges = /**
     * @return {?}
     */
    function () {
        if (this.viewRef) {
            this.viewRef.detectChanges();
        }
    };
    /**
     * @param {?} update
     * @return {?}
     */
    ComposedView.prototype.updateContext = /**
     * @param {?} update
     * @return {?}
     */
    function (update) {
        /** @type {?} */
        var parent = this.getHydratedParentContext();
        update(this.context, parent);
        this.markForCheck();
    };
    /**
     * @return {?}
     */
    ComposedView.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.viewRef && !this.viewRef.destroyed) {
            this.viewRef.destroy();
        }
        this.viewRef = null;
    };
    /**
     * @private
     * @return {?}
     */
    ComposedView.prototype.getParentTemplateRefs = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.templateRefs) {
            return this.templateRefs;
        }
        /** @type {?} */
        var view = ((/** @type {?} */ (this.viewContainerRef.injector))).view;
        /** @type {?} */
        var context = findParentContext(view);
        return context[PARENT_CONTEXT_TOKEN];
    };
    /**
     * @private
     * @return {?}
     */
    ComposedView.prototype.getHydratedParentContext = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var view = ((/** @type {?} */ (this.viewContainerRef.injector))).view;
        return omit(findParentContext(view), [PARENT_CONTEXT_TOKEN, 'children']);
    };
    return ComposedView;
}());
/**
 * @template C
 */
export { ComposedView };
if (false) {
    /** @type {?} */
    ComposedView.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ComposedView.prototype.templateRefs;
}
/**
 * @param {?} view
 * @return {?}
 */
export function findParentContext(view) {
    /** @type {?} */
    var context = view.context;
    if (isParentContext(context)) {
        return context;
    }
    return findParentContext(view.parent);
}
/**
 * @param {?} context
 * @return {?}
 */
export function isParentContext(context) {
    return context && PARENT_CONTEXT_TOKEN in context;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zZWQudmlldy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL3Rvb2xzL3JlY29tcG9zZS9jb21wb3NlZC52aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7O0FBRWhDLE1BQU0sS0FBTyxvQkFBb0IsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUM7Ozs7QUFFcEUscUNBS0M7Ozs7O0lBSEMsbUNBQXdDOzs7Ozs7QUFLMUM7Ozs7SUFPRSxzQkFBb0IsZ0JBQWtDLEVBQVUsWUFBaUM7UUFBN0UscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtJQUFHLENBQUM7Ozs7O0lBRXJHLHlDQUFrQjs7OztJQUFsQixVQUFtQixPQUFVO1FBQ3JCLElBQUEseUNBQXVELEVBQXJELG1CQUFXLEVBQUUsa0JBQXdDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQUEsbUJBQUEsT0FBTyxFQUFPLEVBQW1CLENBQUM7UUFDakQsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUM7WUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxvQkFBb0IsQ0FBRSxHQUFHLElBQUksQ0FBQztZQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBa0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3hGO1FBQ0QsSUFBSSxDQUFDLE9BQU87WUFDVixJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RSxPQUFPLG1CQUFBLG1CQUFBLElBQUksQ0FBQyxPQUFPLEVBQU8sRUFBc0IsQ0FBQztJQUNuRCxDQUFDOzs7O0lBRUQsbUNBQVk7OztJQUFaO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7O0lBRUQsb0NBQWE7OztJQUFiO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDOUI7SUFDSCxDQUFDOzs7OztJQUVELG9DQUFhOzs7O0lBQWIsVUFBYyxNQUEwQzs7WUFDaEQsTUFBTSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtRQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7OztJQUVELDhCQUFPOzs7SUFBUDtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDOzs7OztJQUVPLDRDQUFxQjs7OztJQUE3QjtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUI7O1lBRUssSUFBSSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsSUFBSTs7WUFDbkQsT0FBTyxHQUFvQixpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDeEQsT0FBTyxPQUFPLENBQUUsb0JBQW9CLENBQUUsQ0FBQztJQUN6QyxDQUFDOzs7OztJQUVPLCtDQUF3Qjs7OztJQUFoQzs7WUFDUSxJQUFJLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFPLENBQUMsQ0FBQyxJQUFJO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUUsb0JBQW9CLEVBQUUsVUFBVSxDQUFFLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBOURELElBOERDOzs7Ozs7O0lBNURDLGtDQUF1Qjs7Ozs7SUFFdkIsK0JBQWlDOzs7OztJQUNqQywrQkFBa0Q7Ozs7O0lBRXRDLHdDQUEwQzs7Ozs7SUFBRSxvQ0FBeUM7Ozs7OztBQXlEbkcsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQVM7O1FBQ25DLE9BQU8sR0FBUSxJQUFJLENBQUMsT0FBTztJQUVqQyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUM1QixPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUVELE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxPQUFZO0lBQzFDLE9BQU8sT0FBTyxJQUFJLG9CQUFvQixJQUFJLE9BQU8sQ0FBQztBQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRW1iZWRkZWRWaWV3UmVmLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgb21pdCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFBBUkVOVF9DT05URVhUX1RPS0VOID0gU3ltYm9sKCdbUEFSRU5UX0NPTlRFWFRfVE9LRU5dJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9zZWRDb250ZXh0IHtcbiAgWyBQQVJFTlRfQ09OVEVYVF9UT0tFTiBdOiBUZW1wbGF0ZVJlZjxDb21wb3NlZENvbnRleHQ+W107XG4gIGNoaWxkcmVuOiBDb21wb3NlZFZpZXc8Q29tcG9zZWRDb250ZXh0PjtcblxuICBbIGtleTogc3RyaW5nIF06IGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbXBvc2VkVmlldzxDPiB7XG5cbiAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICBwcml2YXRlIGNvbnRleHQ6IENvbXBvc2VkQ29udGV4dDtcbiAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8Q29tcG9zZWRDb250ZXh0PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgdGVtcGxhdGVSZWZzPzogVGVtcGxhdGVSZWY8YW55PltdKSB7fVxuXG4gIGNyZWF0ZUVtYmVkZGVkVmlldyhjb250ZXh0OiBDKTogRW1iZWRkZWRWaWV3UmVmPEM+IHtcbiAgICBjb25zdCBbIHRlbXBsYXRlUmVmLCAuLi50YWlsIF0gPSB0aGlzLmdldFBhcmVudFRlbXBsYXRlUmVmcygpO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgYXMgYW55IGFzIENvbXBvc2VkQ29udGV4dDtcbiAgICBpZiAodGFpbC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmVsZW1lbnRSZWYgPSB0ZW1wbGF0ZVJlZi5lbGVtZW50UmVmO1xuICAgICAgdGhpcy5jb250ZXh0WyBQQVJFTlRfQ09OVEVYVF9UT0tFTiBdID0gdGFpbDtcbiAgICAgIHRoaXMuY29udGV4dC5jaGlsZHJlbiA9IG5ldyBDb21wb3NlZFZpZXc8Q29tcG9zZWRDb250ZXh0Pih0aGlzLnZpZXdDb250YWluZXJSZWYsIHRhaWwpO1xuICAgIH1cbiAgICB0aGlzLnZpZXdSZWYgPVxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZiwgdGhpcy5jb250ZXh0KTtcblxuICAgIHJldHVybiB0aGlzLnZpZXdSZWYgYXMgYW55IGFzIEVtYmVkZGVkVmlld1JlZjxDPjtcbiAgfVxuXG4gIG1hcmtGb3JDaGVjaygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52aWV3UmVmKSB7XG4gICAgICB0aGlzLnZpZXdSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgZGV0ZWN0Q2hhbmdlcygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52aWV3UmVmKSB7XG4gICAgICB0aGlzLnZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbnRleHQodXBkYXRlOiAoY29udGV4dDogYW55LCBwYXJlbnQ6IGFueSkgPT4gYW55KSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5nZXRIeWRyYXRlZFBhcmVudENvbnRleHQoKTtcbiAgICB1cGRhdGUodGhpcy5jb250ZXh0LCBwYXJlbnQpO1xuICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnZpZXdSZWYgJiYgIXRoaXMudmlld1JlZi5kZXN0cm95ZWQpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMudmlld1JlZiA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIGdldFBhcmVudFRlbXBsYXRlUmVmcygpOiBUZW1wbGF0ZVJlZjxDb21wb3NlZENvbnRleHQ+W10ge1xuICAgIGlmICh0aGlzLnRlbXBsYXRlUmVmcykge1xuICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVSZWZzO1xuICAgIH1cblxuICAgIGNvbnN0IHZpZXcgPSAodGhpcy52aWV3Q29udGFpbmVyUmVmLmluamVjdG9yIGFzIGFueSkudmlldztcbiAgICBjb25zdCBjb250ZXh0OiBDb21wb3NlZENvbnRleHQgPSBmaW5kUGFyZW50Q29udGV4dCh2aWV3KTtcbiAgICByZXR1cm4gY29udGV4dFsgUEFSRU5UX0NPTlRFWFRfVE9LRU4gXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SHlkcmF0ZWRQYXJlbnRDb250ZXh0KCk6IGFueSB7XG4gICAgY29uc3QgdmlldyA9ICh0aGlzLnZpZXdDb250YWluZXJSZWYuaW5qZWN0b3IgYXMgYW55KS52aWV3O1xuICAgIHJldHVybiBvbWl0KGZpbmRQYXJlbnRDb250ZXh0KHZpZXcpLCBbIFBBUkVOVF9DT05URVhUX1RPS0VOLCAnY2hpbGRyZW4nIF0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFyZW50Q29udGV4dCh2aWV3OiBhbnkpOiBDb21wb3NlZENvbnRleHQge1xuICBjb25zdCBjb250ZXh0OiBhbnkgPSB2aWV3LmNvbnRleHQ7XG5cbiAgaWYgKGlzUGFyZW50Q29udGV4dChjb250ZXh0KSkge1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbiAgcmV0dXJuIGZpbmRQYXJlbnRDb250ZXh0KHZpZXcucGFyZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGFyZW50Q29udGV4dChjb250ZXh0OiBhbnkpOiBjb250ZXh0IGlzIENvbXBvc2VkQ29udGV4dCB7XG4gIHJldHVybiBjb250ZXh0ICYmIFBBUkVOVF9DT05URVhUX1RPS0VOIGluIGNvbnRleHQ7XG59XG4iXX0=