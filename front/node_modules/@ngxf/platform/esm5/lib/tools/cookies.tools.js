/**
 * @fileoverview added by tsickle
 * Generated from: lib/tools/cookies.tools.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign, __extends } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { APP_BASE_HREF } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @record
 */
export function CookieOptionsArgs() { }
if (false) {
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.path;
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.domain;
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.expires;
    /** @type {?|undefined} */
    CookieOptionsArgs.prototype.secure;
}
/**
 * @record
 */
export function ICookies() { }
/**
 * @record
 */
export function ICookieService() { }
if (false) {
    /**
     * @param {?} key
     * @return {?}
     */
    ICookieService.prototype.get = function (key) { };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.set = function (key, value, options) { };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.remove = function (key, options) { };
}
var CookieOptions = /** @class */ (function () {
    function CookieOptions(_a) {
        var _b = _a === void 0 ? {} : _a, path = _b.path, domain = _b.domain, expires = _b.expires, secure = _b.secure;
        this.path = this.isPresent(path) ? path : null;
        this.domain = this.isPresent(domain) ? domain : null;
        this.expires = this.isPresent(expires) ? expires : null;
        this.secure = this.isPresent(secure) ? secure : false;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    CookieOptions.prototype.merge = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return new CookieOptions((/** @type {?} */ ({
            path: this.isPresent(options) && this.isPresent(options.path) ? options.path : this.path,
            domain: this.isPresent(options) && this.isPresent(options.domain) ? options.domain : this.domain,
            expires: this.isPresent(options) && this.isPresent(options.expires) ? options.expires : this.expires,
            secure: this.isPresent(options) && this.isPresent(options.secure) ? options.secure : this.secure,
        })));
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CookieOptions.prototype.isPresent = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj !== undefined && obj !== null;
    };
    return CookieOptions;
}());
export { CookieOptions };
if (false) {
    /** @type {?} */
    CookieOptions.prototype.path;
    /** @type {?} */
    CookieOptions.prototype.domain;
    /** @type {?} */
    CookieOptions.prototype.expires;
    /** @type {?} */
    CookieOptions.prototype.secure;
}
var BaseCookieOptions = /** @class */ (function (_super) {
    __extends(BaseCookieOptions, _super);
    function BaseCookieOptions(baseHref) {
        var _this = _super.call(this, { path: baseHref || '/' }) || this;
        _this.baseHref = baseHref;
        return _this;
    }
    BaseCookieOptions.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BaseCookieOptions.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }
    ]; };
    /** @nocollapse */ BaseCookieOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseCookieOptions_Factory() { return new BaseCookieOptions(i0.ɵɵinject(i1.APP_BASE_HREF, 8)); }, token: BaseCookieOptions, providedIn: "root" });
    return BaseCookieOptions;
}(CookieOptions));
export { BaseCookieOptions };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BaseCookieOptions.prototype.baseHref;
}
var CookiesService = /** @class */ (function () {
    function CookiesService(defaultOptions) {
        this.defaultOptions = defaultOptions;
    }
    Object.defineProperty(CookiesService.prototype, "cookieString", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return document.cookie || '';
        },
        set: /**
         * @protected
         * @param {?} val
         * @return {?}
         */
        function (val) {
            document.cookie = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CookiesService.prototype.cookieReader = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var currentCookieString = this.cookieString;
        if (currentCookieString) {
            /** @type {?} */
            var cookieArray = currentCookieString.split('; ');
            return cookieArray.reduce((/**
             * @param {?} cookies
             * @param {?} current
             * @return {?}
             */
            function (cookies, current) {
                var _a;
                /** @type {?} */
                var cookie = current.split('=');
                return __assign(__assign({}, cookies), (_a = {}, _a[cookie[0]] = decodeURIComponent(cookie[1]), _a));
            }), {})[key];
        }
    };
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    CookiesService.prototype.cookieWriter = /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (name, value, options) {
        this.cookieString = this.buildCookieString(name, value, options);
    };
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    CookiesService.prototype.buildCookieString = /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (name, value, options) {
        /** @type {?} */
        var defaultOpts = this.defaultOptions || new CookieOptions((/** @type {?} */ ({ path: '/' })));
        /** @type {?} */
        var opts = this.mergeOptions(defaultOpts, options);
        /** @type {?} */
        var expires = opts.expires;
        if (!value) {
            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
            value = '';
        }
        if (typeof expires === 'string') {
            expires = new Date(expires);
        }
        /** @type {?} */
        var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        str += opts.path ? ";path=" + opts.path : '';
        str += opts.domain ? ";domain=" + opts.domain : '';
        str += expires ? ";expires=" + expires.toUTCString() : '';
        str += opts.secure ? ';secure' : '';
        /** @type {?} */
        var cookieLength = str.length + 1;
        if (cookieLength > 4096) {
            console.log("Cookie '" + name + "' possibly not set or overflowed because it was too large (" + cookieLength + " > 4096 bytes)!");
        }
        return str;
    };
    /**
     * @private
     * @param {?} defaultOpts
     * @param {?=} providedOpts
     * @return {?}
     */
    CookiesService.prototype.mergeOptions = /**
     * @private
     * @param {?} defaultOpts
     * @param {?=} providedOpts
     * @return {?}
     */
    function (defaultOpts, providedOpts) {
        /** @type {?} */
        var newOpts = defaultOpts;
        if (providedOpts) {
            return newOpts.merge(new CookieOptions(providedOpts));
        }
        return newOpts;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CookiesService.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cookieReader(key);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    CookiesService.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (key, value, options) {
        this.cookieWriter(key, value, options);
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    CookiesService.prototype.remove = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        this.cookieWriter(key, undefined, options);
    };
    CookiesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CookiesService.ctorParameters = function () { return [
        { type: CookieOptions, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ CookiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookiesService_Factory() { return new CookiesService(i0.ɵɵinject(CookieOptions, 8)); }, token: CookiesService, providedIn: "root" });
    return CookiesService;
}());
export { CookiesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CookiesService.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,