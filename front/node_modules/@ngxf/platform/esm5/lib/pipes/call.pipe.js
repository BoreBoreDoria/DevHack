/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/call.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
import { ChangeDetectorRef, Pipe } from '@angular/core';
/**
 * @template C
 */
var CallPipe = /** @class */ (function () {
    // with Ivy you can inject EmbeddedViewRef directly
    function CallPipe(cd) {
        this.cd = cd;
        this.context = ((/** @type {?} */ (this.cd))).context;
    }
    /**
     * @template M
     * @param {?} param
     * @param {?} fn
     * @param {...?} params
     * @return {?}
     */
    CallPipe.prototype.transform = /**
     * @template M
     * @param {?} param
     * @param {?} fn
     * @param {...?} params
     * @return {?}
     */
    function (param, fn) {
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        return fn.apply(this.context, __spread([param], params));
    };
    CallPipe.decorators = [
        { type: Pipe, args: [{ name: 'call' },] }
    ];
    /** @nocollapse */
    CallPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return CallPipe;
}());
export { CallPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CallPipe.prototype.context;
    /**
     * @type {?}
     * @private
     */
    CallPipe.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvcGlwZXMvY2FsbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7OztBQU14RjtJQUlFLG1EQUFtRDtJQUNuRCxrQkFBb0IsRUFBcUI7UUFBckIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLG1CQUFBLElBQUksQ0FBQyxFQUFFLEVBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDekQsQ0FBQzs7Ozs7Ozs7SUFFRCw0QkFBUzs7Ozs7OztJQUFULFVBQStCLEtBQWMsRUFBRSxFQUFLO1FBQUUsZ0JBQWtCO2FBQWxCLFVBQWtCLEVBQWxCLHFCQUFrQixFQUFsQixJQUFrQjtZQUFsQiwrQkFBa0I7O1FBQ3RFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxZQUFHLEtBQUssR0FBSyxNQUFNLEVBQUUsQ0FBQztJQUNwRCxDQUFDOztnQkFYRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFOzs7O2dCQU5iLGlCQUFpQjs7SUFrQjFCLGVBQUM7Q0FBQSxBQVpELElBWUM7U0FYWSxRQUFROzs7Ozs7SUFDbkIsMkJBQTRCOzs7OztJQUdoQixzQkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRW1iZWRkZWRWaWV3UmVmLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbnR5cGUgTWV0aG9kPFQgPSBhbnk+ID0gKHRoaXM6IFQsIC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG50eXBlIEhlYWQ8VCBleHRlbmRzIE1ldGhvZD4gPSBQYXJhbWV0ZXJzPFQ+WzBdO1xudHlwZSBUYWlsPFQgZXh0ZW5kcyBNZXRob2Q+ID0gVCBleHRlbmRzIChmaXJzdDogYW55LCAuLi5yZXN0OiBpbmZlciBSKSA9PiBhbnkgPyBSIDogbmV2ZXI7XG5cbkBQaXBlKHsgbmFtZTogJ2NhbGwnIH0pXG5leHBvcnQgY2xhc3MgQ2FsbFBpcGU8Qz4gaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb250ZXh0OiBDO1xuXG4gIC8vIHdpdGggSXZ5IHlvdSBjYW4gaW5qZWN0IEVtYmVkZGVkVmlld1JlZiBkaXJlY3RseVxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMuY29udGV4dCA9ICh0aGlzLmNkIGFzIEVtYmVkZGVkVmlld1JlZjxDPikuY29udGV4dDtcbiAgfVxuXG4gIHRyYW5zZm9ybTxNIGV4dGVuZHMgTWV0aG9kPEM+PihwYXJhbTogSGVhZDxNPiwgZm46IE0sIC4uLnBhcmFtczogVGFpbDxNPik6IFJldHVyblR5cGU8TT4ge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLmNvbnRleHQsIFtwYXJhbSwgLi4ucGFyYW1zXSk7XG4gIH1cbn1cbiJdfQ==