/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/console.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
import { Inject, InjectionToken, Pipe } from '@angular/core';
/**
 * @return {?}
 */
export function consoleFactory() {
    return console;
}
/** @type {?} */
export var CONSOLE = new InjectionToken('Console', {
    providedIn: 'root',
    factory: consoleFactory
});
/** @type {?} */
export var skipValueOperators = [
    'count',
    'markTimeline',
    'time',
    'timeEnd',
    'profile',
    'profileEnd',
    'timeline',
    'timelineEnd',
    'timeStamp',
    'group',
    'groupCollapsed'
];
var ConsolePipe = /** @class */ (function () {
    function ConsolePipe(console) {
        this.console = console;
    }
    /**
     * @template T
     * @param {?} message
     * @param {?=} logLevel
     * @param {...?} optionalParams
     * @return {?}
     */
    ConsolePipe.prototype.transform = /**
     * @template T
     * @param {?} message
     * @param {?=} logLevel
     * @param {...?} optionalParams
     * @return {?}
     */
    function (message, logLevel) {
        var _a;
        if (logLevel === void 0) { logLevel = 'log'; }
        var optionalParams = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            optionalParams[_i - 2] = arguments[_i];
        }
        /** @type {?} */
        var params;
        if (skipValueOperators.includes(logLevel)) {
            if (optionalParams.length > 0) {
                params = optionalParams;
            }
            else {
                params = [message];
            }
        }
        else {
            params = __spread([message], optionalParams);
        }
        (_a = this.console)[logLevel].apply(_a, __spread(params));
        return message;
    };
    ConsolePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'console'
                },] }
    ];
    /** @nocollapse */
    ConsolePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONSOLE,] }] }
    ]; };
    return ConsolePipe;
}());
export { ConsolePipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConsolePipe.prototype.console;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvcGlwZXMvY29uc29sZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7Ozs7QUFFNUUsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQzs7QUFFRCxNQUFNLEtBQU8sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFVLFNBQVMsRUFBRTtJQUM1RCxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsY0FBYztDQUN4QixDQUFDOztBQUVGLE1BQU0sS0FBTyxrQkFBa0IsR0FBRztJQUNoQyxPQUFPO0lBQ1AsY0FBYztJQUNkLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFlBQVk7SUFDWixVQUFVO0lBQ1YsYUFBYTtJQUNiLFdBQVc7SUFDWCxPQUFPO0lBQ1AsZ0JBQWdCO0NBQ2pCO0FBRUQ7SUFLRSxxQkFBcUMsT0FBWTtRQUFaLFlBQU8sR0FBUCxPQUFPLENBQUs7SUFBRyxDQUFDOzs7Ozs7OztJQWtEckQsK0JBQVM7Ozs7Ozs7SUFBVCxVQUFhLE9BQW1CLEVBQUUsUUFBK0I7O1FBQS9CLHlCQUFBLEVBQUEsZ0JBQStCO1FBQUUsd0JBQXdCO2FBQXhCLFVBQXdCLEVBQXhCLHFCQUF3QixFQUF4QixJQUF3QjtZQUF4Qix1Q0FBd0I7OztZQUNyRixNQUFNO1FBQ1YsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDekMsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDN0IsTUFBTSxHQUFHLGNBQWMsQ0FBQzthQUN6QjtpQkFBTTtnQkFDTCxNQUFNLEdBQUcsQ0FBRSxPQUFPLENBQUUsQ0FBQzthQUN0QjtTQUNGO2FBQU07WUFDTCxNQUFNLGFBQUssT0FBTyxHQUFLLGNBQWMsQ0FBRSxDQUFDO1NBQ3pDO1FBRUQsQ0FBQSxLQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBRSxRQUFRLENBQUUsb0JBQUksTUFBTSxHQUFFO1FBQ3BDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7O2dCQXJFRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFNBQVM7aUJBQ2hCOzs7O2dEQUdjLE1BQU0sU0FBQyxPQUFPOztJQWtFN0Isa0JBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQXBFWSxXQUFXOzs7Ozs7SUFFViw4QkFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGlvblRva2VuLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlRmFjdG9yeSgpIHtcbiAgcmV0dXJuIGNvbnNvbGU7XG59XG5cbmV4cG9ydCBjb25zdCBDT05TT0xFID0gbmV3IEluamVjdGlvblRva2VuPENvbnNvbGU+KCdDb25zb2xlJywge1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIGZhY3Rvcnk6IGNvbnNvbGVGYWN0b3J5XG59KTtcblxuZXhwb3J0IGNvbnN0IHNraXBWYWx1ZU9wZXJhdG9ycyA9IFtcbiAgJ2NvdW50JyxcbiAgJ21hcmtUaW1lbGluZScsXG4gICd0aW1lJyxcbiAgJ3RpbWVFbmQnLFxuICAncHJvZmlsZScsXG4gICdwcm9maWxlRW5kJyxcbiAgJ3RpbWVsaW5lJyxcbiAgJ3RpbWVsaW5lRW5kJyxcbiAgJ3RpbWVTdGFtcCcsXG4gICdncm91cCcsXG4gICdncm91cENvbGxhcHNlZCdcbl07XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2NvbnNvbGUnXG59KVxuZXhwb3J0IGNsYXNzIENvbnNvbGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChDT05TT0xFKSBwcml2YXRlIGNvbnNvbGU6IGFueSkge31cblxuICAvLyBpbmZvKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KG1lc3NhZ2U6IFQsIGxvZ0xldmVsOiAnaW5mbycsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IFQ7XG4gIC8vIGxvZyhtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtcyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPihtZXNzYWdlOiBULCBsb2dMZXZlbDogJ2xvZycsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IFQ7XG4gIC8vIHdhcm4obWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXMpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4obWVzc2FnZTogVCwgbG9nTGV2ZWw6ICd3YXJuJywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gZXhjZXB0aW9uKG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KG1lc3NhZ2U6IFQsIGxvZ0xldmVsOiAnZXhjZXB0aW9uJywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gZXJyb3IobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXMpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4obWVzc2FnZTogVCwgbG9nTGV2ZWw6ICdlcnJvcicsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IFQ7XG4gIC8vIGRlYnVnKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPihtZXNzYWdlOiBULCBsb2dMZXZlbDogJ2RlYnVnJywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gdHJhY2UobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KG1lc3NhZ2U6IFQsIGxvZ0xldmVsOiAndHJhY2UnLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyBkaXIob2JqOiBhbnksIG9wdGlvbnM/OiBOb2RlSlMuSW5zcGVjdE9wdGlvbnMpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4ob2JqOiBULCBsb2dMZXZlbDogJ2RpcicvKiwgb3B0aW9ucz86IE5vZGVKUy5JbnNwZWN0T3B0aW9ucyovKTogVDtcbiAgLy8gZGlyeG1sKHZhbHVlOiBhbnkpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAnZGlyeG1sJyk6IFQ7XG4gIC8vIHRhYmxlKC4uLnRhYnVsYXJEYXRhKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ3RhYmxlJyk6IFQ7XG4gIC8vIGFzc2VydCh2YWx1ZTogYW55LCBtZXNzYWdlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtcyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICd0cmFjZScsIG1lc3NhZ2U6IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogVDtcbiAgLy8gY291bnQobGFiZWw/OiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAnY291bnQnLCBsYWJlbD86IHN0cmluZyk6IFQ7XG4gIC8vIG1hcmtUaW1lbGluZShsYWJlbD86IHN0cmluZyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICdtYXJrVGltZWxpbmUnLCBsYWJlbD86IHN0cmluZyk6IFQ7XG4gIC8vIHRpbWUobGFiZWw6IHN0cmluZyk6IHZvaWQ7XG4gIHRyYW5zZm9ybTxUPih2YWx1ZTogVCwgbG9nTGV2ZWw6ICd0aW1lJywgbGFiZWw/OiBzdHJpbmcpOiBUO1xuICAvLyB0aW1lRW5kKGxhYmVsOiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAndGltZUVuZCcsIGxhYmVsPzogc3RyaW5nKTogVDtcbiAgLy8gcHJvZmlsZShyZXBvcnROYW1lPzogc3RyaW5nKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ3Byb2ZpbGUnLCByZXBvcnROYW1lPzogc3RyaW5nKTogVDtcbiAgLy8gcHJvZmlsZUVuZChyZXBvcnROYW1lPzogc3RyaW5nKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ3Byb2ZpbGVFbmQnLCByZXBvcnROYW1lPzogc3RyaW5nKTogVDtcbiAgLy8gdGltZWxpbmUobGFiZWw/OiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAndGltZWxpbmUnLCBsYWJlbD86IHN0cmluZyk6IFQ7XG4gIC8vIHRpbWVsaW5lRW5kKGxhYmVsPzogc3RyaW5nKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ3RpbWVsaW5lRW5kJywgbGFiZWw/OiBzdHJpbmcpOiBUO1xuICAvLyB0aW1lU3RhbXAobGFiZWw/OiBzdHJpbmcpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAndGltZVN0YW1wJywgbGFiZWw/OiBzdHJpbmcpOiBUO1xuICAvLyBncm91cChncm91cFRpdGxlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAnZ3JvdXAnLCBncm91cFRpdGxlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyBncm91cENvbGxhcHNlZChncm91cFRpdGxlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAnZ3JvdXBDb2xsYXBzZWQnLCBncm91cFRpdGxlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBUO1xuICAvLyBncm91cEVuZCgpOiB2b2lkO1xuICB0cmFuc2Zvcm08VD4odmFsdWU6IFQsIGxvZ0xldmVsOiAnZ3JvdXBFbmQnKTogVDtcbiAgLy8gY2xlYXIoKTogdm9pZDtcbiAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBULCBsb2dMZXZlbDogJ2NsZWFyJyk6IFQ7XG4gIHRyYW5zZm9ybTxUPihtZXNzYWdlOiBzdHJpbmcgfCBULCBsb2dMZXZlbDoga2V5b2YgQ29uc29sZSA9ICdsb2cnLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBzdHJpbmcgfCBUIHtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGlmIChza2lwVmFsdWVPcGVyYXRvcnMuaW5jbHVkZXMobG9nTGV2ZWwpKSB7XG4gICAgICBpZiAob3B0aW9uYWxQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBwYXJhbXMgPSBvcHRpb25hbFBhcmFtcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcyA9IFsgbWVzc2FnZSBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMgPSBbIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zIF07XG4gICAgfVxuXG4gICAgdGhpcy5jb25zb2xlWyBsb2dMZXZlbCBdKC4uLnBhcmFtcyk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxufVxuIl19