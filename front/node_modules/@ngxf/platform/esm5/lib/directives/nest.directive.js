/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/nest.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function NestContext() { }
if (false) {
    /** @type {?} */
    NestContext.prototype.$implicit;
    /** @type {?} */
    NestContext.prototype.nest;
}
var NestDirective = /** @class */ (function () {
    function NestDirective(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = { $implicit: null, nest: null };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NestDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('nest' in changes) {
            this.onTemplatesDidChanged(this.nest, changes.nest.previousValue);
        }
        if ('nestOf' in changes) {
            this.onTemplatesDidChanged(this.nestOf, changes.nestOf.previousValue);
        }
    };
    /**
     * @return {?}
     */
    NestDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    NestDirective.prototype.onTemplatesDidChanged = /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    function (current, previous) {
        if (!this.context.$implicit) {
            return current && this.create(current);
        }
        if (current !== previous) {
            this.destroy();
            this.onTemplatesDidChanged(current, null);
        }
    };
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    NestDirective.prototype.create = /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    function (templateRefs) {
        this.context.$implicit = this.context.nest = new ComposedView(this.viewContainerRef, templateRefs);
        this.viewRef =
            this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
    };
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    NestDirective.prototype.update = /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    function (templateRefs) {
        this.context.$implicit = this.context.nest = new ComposedView(this.viewContainerRef, templateRefs);
        this.viewRef.markForCheck();
    };
    /**
     * @private
     * @return {?}
     */
    NestDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.viewContainerRef.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    NestDirective.decorators = [
        { type: Directive, args: [{ selector: '[nest]' },] }
    ];
    /** @nocollapse */
    NestDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    NestDirective.propDecorators = {
        nest: [{ type: Input }],
        nestOf: [{ type: Input }]
    };
    return NestDirective;
}());
export { NestDirective };
if (false) {
    /** @type {?} */
    NestDirective.prototype.nest;
    /** @type {?} */
    NestDirective.prototype.nestOf;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NestDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL25lc3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBbUIsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEksT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRWhFLDBCQUdDOzs7SUFGQyxnQ0FBZTs7SUFDZiwyQkFBVTs7QUFHWjtJQVNFLHVCQUNVLFdBQXFDLEVBQ3JDLGdCQUFrQztRQURsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFDckMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUxwQyxZQUFPLEdBQWdCLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFNNUQsQ0FBQzs7Ozs7SUFFSixtQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkU7UUFFRCxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQUU7WUFDdkIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN2RTtJQUNILENBQUM7Ozs7SUFFRCxtQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7Ozs7OztJQUVPLDZDQUFxQjs7Ozs7O0lBQTdCLFVBQThCLE9BQW1DLEVBQUUsUUFBb0M7UUFDckcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQzNCLE9BQU8sT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7UUFFRCxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7Ozs7OztJQUVPLDhCQUFNOzs7OztJQUFkLFVBQWUsWUFBd0M7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQWMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxPQUFPO1lBQ1YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdFLENBQUM7Ozs7OztJQUVPLDhCQUFNOzs7OztJQUFkLFVBQWUsWUFBd0M7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQWMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFTywrQkFBTzs7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7Z0JBeERGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7Ozs7Z0JBUmdELFdBQVc7Z0JBQUUsZ0JBQWdCOzs7dUJBVzNHLEtBQUs7eUJBQ0wsS0FBSzs7SUFxRFIsb0JBQUM7Q0FBQSxBQXpERCxJQXlEQztTQXhEWSxhQUFhOzs7SUFFeEIsNkJBQTBDOztJQUMxQywrQkFBNEM7Ozs7O0lBRTVDLGdDQUErRDs7Ozs7SUFDL0QsZ0NBQThDOzs7OztJQUc1QyxvQ0FBNkM7Ozs7O0lBQzdDLHlDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb3NlZFZpZXcgfSBmcm9tICcuLi90b29scy9yZWNvbXBvc2UvY29tcG9zZWQudmlldyc7XG5cbmludGVyZmFjZSBOZXN0Q29udGV4dCB7XG4gICRpbXBsaWNpdDogYW55O1xuICBuZXN0OiBhbnk7XG59XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZXN0XScgfSlcbmV4cG9ydCBjbGFzcyBOZXN0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIG5lc3Q6IFRlbXBsYXRlUmVmPE5lc3RDb250ZXh0PltdO1xuICBASW5wdXQoKSBuZXN0T2Y6IFRlbXBsYXRlUmVmPE5lc3RDb250ZXh0PltdO1xuXG4gIHByaXZhdGUgY29udGV4dDogTmVzdENvbnRleHQgPSB7ICRpbXBsaWNpdDogbnVsbCwgbmVzdDogbnVsbCB9O1xuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxOZXN0Q29udGV4dD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZlxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICgnbmVzdCcgaW4gY2hhbmdlcykge1xuICAgICAgdGhpcy5vblRlbXBsYXRlc0RpZENoYW5nZWQodGhpcy5uZXN0LCBjaGFuZ2VzLm5lc3QucHJldmlvdXNWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCduZXN0T2YnIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMub25UZW1wbGF0ZXNEaWRDaGFuZ2VkKHRoaXMubmVzdE9mLCBjaGFuZ2VzLm5lc3RPZi5wcmV2aW91c1ZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHByaXZhdGUgb25UZW1wbGF0ZXNEaWRDaGFuZ2VkKGN1cnJlbnQ6IFRlbXBsYXRlUmVmPE5lc3RDb250ZXh0PltdLCBwcmV2aW91czogVGVtcGxhdGVSZWY8TmVzdENvbnRleHQ+W10pIHtcbiAgICBpZiAoIXRoaXMuY29udGV4dC4kaW1wbGljaXQpIHtcbiAgICAgIHJldHVybiBjdXJyZW50ICYmIHRoaXMuY3JlYXRlKGN1cnJlbnQpO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50ICE9PSBwcmV2aW91cykge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICB0aGlzLm9uVGVtcGxhdGVzRGlkQ2hhbmdlZChjdXJyZW50LCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZSh0ZW1wbGF0ZVJlZnM6IFRlbXBsYXRlUmVmPE5lc3RDb250ZXh0PltdKSB7XG4gICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdCA9IHRoaXMuY29udGV4dC5uZXN0ID0gbmV3IENvbXBvc2VkVmlldzxOZXN0Q29udGV4dD4odGhpcy52aWV3Q29udGFpbmVyUmVmLCB0ZW1wbGF0ZVJlZnMpO1xuICAgIHRoaXMudmlld1JlZiA9XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHRoaXMuY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZSh0ZW1wbGF0ZVJlZnM6IFRlbXBsYXRlUmVmPE5lc3RDb250ZXh0PltdKSB7XG4gICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdCA9IHRoaXMuY29udGV4dC5uZXN0ID0gbmV3IENvbXBvc2VkVmlldzxOZXN0Q29udGV4dD4odGhpcy52aWV3Q29udGFpbmVyUmVmLCB0ZW1wbGF0ZVJlZnMpO1xuICAgIHRoaXMudmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveSgpIHtcbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICBpZiAodGhpcy52aWV3UmVmKSB7XG4gICAgICB0aGlzLnZpZXdSZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==