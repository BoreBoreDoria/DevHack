/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/compose.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function ComposeContext() { }
if (false) {
    /** @type {?} */
    ComposeContext.prototype.$implicit;
    /** @type {?} */
    ComposeContext.prototype.compose;
}
var ComposeDirective = /** @class */ (function () {
    function ComposeDirective(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = { $implicit: null, compose: null };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ComposeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('compose' in changes) {
            this.onTemplateRefsDidChanged(this.compose, changes.compose.previousValue);
        }
        if ('composeOf' in changes) {
            this.onTemplateRefsDidChanged(this.composeOf, changes.composeOf.previousValue);
        }
    };
    /**
     * @return {?}
     */
    ComposeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    ComposeDirective.prototype.onTemplateRefsDidChanged = /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    function (current, previous) {
        if (!this.viewRef) {
            return this.create(current);
        }
        if (this.viewRef.destroyed || current !== previous) {
            this.destroy();
            return this.onTemplateRefsDidChanged(current, null);
        }
    };
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    ComposeDirective.prototype.create = /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    function (templateRefs) {
        this.context.compose = this.context.$implicit = this.createComposeFn(templateRefs);
        this.viewRef =
            this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
    };
    /**
     * @private
     * @return {?}
     */
    ComposeDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.viewRef && !this.viewRef.destroyed) {
            this.viewRef.destroy();
        }
        this.viewRef = null;
    };
    /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    ComposeDirective.prototype.createComposeFn = /**
     * @private
     * @param {?} templateRefs
     * @return {?}
     */
    function (templateRefs) {
        var _this = this;
        return (/**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            return new ComposedView(_this.viewContainerRef, __spread(templateRefs, [templateRef]));
        });
    };
    ComposeDirective.decorators = [
        { type: Directive, args: [{ selector: '[compose]' },] }
    ];
    /** @nocollapse */
    ComposeDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    ComposeDirective.propDecorators = {
        compose: [{ type: Input }],
        composeOf: [{ type: Input }]
    };
    return ComposeDirective;
}());
export { ComposeDirective };
if (false) {
    /** @type {?} */
    ComposeDirective.prototype.compose;
    /** @type {?} */
    ComposeDirective.prototype.composeOf;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    ComposeDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2NvbXBvc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW1CLEtBQUssRUFBdUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQUVoRSw2QkFHQzs7O0lBRkMsbUNBQTBCOztJQUMxQixpQ0FBd0I7O0FBSzFCO0lBU0UsMEJBQ1UsV0FBd0MsRUFDeEMsZ0JBQWtDO1FBRGxDLGdCQUFXLEdBQVgsV0FBVyxDQUE2QjtRQUN4QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBTHBDLFlBQU8sR0FBbUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQU1sRSxDQUFDOzs7OztJQUVKLHNDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLFNBQVMsSUFBSSxPQUFPLEVBQUU7WUFDeEIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUM1RTtRQUVELElBQUksV0FBVyxJQUFJLE9BQU8sRUFBRTtZQUMxQixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0gsQ0FBQzs7OztJQUVELHNDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7Ozs7O0lBRU8sbURBQXdCOzs7Ozs7SUFBaEMsVUFBaUMsT0FBMkIsRUFBRSxRQUE0QjtRQUN4RixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8saUNBQU07Ozs7O0lBQWQsVUFBZSxZQUFZO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLE9BQU87WUFDVixJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQzs7Ozs7SUFFTyxrQ0FBTzs7OztJQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN4QjtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7Ozs7OztJQUVPLDBDQUFlOzs7OztJQUF2QixVQUF3QixZQUFnQztRQUF4RCxpQkFPQztRQU5DOzs7O1FBQU8sVUFBQyxXQUFpRDtZQUN2RCxPQUFPLElBQUksWUFBWSxDQUNyQixLQUFJLENBQUMsZ0JBQWdCLFdBQ2hCLFlBQVksR0FBRSxXQUFXLEdBQy9CLENBQUM7UUFDSixDQUFDLEVBQUM7SUFDSixDQUFDOztnQkE1REYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTs7OztnQkFWNkMsV0FBVztnQkFBRSxnQkFBZ0I7OzswQkFhM0csS0FBSzs0QkFDTCxLQUFLOztJQXlEUix1QkFBQztDQUFBLEFBN0RELElBNkRDO1NBNURZLGdCQUFnQjs7O0lBRTNCLG1DQUFxQzs7SUFDckMscUNBQXVDOzs7OztJQUV2QyxtQ0FBcUU7Ozs7O0lBQ3JFLG1DQUFpRDs7Ozs7SUFHL0MsdUNBQWdEOzs7OztJQUNoRCw0Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVtYmVkZGVkVmlld1JlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9zZWRWaWV3IH0gZnJvbSAnLi4vdG9vbHMvcmVjb21wb3NlL2NvbXBvc2VkLnZpZXcnO1xuXG5pbnRlcmZhY2UgQ29tcG9zZUNvbnRleHQge1xuICAkaW1wbGljaXQ6IENvbXBvc2VGbjxhbnk+O1xuICBjb21wb3NlOiBDb21wb3NlRm48YW55Pjtcbn1cblxudHlwZSBDb21wb3NlRm48VD4gPSAodGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFQ+IHwgQ29tcG9zZWRWaWV3PFQ+KSA9PiBDb21wb3NlZFZpZXc8VD47XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjb21wb3NlXScgfSlcbmV4cG9ydCBjbGFzcyBDb21wb3NlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIGNvbXBvc2U6IFRlbXBsYXRlUmVmPGFueT5bXTtcbiAgQElucHV0KCkgY29tcG9zZU9mOiBUZW1wbGF0ZVJlZjxhbnk+W107XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBDb21wb3NlQ29udGV4dCA9IHsgJGltcGxpY2l0OiBudWxsLCBjb21wb3NlOiBudWxsIH07XG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPENvbXBvc2VDb250ZXh0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxDb21wb3NlQ29udGV4dD4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCdjb21wb3NlJyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLm9uVGVtcGxhdGVSZWZzRGlkQ2hhbmdlZCh0aGlzLmNvbXBvc2UsIGNoYW5nZXMuY29tcG9zZS5wcmV2aW91c1ZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoJ2NvbXBvc2VPZicgaW4gY2hhbmdlcykge1xuICAgICAgdGhpcy5vblRlbXBsYXRlUmVmc0RpZENoYW5nZWQodGhpcy5jb21wb3NlT2YsIGNoYW5nZXMuY29tcG9zZU9mLnByZXZpb3VzVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblRlbXBsYXRlUmVmc0RpZENoYW5nZWQoY3VycmVudDogVGVtcGxhdGVSZWY8YW55PltdLCBwcmV2aW91czogVGVtcGxhdGVSZWY8YW55PltdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShjdXJyZW50KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWV3UmVmLmRlc3Ryb3llZCB8fCBjdXJyZW50ICE9PSBwcmV2aW91cykge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICByZXR1cm4gdGhpcy5vblRlbXBsYXRlUmVmc0RpZENoYW5nZWQoY3VycmVudCwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGUodGVtcGxhdGVSZWZzKSB7XG4gICAgdGhpcy5jb250ZXh0LmNvbXBvc2UgPSB0aGlzLmNvbnRleHQuJGltcGxpY2l0ID0gdGhpcy5jcmVhdGVDb21wb3NlRm4odGVtcGxhdGVSZWZzKTtcbiAgICB0aGlzLnZpZXdSZWYgPVxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB0aGlzLmNvbnRleHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnZpZXdSZWYgJiYgIXRoaXMudmlld1JlZi5kZXN0cm95ZWQpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQ29tcG9zZUZuKHRlbXBsYXRlUmVmczogVGVtcGxhdGVSZWY8YW55PltdKTogQ29tcG9zZUZuPGFueT4ge1xuICAgIHJldHVybiAodGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4gfCBDb21wb3NlZFZpZXc8YW55Pik6IENvbXBvc2VkVmlldzxhbnk+ID0+IHtcbiAgICAgIHJldHVybiBuZXcgQ29tcG9zZWRWaWV3PGFueT4oXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgWyAuLi50ZW1wbGF0ZVJlZnMsIHRlbXBsYXRlUmVmIF1cbiAgICAgICk7XG4gICAgfTtcbiAgfVxufVxuIl19