/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/repeat.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
var RepeatContext = /** @class */ (function () {
    function RepeatContext() {
    }
    return RepeatContext;
}());
export { RepeatContext };
if (false) {
    /** @type {?} */
    RepeatContext.prototype.$implicit;
    /** @type {?} */
    RepeatContext.prototype.repeat;
    /** @type {?} */
    RepeatContext.prototype.index;
}
var RepeatDirective = /** @class */ (function () {
    function RepeatDirective(viewContainerRef, templateRef) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
    }
    Object.defineProperty(RepeatDirective.prototype, "count", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var count = isNumber(this.repeat) ? this.repeat :
                isNumber(this.repeatOf) ? this.repeatOf : 0;
            return Math.max(count, 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RepeatDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('repeat' in changes || 'repeatOf' in changes) {
            this.onRepeatChanged(this.count);
        }
    };
    /**
     * @return {?}
     */
    RepeatDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.viewContainerRef.clear();
    };
    /**
     * @private
     * @param {?} count
     * @return {?}
     */
    RepeatDirective.prototype.onRepeatChanged = /**
     * @private
     * @param {?} count
     * @return {?}
     */
    function (count) {
        /** When we need to create new items */
        for (var i = this.viewContainerRef.length; i < count; i++) {
            this.viewContainerRef.createEmbeddedView(this.templateRef, {
                $implicit: i, index: i, repeat: i
            }, i);
        }
        /** When we need to remove old items */
        for (var i = this.viewContainerRef.length; i > count; i--) {
            this.viewContainerRef.remove(i - 1);
        }
    };
    RepeatDirective.decorators = [
        { type: Directive, args: [{ selector: '[repeat]' },] }
    ];
    /** @nocollapse */
    RepeatDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    RepeatDirective.propDecorators = {
        repeat: [{ type: Input }],
        repeatOf: [{ type: Input }]
    };
    return RepeatDirective;
}());
export { RepeatDirective };
if (false) {
    /** @type {?} */
    RepeatDirective.prototype.repeat;
    /** @type {?} */
    RepeatDirective.prototype.repeatOf;
    /**
     * @type {?}
     * @private
     */
    RepeatDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    RepeatDirective.prototype.templateRef;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === 'number';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVwZWF0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckg7SUFBQTtJQUlBLENBQUM7SUFBRCxvQkFBQztBQUFELENBQUMsQUFKRCxJQUlDOzs7O0lBSEMsa0NBQWtCOztJQUNsQiwrQkFBZTs7SUFDZiw4QkFBYzs7QUFHaEI7SUFhRSx5QkFDVSxnQkFBa0MsRUFDbEMsV0FBdUM7UUFEdkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBNEI7SUFDOUMsQ0FBQztJQVZKLHNCQUFJLGtDQUFLOzs7O1FBQVQ7O2dCQUNRLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2pELFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFN0MsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTs7Ozs7SUFPRCxxQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLEVBQUU7WUFDaEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDOzs7O0lBRUQscUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7OztJQUVPLHlDQUFlOzs7OztJQUF2QixVQUF3QixLQUFhO1FBQ25DLHVDQUF1QztRQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDekQsU0FBUyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDUDtRQUVELHVDQUF1QztRQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7O2dCQXhDRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFOzs7O2dCQVIwQyxnQkFBZ0I7Z0JBQTdCLFdBQVc7Ozt5QkFXeEUsS0FBSzsyQkFDTCxLQUFLOztJQXNDUixzQkFBQztDQUFBLEFBMUNELElBMENDO1NBekNZLGVBQWU7OztJQUUxQixpQ0FBd0I7O0lBQ3hCLG1DQUEwQjs7Ozs7SUFVeEIsMkNBQTBDOzs7OztJQUMxQyxzQ0FBK0M7Ozs7OztBQTZCbkQsU0FBUyxRQUFRLENBQUMsS0FBYztJQUM5QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNuQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBSZXBlYXRDb250ZXh0IHtcbiAgJGltcGxpY2l0OiBudW1iZXI7XG4gIHJlcGVhdDogbnVtYmVyO1xuICBpbmRleDogbnVtYmVyO1xufVxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbcmVwZWF0XScgfSlcbmV4cG9ydCBjbGFzcyBSZXBlYXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgcmVwZWF0OiBudW1iZXI7XG4gIEBJbnB1dCgpIHJlcGVhdE9mOiBudW1iZXI7XG5cbiAgZ2V0IGNvdW50KCk6IG51bWJlciB7XG4gICAgY29uc3QgY291bnQgPSBpc051bWJlcih0aGlzLnJlcGVhdCkgPyB0aGlzLnJlcGVhdCA6XG4gICAgICBpc051bWJlcih0aGlzLnJlcGVhdE9mKSA/IHRoaXMucmVwZWF0T2YgOiAwO1xuXG4gICAgcmV0dXJuIE1hdGgubWF4KGNvdW50LCAwKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxSZXBlYXRDb250ZXh0PlxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICgncmVwZWF0JyBpbiBjaGFuZ2VzIHx8ICdyZXBlYXRPZicgaW4gY2hhbmdlcykge1xuICAgICAgdGhpcy5vblJlcGVhdENoYW5nZWQodGhpcy5jb3VudCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XG4gIH1cblxuICBwcml2YXRlIG9uUmVwZWF0Q2hhbmdlZChjb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgLyoqIFdoZW4gd2UgbmVlZCB0byBjcmVhdGUgbmV3IGl0ZW1zICovXG4gICAgZm9yIChsZXQgaSA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHtcbiAgICAgICAgJGltcGxpY2l0OiBpLCBpbmRleDogaSwgcmVwZWF0OiBpXG4gICAgICB9LCBpKTtcbiAgICB9XG5cbiAgICAvKiogV2hlbiB3ZSBuZWVkIHRvIHJlbW92ZSBvbGQgaXRlbXMgKi9cbiAgICBmb3IgKGxldCBpID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmxlbmd0aDsgaSA+IGNvdW50OyBpLS0pIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5yZW1vdmUoaSAtIDEpO1xuICAgIH1cbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgbnVtYmVyIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG4iXX0=