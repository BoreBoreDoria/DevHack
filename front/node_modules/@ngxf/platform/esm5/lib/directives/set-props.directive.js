/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/set-props.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
/**
 * @record
 */
function SetPropsContext() { }
if (false) {
    /** @type {?} */
    SetPropsContext.prototype.$implicit;
    /** @type {?} */
    SetPropsContext.prototype.setProps;
}
var SetPropsDirective = /** @class */ (function () {
    function SetPropsDirective(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = { $implicit: null, setProps: null };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SetPropsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('setProps' in changes) {
            this.onPropsDidChanged(this.setProps, changes.setProps.previousValue);
        }
    };
    /**
     * @return {?}
     */
    SetPropsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    SetPropsDirective.prototype.onPropsDidChanged = /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    function (current, previous) {
        if (!this.context.$implicit) {
            return current && this.create(current);
        }
        if (current !== previous) {
            this.destroy();
            return this.onPropsDidChanged(current, null);
        }
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    SetPropsDirective.prototype.create = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        this.composedView = new ComposedView(this.viewContainerRef);
        this.composedView.createEmbeddedView(this.context);
        this.composedView.updateContext((/**
         * @param {?} context
         * @param {?} parent
         * @return {?}
         */
        function (context, parent) {
            return Object.assign(context, parent, props);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SetPropsDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.viewContainerRef.clear();
        if (this.composedView) {
            this.composedView.destroy();
            this.composedView = null;
        }
    };
    SetPropsDirective.decorators = [
        { type: Directive, args: [{ selector: '[setProps]' },] }
    ];
    /** @nocollapse */
    SetPropsDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    SetPropsDirective.propDecorators = {
        setProps: [{ type: Input }]
    };
    return SetPropsDirective;
}());
export { SetPropsDirective };
if (false) {
    /** @type {?} */
    SetPropsDirective.prototype.setProps;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.composedView;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SetPropsDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LXByb3BzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hmL3BsYXRmb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvc2V0LXByb3BzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRWhFLDhCQUdDOzs7SUFGQyxvQ0FBZTs7SUFDZixtQ0FBYzs7QUFHaEI7SUFRRSwyQkFDVSxXQUF5QyxFQUN6QyxnQkFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQThCO1FBQ3pDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMcEMsWUFBTyxHQUFvQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0lBTXBFLENBQUM7Ozs7O0lBRUosdUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksVUFBVSxJQUFJLE9BQU8sRUFBRTtZQUN6QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0gsQ0FBQzs7OztJQUVELHVDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7Ozs7O0lBRU8sNkNBQWlCOzs7Ozs7SUFBekIsVUFBMEIsT0FBdUMsRUFBRSxRQUF3QztRQUN6RyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDM0IsT0FBTyxPQUFPLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUVELElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN4QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDOzs7Ozs7SUFFTyxrQ0FBTTs7Ozs7SUFBZCxVQUFlLEtBQVU7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBa0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhOzs7OztRQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDOUMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVPLG1DQUFPOzs7O0lBQWY7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDMUI7SUFDSCxDQUFDOztnQkFoREYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTs7OztnQkFSMkIsV0FBVztnQkFBRSxnQkFBZ0I7OzsyQkFXMUYsS0FBSzs7SUE4Q1Isd0JBQUM7Q0FBQSxBQWpERCxJQWlEQztTQWhEWSxpQkFBaUI7OztJQUU1QixxQ0FBdUI7Ozs7O0lBRXZCLG9DQUF1RTs7Ozs7SUFDdkUseUNBQW9EOzs7OztJQUdsRCx3Q0FBaUQ7Ozs7O0lBQ2pELDZDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9zZWRWaWV3IH0gZnJvbSAnLi4vdG9vbHMvcmVjb21wb3NlL2NvbXBvc2VkLnZpZXcnO1xuXG5pbnRlcmZhY2UgU2V0UHJvcHNDb250ZXh0IHtcbiAgJGltcGxpY2l0OiBhbnk7XG4gIHNldFByb3BzOiBhbnk7XG59XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tzZXRQcm9wc10nIH0pXG5leHBvcnQgY2xhc3MgU2V0UHJvcHNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgc2V0UHJvcHM6IGFueTtcblxuICBwcml2YXRlIGNvbnRleHQ6IFNldFByb3BzQ29udGV4dCA9IHsgJGltcGxpY2l0OiBudWxsLCBzZXRQcm9wczogbnVsbCB9O1xuICBwcml2YXRlIGNvbXBvc2VkVmlldzogQ29tcG9zZWRWaWV3PFNldFByb3BzQ29udGV4dD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8U2V0UHJvcHNDb250ZXh0PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoJ3NldFByb3BzJyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLm9uUHJvcHNEaWRDaGFuZ2VkKHRoaXMuc2V0UHJvcHMsIGNoYW5nZXMuc2V0UHJvcHMucHJldmlvdXNWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwcml2YXRlIG9uUHJvcHNEaWRDaGFuZ2VkKGN1cnJlbnQ6IFRlbXBsYXRlUmVmPFNldFByb3BzQ29udGV4dD5bXSwgcHJldmlvdXM6IFRlbXBsYXRlUmVmPFNldFByb3BzQ29udGV4dD5bXSkge1xuICAgIGlmICghdGhpcy5jb250ZXh0LiRpbXBsaWNpdCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnQgJiYgdGhpcy5jcmVhdGUoY3VycmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnQgIT09IHByZXZpb3VzKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgIHJldHVybiB0aGlzLm9uUHJvcHNEaWRDaGFuZ2VkKGN1cnJlbnQsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlKHByb3BzOiBhbnkpIHtcbiAgICB0aGlzLmNvbXBvc2VkVmlldyA9IG5ldyBDb21wb3NlZFZpZXc8U2V0UHJvcHNDb250ZXh0Pih0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMuY29tcG9zZWRWaWV3LmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmNvbnRleHQpO1xuICAgIHRoaXMuY29tcG9zZWRWaWV3LnVwZGF0ZUNvbnRleHQoKGNvbnRleHQsIHBhcmVudCkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29udGV4dCwgcGFyZW50LCBwcm9wcyk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGRlc3Ryb3koKSB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMuY29tcG9zZWRWaWV3KSB7XG4gICAgICB0aGlzLmNvbXBvc2VkVmlldy5kZXN0cm95KCk7XG4gICAgICB0aGlzLmNvbXBvc2VkVmlldyA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iXX0=