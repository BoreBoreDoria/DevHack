/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/keep-alive.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __values } from "tslib";
import { Directive, Injectable, TemplateRef, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
/** @enum {number} */
var KeepAliveFlags = {
    Detached: 0,
    Attached: 1,
};
export { KeepAliveFlags };
var ViewRefAttachable = /** @class */ (function () {
    function ViewRefAttachable(viewRef) {
        this.flag = 0 /* Detached */;
        this.viewRef = viewRef;
    }
    Object.defineProperty(ViewRefAttachable.prototype, "attached", {
        get: /**
         * @return {?}
         */
        function () {
            return this.flag === 1 /* Attached */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRefAttachable.prototype, "detached", {
        get: /**
         * @return {?}
         */
        function () {
            return this.flag === 0 /* Detached */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    ViewRefAttachable.prototype.attachToViewContainerRef = /**
     * @param {?} viewContainer
     * @return {?}
     */
    function (viewContainer) {
        if (this.viewContainerRef || this.attached) {
            throw new TypeError("You can't use *keepAlive with *ngFor:\n  <ng-container *ngFor=\"...\">\n    <!-- Wrong! -->\n    <ng-container *keepAlive></ng-container>\n  </ng-container>\n\nviewRef already attached to viewContainerRef");
        }
        this.flag = 1 /* Attached */;
        (this.viewContainerRef = viewContainer).insert(this.viewRef);
    };
    /**
     * @return {?}
     */
    ViewRefAttachable.prototype.detachFromViewContainerRef = /**
     * @return {?}
     */
    function () {
        if (!this.viewContainerRef || this.detached) {
            throw new TypeError('viewRef already detached from viewContainerRef');
        }
        this.flag = 0 /* Detached */;
        this.viewContainerRef.detach(this.viewContainerRef.indexOf(this.viewRef));
        delete this.viewContainerRef;
    };
    /**
     * @return {?}
     */
    ViewRefAttachable.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.viewRef.destroy();
    };
    return ViewRefAttachable;
}());
export { ViewRefAttachable };
if (false) {
    /** @type {?} */
    ViewRefAttachable.prototype.viewRef;
    /** @type {?} */
    ViewRefAttachable.prototype.flag;
    /** @type {?} */
    ViewRefAttachable.prototype.viewContainerRef;
}
var KeepAliveConfig = /** @class */ (function () {
    function KeepAliveConfig() {
        this.limit = 50;
    }
    KeepAliveConfig.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ KeepAliveConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveConfig_Factory() { return new KeepAliveConfig(); }, token: KeepAliveConfig, providedIn: "root" });
    return KeepAliveConfig;
}());
export { KeepAliveConfig };
if (false) {
    /** @type {?} */
    KeepAliveConfig.prototype.limit;
}
var KeepAliveGC = /** @class */ (function () {
    function KeepAliveGC(config) {
        this.config = config;
    }
    /**
     * @param {?} viewRefs
     * @return {?}
     */
    KeepAliveGC.prototype.collect = /**
     * @param {?} viewRefs
     * @return {?}
     */
    function (viewRefs) {
        var e_1, _a;
        /** @type {?} */
        var limit = this.config.limit > 0 ? this.config.limit : Number.MAX_SAFE_INTEGER;
        try {
            for (var _b = __values(Array.from(viewRefs.entries())), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), templateDef = _d[0], viewRefAttachable = _d[1];
                if (viewRefs.size <= limit) {
                    break;
                }
                if (viewRefAttachable.flag === 0 /* Detached */) {
                    viewRefAttachable.destroy();
                    viewRefs.delete(templateDef);
                    console.log('Collect', viewRefAttachable);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    KeepAliveGC.decorators = [
        { type: Injectable, args: [{ providedIn: 'root', },] }
    ];
    /** @nocollapse */
    KeepAliveGC.ctorParameters = function () { return [
        { type: KeepAliveConfig }
    ]; };
    /** @nocollapse */ KeepAliveGC.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveGC_Factory() { return new KeepAliveGC(i0.ɵɵinject(KeepAliveConfig)); }, token: KeepAliveGC, providedIn: "root" });
    return KeepAliveGC;
}());
export { KeepAliveGC };
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeepAliveGC.prototype.config;
}
var KeepAliveViewRefs = /** @class */ (function () {
    function KeepAliveViewRefs(gc) {
        this.gc = gc;
        this.viewRefs = new Map();
    }
    /**
     * @param {?} templateRef
     * @param {?} viewRef
     * @return {?}
     */
    KeepAliveViewRefs.prototype.add = /**
     * @param {?} templateRef
     * @param {?} viewRef
     * @return {?}
     */
    function (templateRef, viewRef) {
        /** @type {?} */
        var templateDef = this.getTemplateDef(templateRef);
        if (this.viewRefs.has(templateDef)) {
            throw new TypeError('templateRef already exists in viewRefs');
        }
        /** @type {?} */
        var viewRefAttachable = new ViewRefAttachable(viewRef);
        this.viewRefs.set(templateDef, viewRefAttachable);
    };
    /**
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveViewRefs.prototype.has = /**
     * @param {?} templateRef
     * @return {?}
     */
    function (templateRef) {
        /** @type {?} */
        var templateDef = this.getTemplateDef(templateRef);
        return this.viewRefs.has(templateDef);
    };
    /**
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveViewRefs.prototype.get = /**
     * @param {?} templateRef
     * @return {?}
     */
    function (templateRef) {
        /** @type {?} */
        var templateDef = this.getTemplateDef(templateRef);
        if (!this.viewRefs.has(templateDef)) {
            throw new TypeError('templateRef not exists in viewRefs');
        }
        return this.viewRefs.get(templateDef);
    };
    /**
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveViewRefs.prototype.delete = /**
     * @param {?} templateRef
     * @return {?}
     */
    function (templateRef) {
        /** @type {?} */
        var templateDef = this.getTemplateDef(templateRef);
        if (!this.viewRefs.has(templateDef)) {
            throw new TypeError('templateRef not exists in viewRefs');
        }
        this.viewRefs.get(templateRef).viewRef.destroy();
        return this.viewRefs.delete(templateDef);
    };
    /**
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveViewRefs.prototype.reattach = /**
     * @param {?} templateRef
     * @return {?}
     */
    function (templateRef) {
        /** @type {?} */
        var templateDef = this.getTemplateDef(templateRef);
        /** @type {?} */
        var viewRefAttachable = this.get(templateRef);
        this.viewRefs.set(templateDef, viewRefAttachable);
    };
    /**
     * @return {?}
     */
    KeepAliveViewRefs.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.viewRefs.forEach((/**
         * @param {?} viewRefAttachable
         * @return {?}
         */
        function (viewRefAttachable) {
            return viewRefAttachable.viewRef.destroy();
        }));
        this.viewRefs.clear();
    };
    /**
     * @return {?}
     */
    KeepAliveViewRefs.prototype.collect = /**
     * @return {?}
     */
    function () {
        this.gc.collect(this.viewRefs);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    KeepAliveViewRefs.prototype.forEach = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.viewRefs.forEach(fn);
    };
    /**
     * @private
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveViewRefs.prototype.getTemplateDef = /**
     * @private
     * @param {?} templateRef
     * @return {?}
     */
    function (templateRef) {
        return templateRef['_def'];
    };
    KeepAliveViewRefs.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    KeepAliveViewRefs.ctorParameters = function () { return [
        { type: KeepAliveGC }
    ]; };
    /** @nocollapse */ KeepAliveViewRefs.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveViewRefs_Factory() { return new KeepAliveViewRefs(i0.ɵɵinject(KeepAliveGC)); }, token: KeepAliveViewRefs, providedIn: "root" });
    return KeepAliveViewRefs;
}());
export { KeepAliveViewRefs };
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeepAliveViewRefs.prototype.viewRefs;
    /**
     * @type {?}
     * @private
     */
    KeepAliveViewRefs.prototype.gc;
}
var KeepAliveManager = /** @class */ (function () {
    function KeepAliveManager(viewRefs) {
        this.viewRefs = viewRefs;
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveManager.prototype.attach = /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @return {?}
     */
    function (viewContainerRef, templateRef) {
        if (!this.viewRefs.has(templateRef)) {
            /** @type {?} */
            var viewRef = templateRef.createEmbeddedView({});
            this.viewRefs.add(templateRef, viewRef);
        }
        else {
            this.viewRefs.reattach(templateRef);
        }
        this.patchClear(viewContainerRef);
        /** @type {?} */
        var viewRefAttachable = this.viewRefs.get(templateRef);
        viewRefAttachable.attachToViewContainerRef(viewContainerRef);
        this.viewRefs.collect();
    };
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @return {?}
     */
    KeepAliveManager.prototype.detach = /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @return {?}
     */
    function (viewContainerRef, templateRef) {
        /** @type {?} */
        var viewRefAttachable = this.viewRefs.get(templateRef);
        viewRefAttachable.detachFromViewContainerRef();
        this.viewRefs.collect();
    };
    /**
     * @private
     * @param {?} viewContainerRef
     * @return {?}
     */
    KeepAliveManager.prototype.patchClear = /**
     * @private
     * @param {?} viewContainerRef
     * @return {?}
     */
    function (viewContainerRef) {
        if (!viewContainerRef[KeepAliveManager.patched]) {
            /** @type {?} */
            var clear_1 = Object.getPrototypeOf(viewContainerRef).clear;
            /** @type {?} */
            var viewRefs_1 = this.viewRefs;
            Object.getPrototypeOf(viewContainerRef).clear = (/**
             * @this {?}
             * @return {?}
             */
            function () {
                viewRefs_1.forEach((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { v.viewRef['_view'].state |= (1 << 7); }));
                clear_1.call(this);
                viewRefs_1.forEach((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { v.viewRef['_view'].state &= ~(1 << 7); }));
            });
            Object.defineProperty(viewContainerRef, KeepAliveManager.patched, { get: (/**
                 * @return {?}
                 */
                function () { return true; }) });
        }
    };
    KeepAliveManager.patched = Symbol('Already Patched ViewContainerRef Token');
    KeepAliveManager.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    KeepAliveManager.ctorParameters = function () { return [
        { type: KeepAliveViewRefs }
    ]; };
    /** @nocollapse */ KeepAliveManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function KeepAliveManager_Factory() { return new KeepAliveManager(i0.ɵɵinject(KeepAliveViewRefs)); }, token: KeepAliveManager, providedIn: "root" });
    return KeepAliveManager;
}());
export { KeepAliveManager };
if (false) {
    /** @type {?} */
    KeepAliveManager.patched;
    /**
     * @type {?}
     * @private
     */
    KeepAliveManager.prototype.viewRefs;
}
var KeepAliveDirective = /** @class */ (function () {
    function KeepAliveDirective(manager, viewContainerRef, templateRef) {
        this.manager = manager;
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        manager.attach(viewContainerRef, templateRef);
    }
    /**
     * @return {?}
     */
    KeepAliveDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.manager.detach(this.viewContainerRef, this.templateRef);
    };
    KeepAliveDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[keepAlive]'
                },] }
    ];
    /** @nocollapse */
    KeepAliveDirective.ctorParameters = function () { return [
        { type: KeepAliveManager },
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    return KeepAliveDirective;
}());
export { KeepAliveDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeepAliveDirective.prototype.manager;
    /**
     * @type {?}
     * @private
     */
    KeepAliveDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    KeepAliveDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,