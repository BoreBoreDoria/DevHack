/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/rename-prop.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
import { omit } from '../tools/utils/index';
/**
 * @record
 */
function RenamePropContext() { }
if (false) {
    /** @type {?} */
    RenamePropContext.prototype.$implicit;
}
var RenamePropDirective = /** @class */ (function () {
    function RenamePropDirective(templateRef, viewContainerRef) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = {
            $implicit: null
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    RenamePropDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('renameProp' in changes && 'renamePropTo' in changes) {
            this.onRenameDidChanged(this.renameProp, this.renamePropTo, changes.renameProp.previousValue, changes.renamePropTo.previousValue);
        }
    };
    /**
     * @return {?}
     */
    RenamePropDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @param {?} fromPrevious
     * @param {?} toPrevious
     * @return {?}
     */
    RenamePropDirective.prototype.onRenameDidChanged = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @param {?} fromPrevious
     * @param {?} toPrevious
     * @return {?}
     */
    function (from, to, fromPrevious, toPrevious) {
        if (!this.composedView) {
            this.create();
        }
        if (from !== fromPrevious || to !== toPrevious) {
            this.rename(from, to);
        }
    };
    /**
     * @private
     * @return {?}
     */
    RenamePropDirective.prototype.create = /**
     * @private
     * @return {?}
     */
    function () {
        this.composedView = new ComposedView(this.viewContainerRef);
        this.composedView.createEmbeddedView(this.context);
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    RenamePropDirective.prototype.rename = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        this.composedView.updateContext((/**
         * @param {?} context
         * @param {?} parent
         * @return {?}
         */
        function (context, parent) {
            var _a;
            return Object.assign(context, omit(parent, [from]), (_a = {}, _a[to] = parent[from], _a));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RenamePropDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.viewContainerRef.clear();
        if (this.composedView) {
            this.composedView.destroy();
            this.composedView = null;
        }
    };
    RenamePropDirective.decorators = [
        { type: Directive, args: [{ selector: '[renameProp]' },] }
    ];
    /** @nocollapse */
    RenamePropDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    RenamePropDirective.propDecorators = {
        renameProp: [{ type: Input }],
        renamePropTo: [{ type: Input }]
    };
    return RenamePropDirective;
}());
export { RenamePropDirective };
if (false) {
    /** @type {?} */
    RenamePropDirective.prototype.renameProp;
    /** @type {?} */
    RenamePropDirective.prototype.renamePropTo;
    /**
     * @type {?}
     * @private
     */
    RenamePropDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    RenamePropDirective.prototype.composedView;
    /**
     * @type {?}
     * @private
     */
    RenamePropDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    RenamePropDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1lLXByb3AuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9yZW5hbWUtcHJvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBdUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFFNUMsZ0NBRUM7OztJQURDLHNDQUFnQjs7QUFHbEI7SUFXRSw2QkFDVSxXQUEyQyxFQUMzQyxnQkFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWdDO1FBQzNDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFQcEMsWUFBTyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSTtTQUNoQixDQUFDO0lBTUMsQ0FBQzs7Ozs7SUFFSix5Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLGNBQWMsSUFBSSxPQUFPLEVBQUU7WUFDeEQsSUFBSSxDQUFDLGtCQUFrQixDQUNyQixJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQ2xDLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUNyRSxDQUFDO1NBQ0g7SUFDSCxDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7Ozs7Ozs7OztJQUVPLGdEQUFrQjs7Ozs7Ozs7SUFBMUIsVUFBMkIsSUFBWSxFQUFFLEVBQVUsRUFBRSxZQUFvQixFQUFFLFVBQWtCO1FBQzNGLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmO1FBRUQsSUFBSSxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUUsS0FBSyxVQUFVLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDOzs7OztJQUVPLG9DQUFNOzs7O0lBQWQ7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksWUFBWSxDQUFvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7Ozs7O0lBRU8sb0NBQU07Ozs7OztJQUFkLFVBQWUsSUFBWSxFQUFFLEVBQVU7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhOzs7OztRQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07O1lBQzlDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FDbEIsT0FBTyxFQUNQLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBRSxJQUFJLENBQUUsQ0FBQyxZQUNwQixHQUFFLEVBQUUsSUFBSSxNQUFNLENBQUUsSUFBSSxDQUFFLE1BQ3pCLENBQUM7UUFDSixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRU8scUNBQU87Ozs7SUFBZjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNILENBQUM7O2dCQTVERixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFOzs7O2dCQVJ5QixXQUFXO2dCQUFFLGdCQUFnQjs7OzZCQVcxRixLQUFLOytCQUNMLEtBQUs7O0lBeURSLDBCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E1RFksbUJBQW1COzs7SUFFOUIseUNBQTRCOztJQUM1QiwyQ0FBOEI7Ozs7O0lBRTlCLHNDQUVFOzs7OztJQUNGLDJDQUFzRDs7Ozs7SUFHcEQsMENBQW1EOzs7OztJQUNuRCwrQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvc2VkVmlldyB9IGZyb20gJy4uL3Rvb2xzL3JlY29tcG9zZS9jb21wb3NlZC52aWV3JztcbmltcG9ydCB7IG9taXQgfSBmcm9tICcuLi90b29scy91dGlscy9pbmRleCc7XG5cbmludGVyZmFjZSBSZW5hbWVQcm9wQ29udGV4dCB7XG4gICRpbXBsaWNpdDogbnVsbDtcbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3JlbmFtZVByb3BdJyB9KVxuZXhwb3J0IGNsYXNzIFJlbmFtZVByb3BEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgcmVuYW1lUHJvcDogc3RyaW5nO1xuICBASW5wdXQoKSByZW5hbWVQcm9wVG86IHN0cmluZztcblxuICBwcml2YXRlIGNvbnRleHQ6IFJlbmFtZVByb3BDb250ZXh0ID0ge1xuICAgICRpbXBsaWNpdDogbnVsbFxuICB9O1xuICBwcml2YXRlIGNvbXBvc2VkVmlldzogQ29tcG9zZWRWaWV3PFJlbmFtZVByb3BDb250ZXh0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxSZW5hbWVQcm9wQ29udGV4dD4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCdyZW5hbWVQcm9wJyBpbiBjaGFuZ2VzICYmICdyZW5hbWVQcm9wVG8nIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMub25SZW5hbWVEaWRDaGFuZ2VkKFxuICAgICAgICB0aGlzLnJlbmFtZVByb3AsIHRoaXMucmVuYW1lUHJvcFRvLFxuICAgICAgICBjaGFuZ2VzLnJlbmFtZVByb3AucHJldmlvdXNWYWx1ZSwgY2hhbmdlcy5yZW5hbWVQcm9wVG8ucHJldmlvdXNWYWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHByaXZhdGUgb25SZW5hbWVEaWRDaGFuZ2VkKGZyb206IHN0cmluZywgdG86IHN0cmluZywgZnJvbVByZXZpb3VzOiBzdHJpbmcsIHRvUHJldmlvdXM6IHN0cmluZykge1xuICAgIGlmICghdGhpcy5jb21wb3NlZFZpZXcpIHtcbiAgICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKGZyb20gIT09IGZyb21QcmV2aW91cyB8fCB0byAhPT0gdG9QcmV2aW91cykge1xuICAgICAgdGhpcy5yZW5hbWUoZnJvbSwgdG8pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlKCkge1xuICAgIHRoaXMuY29tcG9zZWRWaWV3ID0gbmV3IENvbXBvc2VkVmlldzxSZW5hbWVQcm9wQ29udGV4dD4odGhpcy52aWV3Q29udGFpbmVyUmVmKTtcbiAgICB0aGlzLmNvbXBvc2VkVmlldy5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5jb250ZXh0KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuYW1lKGZyb206IHN0cmluZywgdG86IHN0cmluZykge1xuICAgIHRoaXMuY29tcG9zZWRWaWV3LnVwZGF0ZUNvbnRleHQoKGNvbnRleHQsIHBhcmVudCkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIG9taXQocGFyZW50LCBbIGZyb20gXSksXG4gICAgICAgIHsgWyB0byBdOiBwYXJlbnRbIGZyb20gXSB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIGlmICh0aGlzLmNvbXBvc2VkVmlldykge1xuICAgICAgdGhpcy5jb21wb3NlZFZpZXcuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jb21wb3NlZFZpZXcgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19