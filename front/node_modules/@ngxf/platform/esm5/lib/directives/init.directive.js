/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/init.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * @record
 * @template T
 */
function InitContext() { }
if (false) {
    /** @type {?} */
    InitContext.prototype.$implicit;
    /** @type {?} */
    InitContext.prototype.init;
}
/**
 * @template T
 */
var InitDirective = /** @class */ (function () {
    function InitDirective(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.context = { $implicit: null, init: null };
        this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.context);
    }
    Object.defineProperty(InitDirective.prototype, "init", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InitDirective.prototype, "initOf", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InitDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.viewContainer.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    InitDirective.prototype.setValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.context.$implicit = this.context.init = value;
        if (this.viewRef) {
            this.viewRef.markForCheck();
        }
    };
    InitDirective.decorators = [
        { type: Directive, args: [{ selector: '[init]' },] }
    ];
    /** @nocollapse */
    InitDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    InitDirective.propDecorators = {
        init: [{ type: Input }],
        initOf: [{ type: Input }]
    };
    return InitDirective;
}());
export { InitDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    InitDirective.prototype.viewContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2luaXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBbUIsS0FBSyxFQUFhLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFFNUcsMEJBR0M7OztJQUZDLGdDQUFhOztJQUNiLDJCQUFROzs7OztBQUdWO0lBZUUsdUJBQ1UsV0FBd0MsRUFDeEMsYUFBK0I7UUFEL0IsZ0JBQVcsR0FBWCxXQUFXLENBQTZCO1FBQ3hDLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQU5qQyxZQUFPLEdBQW1CLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDMUQsWUFBTyxHQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFLckUsQ0FBQztJQWZKLHNCQUFhLCtCQUFJOzs7OztRQUFqQixVQUFrQixLQUFRO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBYSxpQ0FBTTs7Ozs7UUFBbkIsVUFBb0IsS0FBUTtZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBOzs7O0lBV0QsbUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7OztJQUVPLGdDQUFROzs7OztJQUFoQixVQUFpQixLQUFRO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNuRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7O2dCQWpDRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFOzs7O2dCQVBzQixXQUFXO2dCQUFFLGdCQUFnQjs7O3VCQVVqRixLQUFLO3lCQUlMLEtBQUs7O0lBNEJSLG9CQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7U0FsQ1ksYUFBYTs7Ozs7O0lBVXhCLGdDQUFrRTs7Ozs7SUFDbEUsZ0NBQ3dFOzs7OztJQUd0RSxvQ0FBZ0Q7Ozs7O0lBQ2hELHNDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbnRlcmZhY2UgSW5pdENvbnRleHQ8VD4ge1xuICAkaW1wbGljaXQ6IFQ7XG4gIGluaXQ6IFQ7XG59XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpbml0XScgfSlcbmV4cG9ydCBjbGFzcyBJbml0RGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBzZXQgaW5pdCh2YWx1ZTogVCkge1xuICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGluaXRPZih2YWx1ZTogVCkge1xuICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBJbml0Q29udGV4dDxUPiA9IHsgJGltcGxpY2l0OiBudWxsLCBpbml0OiBudWxsIH07XG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPEluaXRDb250ZXh0PFQ+PiA9XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB0aGlzLmNvbnRleHQpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPEluaXRDb250ZXh0PFQ+PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VmFsdWUodmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRleHQuJGltcGxpY2l0ID0gdGhpcy5jb250ZXh0LmluaXQgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy52aWV3UmVmKSB7XG4gICAgICB0aGlzLnZpZXdSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==