/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/http.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
/** @enum {string} */
var HttpStrategies = {
    DELETE: "delete",
    GET: "get",
    HEAD: "head",
    JSONP: "jsonp",
    OPTIONS: "options",
    PATCH: "patch",
    POST: "post",
    PUT: "put",
};
/**
 * @record
 */
function HttpContext() { }
if (false) {
    /** @type {?} */
    HttpContext.prototype.$implicit;
    /** @type {?} */
    HttpContext.prototype.data;
}
/**
 * @record
 */
function HttpStrategy() { }
if (false) {
    /** @type {?} */
    HttpStrategy.prototype.type;
    /** @type {?} */
    HttpStrategy.prototype.changes;
    /** @type {?} */
    HttpStrategy.prototype.require;
}
/** @type {?} */
var HTTP_CONFIG = [
    {
        type: HttpStrategies.DELETE,
        changes: ['httpDelete', 'httpWith'],
        require: ['httpDelete']
    },
    {
        type: HttpStrategies.GET,
        changes: ['httpGet', 'httpWith'],
        require: ['httpGet']
    },
    {
        type: HttpStrategies.HEAD,
        changes: ['httpHead', 'httpWith'],
        require: ['httpHead']
    },
    {
        type: HttpStrategies.JSONP,
        changes: ['httpJsonp', 'httpCallback'],
        require: ['httpJsonp', 'httpCallback']
    },
    {
        type: HttpStrategies.OPTIONS,
        changes: ['httpOptions', 'httpWith'],
        require: ['httpOptions']
    },
    {
        type: HttpStrategies.PATCH,
        changes: ['httpPatch', 'httpSend', 'httpWith'],
        require: ['httpPatch']
    },
    {
        type: HttpStrategies.POST,
        changes: ['httpPost', 'httpSend', 'httpWith'],
        require: ['httpPost']
    },
    {
        type: HttpStrategies.PUT,
        changes: ['httpPut', 'httpSend', 'httpWith'],
        require: ['httpPut']
    }
];
var HttpDirective = /** @class */ (function () {
    function HttpDirective(http, templateRef, viewContainerRef) {
        this.http = http;
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.context = {
            $implicit: null,
            /**
             * @return {?}
             */
            get data() { return this.$implicit; }
        };
        this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    HttpDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var strategy = this.findStrategy(changes);
        if (strategy) {
            this.execute(strategy);
        }
    };
    /**
     * @return {?}
     */
    HttpDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose();
        this.viewContainerRef.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    HttpDirective.prototype.findStrategy = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        return HTTP_CONFIG.find((/**
         * @param {?} strategy
         * @return {?}
         */
        function (strategy) {
            return strategy.changes.some((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return !!changes[field]; }))
                && strategy.require.every((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) { return !!_this[field]; }));
        }));
    };
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    HttpDirective.prototype.execute = /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    function (strategy) {
        var _this = this;
        /** @type {?} */
        var params = strategy.changes.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) { return _this[field]; }));
        this.request.apply(this, __spread([strategy.type], params));
    };
    /**
     * @private
     * @param {?} method
     * @param {...?} params
     * @return {?}
     */
    HttpDirective.prototype.request = /**
     * @private
     * @param {?} method
     * @param {...?} params
     * @return {?}
     */
    function (method) {
        var _a;
        var _this = this;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.dispose();
        this.subscription = (_a = this.http)[method].apply(_a, __spread(params)).pipe(catchError((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            console.error(e);
            return of(null);
        })))
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.context.$implicit = data;
            _this.viewRef.markForCheck();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    HttpDirective.prototype.dispose = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    HttpDirective.decorators = [
        { type: Directive, args: [{ selector: '[http]' },] }
    ];
    /** @nocollapse */
    HttpDirective.ctorParameters = function () { return [
        { type: HttpClient },
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    HttpDirective.propDecorators = {
        httpDelete: [{ type: Input }],
        httpGet: [{ type: Input }],
        httpHead: [{ type: Input }],
        httpJsonp: [{ type: Input }],
        httpOptions: [{ type: Input }],
        httpPatch: [{ type: Input }],
        httpPost: [{ type: Input }],
        httpPut: [{ type: Input }],
        httpSend: [{ type: Input }],
        httpCallback: [{ type: Input }],
        httpWith: [{ type: Input }]
    };
    return HttpDirective;
}());
export { HttpDirective };
if (false) {
    /** @type {?} */
    HttpDirective.prototype.httpDelete;
    /** @type {?} */
    HttpDirective.prototype.httpGet;
    /** @type {?} */
    HttpDirective.prototype.httpHead;
    /** @type {?} */
    HttpDirective.prototype.httpJsonp;
    /** @type {?} */
    HttpDirective.prototype.httpOptions;
    /** @type {?} */
    HttpDirective.prototype.httpPatch;
    /** @type {?} */
    HttpDirective.prototype.httpPost;
    /** @type {?} */
    HttpDirective.prototype.httpPut;
    /** @type {?} */
    HttpDirective.prototype.httpSend;
    /** @type {?} */
    HttpDirective.prototype.httpCallback;
    /** @type {?} */
    HttpDirective.prototype.httpWith;
    /**
     * @type {?}
     * @private
     */
    HttpDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    HttpDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    HttpDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    HttpDirective.prototype.http;
    /**
     * @type {?}
     * @private
     */
    HttpDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    HttpDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,