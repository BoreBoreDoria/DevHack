/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/async.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { isObservable } from 'rxjs';
/**
 * @record
 */
function AsyncContext() { }
if (false) {
    /** @type {?} */
    AsyncContext.prototype.$implicit;
}
/**
 * @record
 */
function SubscriptionStrategy() { }
if (false) {
    /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    SubscriptionStrategy.prototype.createSubscription = function (async, next, error, complete) { };
    /**
     * @param {?} subscription
     * @return {?}
     */
    SubscriptionStrategy.prototype.dispose = function (subscription) { };
}
var ObservableStrategy = /** @class */ (function () {
    function ObservableStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    ObservableStrategy.prototype.createSubscription = /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    function (async, next, error, complete) {
        return async.subscribe(next, error, complete);
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.dispose = /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) {
        if (subscription) {
            subscription.unsubscribe();
        }
    };
    return ObservableStrategy;
}());
var PromiseStrategy = /** @class */ (function () {
    function PromiseStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    PromiseStrategy.prototype.createSubscription = /**
     * @param {?} async
     * @param {?} next
     * @param {?} error
     * @param {?} complete
     * @return {?}
     */
    function (async, next, error, complete) {
        /** @type {?} */
        var promise = async.then(next, error);
        if ('finally' in promise) {
            return ((/** @type {?} */ (promise))).finally(complete);
        }
        return promise;
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.dispose = /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) { };
    return PromiseStrategy;
}());
/** @type {?} */
var observableStrategy = new ObservableStrategy();
/** @type {?} */
var promiseStrategy = new PromiseStrategy();
/**
 * @param {?} async
 * @return {?}
 */
function resolveStrategy(async) {
    if (isObservable(async)) {
        return observableStrategy;
    }
    if (isPromise(async)) {
        return promiseStrategy;
    }
    throw new Error("InvalidDirectiveArgument: 'async' for directive 'async'");
}
var AsyncDirective = /** @class */ (function () {
    function AsyncDirective(templateRef, viewContainer, cd) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this.next = new EventEmitter();
        this.error = new EventEmitter();
        this.complete = new EventEmitter();
        this.context = { $implicit: null };
        this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.context);
        this.componentInstance = ((/** @type {?} */ (cd))).context;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AsyncDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('async' in changes) {
            this.onAsyncDidChanged(this.async, changes.async.previousValue);
        }
        if ('asyncFrom' in changes) {
            this.onAsyncDidChanged(this.asyncFrom, changes.asyncFrom.previousValue);
        }
    };
    /**
     * @return {?}
     */
    AsyncDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose();
        this.viewContainer.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    AsyncDirective.prototype.onAsyncDidChanged = /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    function (current, previous) {
        if (!this.subscription) {
            return current && this.subscribe(current);
        }
        if (current !== previous) {
            this.dispose();
            return this.onAsyncDidChanged(current, null);
        }
    };
    /**
     * @private
     * @param {?} async
     * @return {?}
     */
    AsyncDirective.prototype.subscribe = /**
     * @private
     * @param {?} async
     * @return {?}
     */
    function (async) {
        var _this = this;
        this.strategy = resolveStrategy(async);
        this.subscription = this.strategy.createSubscription(async, (/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.onNext(value); }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.onError(error); }), (/**
         * @return {?}
         */
        function () { return _this.onComplete(); }));
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    AsyncDirective.prototype.onNext = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.context.$implicit = value;
        this.next.emit(value);
        if (isFunction(this.asyncNext)) {
            this.asyncNext.call(this.componentInstance, value);
        }
        this.viewRef.markForCheck();
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    AsyncDirective.prototype.onError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.error.emit(error);
        if (isFunction(this.asyncError)) {
            this.asyncError.call(this.componentInstance, error);
        }
    };
    /**
     * @private
     * @return {?}
     */
    AsyncDirective.prototype.onComplete = /**
     * @private
     * @return {?}
     */
    function () {
        this.complete.next();
        if (isFunction(this.asyncComplete)) {
            this.asyncComplete.call(this.componentInstance);
        }
    };
    /**
     * @private
     * @return {?}
     */
    AsyncDirective.prototype.dispose = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.strategy) {
            this.strategy.dispose(this.subscription);
            this.subscription = null;
            this.strategy = null;
        }
    };
    AsyncDirective.decorators = [
        { type: Directive, args: [{ selector: '[async]' },] }
    ];
    /** @nocollapse */
    AsyncDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef }
    ]; };
    AsyncDirective.propDecorators = {
        async: [{ type: Input }],
        asyncFrom: [{ type: Input }],
        asyncNext: [{ type: Input }],
        asyncError: [{ type: Input }],
        asyncComplete: [{ type: Input }],
        next: [{ type: Output }],
        error: [{ type: Output }],
        complete: [{ type: Output }]
    };
    return AsyncDirective;
}());
export { AsyncDirective };
if (false) {
    /** @type {?} */
    AsyncDirective.prototype.async;
    /** @type {?} */
    AsyncDirective.prototype.asyncFrom;
    /** @type {?} */
    AsyncDirective.prototype.asyncNext;
    /** @type {?} */
    AsyncDirective.prototype.asyncError;
    /** @type {?} */
    AsyncDirective.prototype.asyncComplete;
    /** @type {?} */
    AsyncDirective.prototype.next;
    /** @type {?} */
    AsyncDirective.prototype.error;
    /** @type {?} */
    AsyncDirective.prototype.complete;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.componentInstance;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.strategy;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    AsyncDirective.prototype.cd;
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=data:application/json;base64,