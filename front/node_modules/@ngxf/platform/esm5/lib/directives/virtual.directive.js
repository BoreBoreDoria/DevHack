/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/virtual.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, Input } from '@angular/core';
import { VirtualHandler } from '../tools/virtual.handler';
var VirtualDirective = /** @class */ (function () {
    function VirtualDirective(handler, elementRef, cd) {
        this.handler = handler;
        this.elementRef = elementRef;
        this.cd = cd;
        this.handler.register(this.elementRef.nativeElement, cd);
    }
    /**
     * @return {?}
     */
    VirtualDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.handler.unregister(this.elementRef.nativeElement);
    };
    VirtualDirective.decorators = [
        { type: Directive, args: [{ selector: '[virtual]' },] }
    ];
    /** @nocollapse */
    VirtualDirective.ctorParameters = function () { return [
        { type: VirtualHandler },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    VirtualDirective.propDecorators = {
        virtual: [{ type: Input }]
    };
    return VirtualDirective;
}());
export { VirtualDirective };
if (false) {
    /** @type {?} */
    VirtualDirective.prototype.virtual;
    /**
     * @type {?}
     * @private
     */
    VirtualDirective.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    VirtualDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    VirtualDirective.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4Zi9wbGF0Zm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3ZpcnR1YWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUxRDtJQUlFLDBCQUNVLE9BQXVCLEVBQ3ZCLFVBQXNCLEVBQ3RCLEVBQXFCO1FBRnJCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3ZCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFFN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7OztJQUVELHNDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Z0JBZEYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTs7OztnQkFGM0IsY0FBYztnQkFEZ0IsVUFBVTtnQkFBeEMsaUJBQWlCOzs7MEJBS3ZCLEtBQUs7O0lBYVIsdUJBQUM7Q0FBQSxBQWZELElBZUM7U0FkWSxnQkFBZ0I7OztJQUMzQixtQ0FBc0I7Ozs7O0lBR3BCLG1DQUErQjs7Ozs7SUFDL0Isc0NBQThCOzs7OztJQUM5Qiw4QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaXJ0dWFsSGFuZGxlciB9IGZyb20gJy4uL3Rvb2xzL3ZpcnR1YWwuaGFuZGxlcic7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1t2aXJ0dWFsXScgfSlcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgQElucHV0KCkgdmlydHVhbDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaGFuZGxlcjogVmlydHVhbEhhbmRsZXIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIHRoaXMuaGFuZGxlci5yZWdpc3Rlcih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2QpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5oYW5kbGVyLnVucmVnaXN0ZXIodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG59XG4iXX0=