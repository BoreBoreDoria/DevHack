/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/route.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { ActivatedRoute, convertToParamMap } from '@angular/router';
import { distinctUntilChanged } from 'rxjs/operators';
/**
 * @record
 */
function RouteContext() { }
if (false) {
    /** @type {?} */
    RouteContext.prototype.$implicit;
    /** @type {?} */
    RouteContext.prototype.snapshot;
    /** @type {?} */
    RouteContext.prototype.url;
    /** @type {?} */
    RouteContext.prototype.params;
    /** @type {?} */
    RouteContext.prototype.queryParams;
    /** @type {?} */
    RouteContext.prototype.fragment;
    /** @type {?} */
    RouteContext.prototype.data;
    /** @type {?} */
    RouteContext.prototype.outlet;
    /** @type {?} */
    RouteContext.prototype.component;
    /** @type {?} */
    RouteContext.prototype.routeConfig;
    /** @type {?} */
    RouteContext.prototype.root;
    /** @type {?} */
    RouteContext.prototype.parent;
    /** @type {?} */
    RouteContext.prototype.firstChild;
    /** @type {?} */
    RouteContext.prototype.children;
    /** @type {?} */
    RouteContext.prototype.pathFromRoot;
    /** @type {?} */
    RouteContext.prototype.paramMap;
    /** @type {?} */
    RouteContext.prototype.queryParamMap;
}
/** @type {?} */
var ASYNC_FIELDS = ['url', 'params', 'queryParams', 'fragment', 'data', 'paramMap', 'queryParamMap'];
var RouteDirective = /** @class */ (function () {
    function RouteDirective(templateRef, viewContainerRef, route) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.route = route;
        this.context = {
            $implicit: this.route,
            /**
             * @return {?}
             */
            get snapshot() { return this.route.snapshot; },
            url: [],
            params: {},
            queryParams: {},
            fragment: null,
            data: null,
            /**
             * @return {?}
             */
            get outlet() { return this.route.outlet; },
            /**
             * @return {?}
             */
            get component() { return this.route.component; },
            /**
             * @return {?}
             */
            get routeConfig() { return this.route.routeConfig; },
            /**
             * @return {?}
             */
            get root() { return this.route.root; },
            /**
             * @return {?}
             */
            get parent() { return this.route.parent; },
            /**
             * @return {?}
             */
            get firstChild() { return this.route.firstChild; },
            /**
             * @return {?}
             */
            get children() { return this.route.children; },
            /**
             * @return {?}
             */
            get pathFromRoot() { return this.route.pathFromRoot; },
            paramMap: convertToParamMap({}),
            queryParamMap: convertToParamMap({})
        };
        this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);
        this.subscriptions = this.attachFields(ASYNC_FIELDS);
    }
    /**
     * @return {?}
     */
    RouteDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        }));
        this.subscriptions = null;
        this.viewContainerRef.clear();
        if (this.viewRef) {
            this.viewRef.destroy();
            this.viewRef = null;
        }
    };
    /**
     * @private
     * @param {?} asyncFields
     * @return {?}
     */
    RouteDirective.prototype.attachFields = /**
     * @private
     * @param {?} asyncFields
     * @return {?}
     */
    function (asyncFields) {
        var _this = this;
        return asyncFields.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) { return _this.asyncAttach(field); }));
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    RouteDirective.prototype.asyncAttach = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        return this.route[field]
            .pipe(distinctUntilChanged())
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.context[field] = value;
            _this.viewRef.markForCheck();
        }));
    };
    RouteDirective.decorators = [
        { type: Directive, args: [{ selector: '[route]' },] }
    ];
    /** @nocollapse */
    RouteDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ActivatedRoute }
    ]; };
    return RouteDirective;
}());
export { RouteDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    RouteDirective.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9yb3V0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE4QixXQUFXLEVBQVEsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0csT0FBTyxFQUFFLGNBQWMsRUFBMEIsaUJBQWlCLEVBQTZDLE1BQU0saUJBQWlCLENBQUM7QUFFdkksT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFdEQsMkJBa0JDOzs7SUFqQkMsaUNBQTBCOztJQUMxQixnQ0FBaUM7O0lBQ2pDLDJCQUFrQjs7SUFDbEIsOEJBQWU7O0lBQ2YsbUNBQW9COztJQUNwQixnQ0FBaUI7O0lBQ2pCLDRCQUFXOztJQUNYLDhCQUFlOztJQUNmLGlDQUE4Qjs7SUFDOUIsbUNBQW1COztJQUNuQiw0QkFBcUI7O0lBQ3JCLDhCQUE4Qjs7SUFDOUIsa0NBQWtDOztJQUNsQyxnQ0FBMkI7O0lBQzNCLG9DQUErQjs7SUFDL0IsZ0NBQW1COztJQUNuQixxQ0FBd0I7OztJQUdwQixZQUFZLEdBQUcsQ0FBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxlQUFlLENBQUU7QUFFeEc7SUF5QkUsd0JBQ1UsV0FBc0MsRUFDdEMsZ0JBQWtDLEVBQ2xDLEtBQXFCO1FBRnJCLGdCQUFXLEdBQVgsV0FBVyxDQUEyQjtRQUN0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBMUJ2QixZQUFPLEdBQWlCO1lBQzlCLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSzs7OztZQUNyQixJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxD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Ozs7SUFDekIsaUNBa0JFOzs7OztJQUNGLGlDQUMyRTs7Ozs7SUFDM0UsdUNBQXdFOzs7OztJQUd0RSxxQ0FBOEM7Ozs7O0lBQzlDLDBDQUEwQzs7Ozs7SUFDMUMsK0JBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYsIFR5cGUsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBjb252ZXJ0VG9QYXJhbU1hcCwgRGF0YSwgUGFyYW1NYXAsIFBhcmFtcywgUm91dGUsIFVybFNlZ21lbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW50ZXJmYWNlIFJvdXRlQ29udGV4dCB7XG4gICRpbXBsaWNpdDogQWN0aXZhdGVkUm91dGU7XG4gIHNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xuICB1cmw6IFVybFNlZ21lbnRbXTtcbiAgcGFyYW1zOiBQYXJhbXM7XG4gIHF1ZXJ5UGFyYW1zOiBQYXJhbXM7XG4gIGZyYWdtZW50OiBzdHJpbmc7XG4gIGRhdGE6IERhdGE7XG4gIG91dGxldDogc3RyaW5nO1xuICBjb21wb25lbnQ6IFR5cGU8YW55PiB8IHN0cmluZztcbiAgcm91dGVDb25maWc6IFJvdXRlO1xuICByb290OiBBY3RpdmF0ZWRSb3V0ZTtcbiAgcGFyZW50OiBBY3RpdmF0ZWRSb3V0ZSB8IG51bGw7XG4gIGZpcnN0Q2hpbGQ6IEFjdGl2YXRlZFJvdXRlIHwgbnVsbDtcbiAgY2hpbGRyZW46IEFjdGl2YXRlZFJvdXRlW107XG4gIHBhdGhGcm9tUm9vdDogQWN0aXZhdGVkUm91dGVbXTtcbiAgcGFyYW1NYXA6IFBhcmFtTWFwO1xuICBxdWVyeVBhcmFtTWFwOiBQYXJhbU1hcDtcbn1cblxuY29uc3QgQVNZTkNfRklFTERTID0gWyAndXJsJywgJ3BhcmFtcycsICdxdWVyeVBhcmFtcycsICdmcmFnbWVudCcsICdkYXRhJywgJ3BhcmFtTWFwJywgJ3F1ZXJ5UGFyYW1NYXAnIF07XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tyb3V0ZV0nIH0pXG5leHBvcnQgY2xhc3MgUm91dGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGNvbnRleHQ6IFJvdXRlQ29udGV4dCA9IHtcbiAgICAkaW1wbGljaXQ6IHRoaXMucm91dGUsXG4gICAgZ2V0IHNuYXBzaG90KCkgeyByZXR1cm4gdGhpcy5yb3V0ZS5zbmFwc2hvdDsgfSxcbiAgICB1cmw6IFtdLFxuICAgIHBhcmFtczoge30sXG4gICAgcXVlcnlQYXJhbXM6IHt9LFxuICAgIGZyYWdtZW50OiBudWxsLFxuICAgIGRhdGE6IG51bGwsXG4gICAgZ2V0IG91dGxldCgpIHsgcmV0dXJuIHRoaXMucm91dGUub3V0bGV0OyB9LFxuICAgIGdldCBjb21wb25lbnQoKSB7IHJldHVybiB0aGlzLnJvdXRlLmNvbXBvbmVudDsgfSxcbiAgICBnZXQgcm91dGVDb25maWcoKSB7IHJldHVybiB0aGlzLnJvdXRlLnJvdXRlQ29uZmlnOyB9LFxuICAgIGdldCByb290KCkgeyByZXR1cm4gdGhpcy5yb3V0ZS5yb290OyB9LFxuICAgIGdldCBwYXJlbnQoKSB7IHJldHVybiB0aGlzLnJvdXRlLnBhcmVudDsgfSxcbiAgICBnZXQgZmlyc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMucm91dGUuZmlyc3RDaGlsZDsgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7IHJldHVybiB0aGlzLnJvdXRlLmNoaWxkcmVuOyB9LFxuICAgIGdldCBwYXRoRnJvbVJvb3QoKSB7IHJldHVybiB0aGlzLnJvdXRlLnBhdGhGcm9tUm9vdDsgfSxcbiAgICBwYXJhbU1hcDogY29udmVydFRvUGFyYW1NYXAoe30pLFxuICAgIHF1ZXJ5UGFyYW1NYXA6IGNvbnZlcnRUb1BhcmFtTWFwKHt9KVxuICB9O1xuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxSb3V0ZUNvbnRleHQ+ID1cbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHRoaXMuY29udGV4dCk7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSB0aGlzLmF0dGFjaEZpZWxkcyhBU1lOQ19GSUVMRFMpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFJvdXRlQ29udGV4dD4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlXG4gICkge31cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9KTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXR0YWNoRmllbGRzKGFzeW5jRmllbGRzOiBzdHJpbmdbXSk6IFN1YnNjcmlwdGlvbltdIHtcbiAgICByZXR1cm4gYXN5bmNGaWVsZHMubWFwKGZpZWxkID0+IHRoaXMuYXN5bmNBdHRhY2goZmllbGQpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmNBdHRhY2goZmllbGQ6IHN0cmluZyk6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMucm91dGVbIGZpZWxkIF1cbiAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG4gICAgICAuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgdGhpcy5jb250ZXh0WyBmaWVsZCBdID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICB9XG59XG4iXX0=