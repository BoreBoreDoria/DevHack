/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/use-reducer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * @record
 */
function Action() { }
if (false) {
    /** @type {?} */
    Action.prototype.type;
    /** @type {?} */
    Action.prototype.payload;
}
/**
 * @record
 * @template T
 */
function UseReducerImplicitContext() { }
if (false) {
    /** @type {?} */
    UseReducerImplicitContext.prototype.state;
    /** @type {?} */
    UseReducerImplicitContext.prototype.dispatch;
    /** @type {?} */
    UseReducerImplicitContext.prototype.reducer;
    /** @type {?} */
    UseReducerImplicitContext.prototype.detectChanges;
}
/**
 * @record
 * @template T
 */
function UseReducerContext() { }
if (false) {
    /** @type {?} */
    UseReducerContext.prototype.$implicit;
}
var UseReducerDirective = /** @class */ (function () {
    function UseReducerDirective(templateRef, vcr) {
        var _this = this;
        this.templateRef = templateRef;
        this.vcr = vcr;
        this.context = {
            $implicit: {
                state: null,
                dispatch: /**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    this.state = this.reducer(this.state, action);
                    this.detectChanges();
                },
                reducer: ((/**
                 * @return {?}
                 */
                function () { })),
                detectChanges: (/**
                 * @return {?}
                 */
                function () {
                    _this.embeddedViewRef.detectChanges();
                })
            }
        };
        this.embeddedViewRef = this.vcr.createEmbeddedView(this.templateRef, this.context);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    UseReducerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.useReducerInit && typeof this.useReducerInit === 'function') {
            this.context.$implicit.reducer = this.useReducerInit;
            this.context.$implicit.state = this.useReducerWith;
            if (this.useReducerAnd) {
                this.context.$implicit.dispatch(this.useReducerAnd);
            }
        }
    };
    /**
     * @return {?}
     */
    UseReducerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.vcr.clear();
        this.embeddedViewRef.destroy();
        this.embeddedViewRef = null;
    };
    UseReducerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[useReducer]'
                },] }
    ];
    /** @nocollapse */
    UseReducerDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    UseReducerDirective.propDecorators = {
        useReducerInit: [{ type: Input }],
        useReducerWith: [{ type: Input }],
        useReducerAnd: [{ type: Input }]
    };
    return UseReducerDirective;
}());
export { UseReducerDirective };
if (false) {
    /** @type {?} */
    UseReducerDirective.prototype.useReducerInit;
    /** @type {?} */
    UseReducerDirective.prototype.useReducerWith;
    /** @type {?} */
    UseReducerDirective.prototype.useReducerAnd;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.embeddedViewRef;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    UseReducerDirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZHVjZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neGYvcGxhdGZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy91c2UtcmVkdWNlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixLQUFLLEVBQXVDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUV0SSxxQkFHQzs7O0lBRkMsc0JBQWE7O0lBQ2IseUJBQWE7Ozs7OztBQUtmLHdDQUtDOzs7SUFKQywwQ0FBUzs7SUFDVCw2Q0FBZ0M7O0lBQ2hDLDRDQUFpQjs7SUFDakIsa0RBQXdCOzs7Ozs7QUFHMUIsZ0NBRUM7OztJQURDLHNDQUF3Qzs7QUFHMUM7SUF3QkUsNkJBQ1UsV0FBMkMsRUFDM0MsR0FBcUI7UUFGL0IsaUJBR0k7UUFGTSxnQkFBVyxHQUFYLFdBQVcsQ0FBZ0M7UUFDM0MsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFsQnZCLFlBQU8sR0FBc0I7WUFDbkMsU0FBUyxFQUFFO2dCQUNULEtBQUssRUFBRSxJQUFJO2dCQUNYLFFBQVE7Ozs7Z0JBQVIsVUFBVSxNQUFjO29CQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDOUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN2QixDQUFDO2dCQUNELE9BQU8sRUFBRTs7O2dCQUFDLGNBQU8sQ0FBQyxFQUFDO2dCQUNuQixhQUFhOzs7Z0JBQUU7b0JBQ2IsS0FBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDdkMsQ0FBQyxDQUFBO2FBQ0Y7U0FDRixDQUFDO1FBQ00sb0JBQWUsR0FDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUszRCxDQUFDOzs7OztJQUVKLHlDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFVBQVUsRUFBRTtZQUN2RSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNyRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNuRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDckQ7U0FDRjtJQUNILENBQUM7Ozs7SUFFRCx5Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQzs7Z0JBM0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztpQkFDekI7Ozs7Z0JBdEJnRixXQUFXO2dCQUFFLGdCQUFnQjs7O2lDQXdCM0csS0FBSztpQ0FDTCxLQUFLO2dDQUNMLEtBQUs7O0lBdUNSLDBCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0ExQ1ksbUJBQW1COzs7SUFDOUIsNkNBQWlDOztJQUNqQyw2Q0FBNkI7O0lBQzdCLDRDQUErQjs7Ozs7SUFFL0Isc0NBWUU7Ozs7O0lBQ0YsOENBQzhEOzs7OztJQUc1RCwwQ0FBbUQ7Ozs7O0lBQ25ELGtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmludGVyZmFjZSBBY3Rpb24ge1xuICB0eXBlOiBzdHJpbmc7XG4gIHBheWxvYWQ6IGFueTtcbn1cblxudHlwZSBSZWR1Y2VyPFQgPSBhbnk+ID0gKHN0YXRlOiBULCBhY3Rpb246IEFjdGlvbikgPT4gVDtcblxuaW50ZXJmYWNlIFVzZVJlZHVjZXJJbXBsaWNpdENvbnRleHQ8VD4ge1xuICBzdGF0ZTogVDtcbiAgZGlzcGF0Y2g6IChhY3Rpb246IEFjdGlvbikgPT4gVDtcbiAgcmVkdWNlcjogUmVkdWNlcjtcbiAgZGV0ZWN0Q2hhbmdlczogRnVuY3Rpb247XG59XG5cbmludGVyZmFjZSBVc2VSZWR1Y2VyQ29udGV4dDxUID0gYW55PiB7XG4gICRpbXBsaWNpdDogVXNlUmVkdWNlckltcGxpY2l0Q29udGV4dDxUPjtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3VzZVJlZHVjZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBVc2VSZWR1Y2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSB1c2VSZWR1Y2VySW5pdDogUmVkdWNlcjtcbiAgQElucHV0KCkgdXNlUmVkdWNlcldpdGg6IGFueTtcbiAgQElucHV0KCkgdXNlUmVkdWNlckFuZDogQWN0aW9uO1xuXG4gIHByaXZhdGUgY29udGV4dDogVXNlUmVkdWNlckNvbnRleHQgPSB7XG4gICAgJGltcGxpY2l0OiB7XG4gICAgICBzdGF0ZTogbnVsbCxcbiAgICAgIGRpc3BhdGNoIChhY3Rpb246IEFjdGlvbik6IGFueSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnJlZHVjZXIodGhpcy5zdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9LFxuICAgICAgcmVkdWNlcjogKCgpID0+IHt9KSxcbiAgICAgIGRldGVjdENoYW5nZXM6ICgpID0+IHtcbiAgICAgICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcHJpdmF0ZSBlbWJlZGRlZFZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxVc2VSZWR1Y2VyQ29udGV4dD4gPVxuICAgIHRoaXMudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB0aGlzLmNvbnRleHQpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFVzZVJlZHVjZXJDb250ZXh0PixcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZlxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnVzZVJlZHVjZXJJbml0ICYmIHR5cGVvZiB0aGlzLnVzZVJlZHVjZXJJbml0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmNvbnRleHQuJGltcGxpY2l0LnJlZHVjZXIgPSB0aGlzLnVzZVJlZHVjZXJJbml0O1xuICAgICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdC5zdGF0ZSA9IHRoaXMudXNlUmVkdWNlcldpdGg7XG4gICAgICBpZiAodGhpcy51c2VSZWR1Y2VyQW5kKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQuZGlzcGF0Y2godGhpcy51c2VSZWR1Y2VyQW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnZjci5jbGVhcigpO1xuICAgIHRoaXMuZW1iZWRkZWRWaWV3UmVmLmRlc3Ryb3koKTtcbiAgICB0aGlzLmVtYmVkZGVkVmlld1JlZiA9IG51bGw7XG4gIH1cblxufVxuIl19