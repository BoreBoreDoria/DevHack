/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/lazy.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, InjectionToken, Injector, Input, NgModuleFactoryLoader, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { from } from 'rxjs';
import { catchError, finalize, tap } from 'rxjs/operators';
/**
 * @record
 */
function LazyContext() { }
if (false) {
    /** @type {?} */
    LazyContext.prototype.$implicit;
}
/** @type {?} */
export var LAZY_COMPONENT_TOKEN = new InjectionToken('Lazy Component Token');
var LazyDirective = /** @class */ (function () {
    function LazyDirective(templateRef, viewContainer, loader, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.loader = loader;
        this.injector = injector;
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.context = {
            $implicit: null
        };
        this.embeddedViewRef = this.templateRef.createEmbeddedView(this.context);
    }
    Object.defineProperty(LazyDirective.prototype, "component", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (this.componentRef) {
                return this.componentRef.instance;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LazyDirective.prototype, "projectableNodes", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return [this.templateRef.createEmbeddedView(this.context).rootNodes];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    LazyDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('lazy' in changes) {
            this.onLazyDidChanged(this.lazy, changes.lazy.previousValue);
        }
        if ('lazyLoadChildren' in changes) {
            this.onLazyDidChanged(this.lazyLoadChildren, changes.lazyLoadChildren.previousValue);
        }
    };
    /**
     * @return {?}
     */
    LazyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose();
        if (this.embeddedViewRef) {
            this.embeddedViewRef.destroy();
            this.embeddedViewRef = null;
        }
    };
    /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    LazyDirective.prototype.onLazyDidChanged = /**
     * @private
     * @param {?} current
     * @param {?} previous
     * @return {?}
     */
    function (current, previous) {
        if (!this.ngModuleRef) {
            return current && this.loadAndRender(current);
        }
        if (current !== previous) {
            this.dispose();
            return this.onLazyDidChanged(current, null);
        }
    };
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    LazyDirective.prototype.loadAndRender = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        this.subscription = this.load(path).pipe(tap((/**
         * @param {?} ngModuleFactory
         * @return {?}
         */
        function (ngModuleFactory) {
            _this.ngModuleRef = ngModuleFactory.create(_this.injector);
            /** @type {?} */
            var component = _this.ngModuleRef.injector.get(LAZY_COMPONENT_TOKEN);
            /** @type {?} */
            var componentFactory = _this.ngModuleRef.componentFactoryResolver.resolveComponentFactory(component);
            _this.componentRef = _this.viewContainer.createComponent(componentFactory, _this.viewContainer.length, _this.injector, _this.projectableNodes, _this.ngModuleRef);
        })), finalize((/**
         * @return {?}
         */
        function () { return _this.onActivate(_this.component); }))).subscribe();
    };
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    LazyDirective.prototype.load = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        /** @type {?} */
        var pathProduction = path.split('#').join('.ts#');
        return from(this.loader.load(pathProduction)).pipe(catchError((/**
         * @return {?}
         */
        function () { return from(_this.loader.load(path)); })));
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    LazyDirective.prototype.onActivate = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        this.activate.emit(component);
        if (isFunction(this.lazyActivate)) {
            this.lazyActivate(component);
        }
        this.context.$implicit = component;
        this.embeddedViewRef.markForCheck();
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    LazyDirective.prototype.onDeactivate = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        this.deactivate.emit(component);
        if (isFunction(this.lazyDeactivate)) {
            this.lazyDeactivate(component);
        }
        this.context.$implicit = null;
        this.embeddedViewRef.markForCheck();
    };
    /**
     * @private
     * @return {?}
     */
    LazyDirective.prototype.dispose = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            /** @type {?} */
            var c = this.component;
            this.componentRef.destroy();
            this.componentRef = null;
            this.onDeactivate(c);
        }
        if (this.ngModuleRef) {
            this.ngModuleRef.destroy();
            this.ngModuleRef = null;
        }
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    LazyDirective.decorators = [
        { type: Directive, args: [{ selector: '[lazy]' },] }
    ];
    /** @nocollapse */
    LazyDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: NgModuleFactoryLoader },
        { type: Injector }
    ]; };
    LazyDirective.propDecorators = {
        lazy: [{ type: Input }],
        lazyLoadChildren: [{ type: Input }],
        lazyActivate: [{ type: Input }],
        lazyDeactivate: [{ type: Input }],
        activate: [{ type: Output }],
        deactivate: [{ type: Output }]
    };
    return LazyDirective;
}());
export { LazyDirective };
if (false) {
    /** @type {?} */
    LazyDirective.prototype.lazy;
    /** @type {?} */
    LazyDirective.prototype.lazyLoadChildren;
    /** @type {?} */
    LazyDirective.prototype.lazyActivate;
    /** @type {?} */
    LazyDirective.prototype.lazyDeactivate;
    /** @type {?} */
    LazyDirective.prototype.activate;
    /** @type {?} */
    LazyDirective.prototype.deactivate;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.embeddedViewRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.ngModuleRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    LazyDirective.prototype.injector;
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=data:application/json;base64,