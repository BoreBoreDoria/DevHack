import { ChangeDetectorRef, PipeTransform } from '@angular/core';
declare type Method<T = any> = (this: T, ...args: any[]) => any;
declare type Head<T extends Method> = Parameters<T>[0];
declare type Tail<T extends Method> = T extends (first: any, ...rest: infer R) => any ? R : never;
export declare class CallPipe<C> implements PipeTransform {
    private cd;
    private readonly context;
    constructor(cd: ChangeDetectorRef);
    transform<M extends Method<C>>(param: Head<M>, fn: M, ...params: Tail<M>): ReturnType<M>;
}
export {};
