import { InjectionToken, PipeTransform } from '@angular/core';
export declare function consoleFactory(): Console;
export declare const CONSOLE: InjectionToken<Console>;
export declare const skipValueOperators: string[];
export declare class ConsolePipe implements PipeTransform {
    private console;
    constructor(console: any);
    transform<T>(message: T, logLevel: 'info', ...optionalParams: any[]): T;
    transform<T>(message: T, logLevel: 'log', ...optionalParams: any[]): T;
    transform<T>(message: T, logLevel: 'warn', ...optionalParams: any[]): T;
    transform<T>(message: T, logLevel: 'exception', ...optionalParams: any[]): T;
    transform<T>(message: T, logLevel: 'error', ...optionalParams: any[]): T;
    transform<T>(message: T, logLevel: 'debug', ...optionalParams: any[]): T;
    transform<T>(message: T, logLevel: 'trace', ...optionalParams: any[]): T;
    transform<T>(obj: T, logLevel: 'dir'): T;
    transform<T>(value: T, logLevel: 'dirxml'): T;
    transform<T>(value: T, logLevel: 'table'): T;
    transform<T>(value: T, logLevel: 'trace', message: string, ...optionalParams: any[]): T;
    transform<T>(value: T, logLevel: 'count', label?: string): T;
    transform<T>(value: T, logLevel: 'markTimeline', label?: string): T;
    transform<T>(value: T, logLevel: 'time', label?: string): T;
    transform<T>(value: T, logLevel: 'timeEnd', label?: string): T;
    transform<T>(value: T, logLevel: 'profile', reportName?: string): T;
    transform<T>(value: T, logLevel: 'profileEnd', reportName?: string): T;
    transform<T>(value: T, logLevel: 'timeline', label?: string): T;
    transform<T>(value: T, logLevel: 'timelineEnd', label?: string): T;
    transform<T>(value: T, logLevel: 'timeStamp', label?: string): T;
    transform<T>(value: T, logLevel: 'group', groupTitle?: string, ...optionalParams: any[]): T;
    transform<T>(value: T, logLevel: 'groupCollapsed', groupTitle?: string, ...optionalParams: any[]): T;
    transform<T>(value: T, logLevel: 'groupEnd'): T;
    transform<T>(value: T, logLevel: 'clear'): T;
}
