{"version":3,"file":"console.pipe.d.ts","sources":["console.pipe.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken, PipeTransform } from '@angular/core';\nexport declare function consoleFactory(): Console;\nexport declare const CONSOLE: InjectionToken<Console>;\nexport declare const skipValueOperators: string[];\nexport declare class ConsolePipe implements PipeTransform {\n    private console;\n    constructor(console: any);\n    transform<T>(message: T, logLevel: 'info', ...optionalParams: any[]): T;\n    transform<T>(message: T, logLevel: 'log', ...optionalParams: any[]): T;\n    transform<T>(message: T, logLevel: 'warn', ...optionalParams: any[]): T;\n    transform<T>(message: T, logLevel: 'exception', ...optionalParams: any[]): T;\n    transform<T>(message: T, logLevel: 'error', ...optionalParams: any[]): T;\n    transform<T>(message: T, logLevel: 'debug', ...optionalParams: any[]): T;\n    transform<T>(message: T, logLevel: 'trace', ...optionalParams: any[]): T;\n    transform<T>(obj: T, logLevel: 'dir'): T;\n    transform<T>(value: T, logLevel: 'dirxml'): T;\n    transform<T>(value: T, logLevel: 'table'): T;\n    transform<T>(value: T, logLevel: 'trace', message: string, ...optionalParams: any[]): T;\n    transform<T>(value: T, logLevel: 'count', label?: string): T;\n    transform<T>(value: T, logLevel: 'markTimeline', label?: string): T;\n    transform<T>(value: T, logLevel: 'time', label?: string): T;\n    transform<T>(value: T, logLevel: 'timeEnd', label?: string): T;\n    transform<T>(value: T, logLevel: 'profile', reportName?: string): T;\n    transform<T>(value: T, logLevel: 'profileEnd', reportName?: string): T;\n    transform<T>(value: T, logLevel: 'timeline', label?: string): T;\n    transform<T>(value: T, logLevel: 'timelineEnd', label?: string): T;\n    transform<T>(value: T, logLevel: 'timeStamp', label?: string): T;\n    transform<T>(value: T, logLevel: 'group', groupTitle?: string, ...optionalParams: any[]): T;\n    transform<T>(value: T, logLevel: 'groupCollapsed', groupTitle?: string, ...optionalParams: any[]): T;\n    transform<T>(value: T, logLevel: 'groupEnd'): T;\n    transform<T>(value: T, logLevel: 'clear'): T;\n}\n"]}