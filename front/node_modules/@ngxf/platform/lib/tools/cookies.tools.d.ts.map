{"version":3,"file":"cookies.tools.d.ts","sources":["cookies.tools.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["export interface CookieOptionsArgs {\n    path?: string;\n    domain?: string;\n    expires?: string | Date;\n    secure?: boolean;\n}\nexport interface ICookies {\n    [key: string]: string[];\n}\nexport interface ICookieService {\n    get(key: string): string;\n    set(key: string, value: string, options?: CookieOptionsArgs): void;\n    remove(key: string, options?: CookieOptionsArgs): void;\n}\nexport declare class CookieOptions {\n    path: string;\n    domain: string;\n    expires: string | Date;\n    secure: boolean;\n    constructor({ path, domain, expires, secure }?: CookieOptionsArgs);\n    merge(options?: CookieOptionsArgs): CookieOptions;\n    private isPresent;\n}\nexport declare class BaseCookieOptions extends CookieOptions {\n    private baseHref;\n    constructor(baseHref: string);\n}\nexport declare class CookiesService implements ICookieService {\n    private defaultOptions?;\n    constructor(defaultOptions?: CookieOptions);\n    protected get cookieString(): string;\n    protected set cookieString(val: string);\n    private cookieReader;\n    private cookieWriter;\n    private buildCookieString;\n    private mergeOptions;\n    get(key: string): string;\n    set(key: string, value: string, options?: CookieOptionsArgs): void;\n    remove(key: string, options?: CookieOptionsArgs): void;\n}\n"]}