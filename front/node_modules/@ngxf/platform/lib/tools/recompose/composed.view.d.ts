import { ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';
export declare const PARENT_CONTEXT_TOKEN: unique symbol;
export interface ComposedContext {
    [PARENT_CONTEXT_TOKEN]: TemplateRef<ComposedContext>[];
    children: ComposedView<ComposedContext>;
    [key: string]: any;
}
export declare class ComposedView<C> {
    private viewContainerRef;
    private templateRefs?;
    elementRef: ElementRef;
    private context;
    private viewRef;
    constructor(viewContainerRef: ViewContainerRef, templateRefs?: TemplateRef<any>[]);
    createEmbeddedView(context: C): EmbeddedViewRef<C>;
    markForCheck(): void;
    detectChanges(): void;
    updateContext(update: (context: any, parent: any) => any): void;
    destroy(): void;
    private getParentTemplateRefs;
    private getHydratedParentContext;
}
export declare function findParentContext(view: any): ComposedContext;
export declare function isParentContext(context: any): context is ComposedContext;
