import { EventEmitter, InjectionToken, Injector, NgModuleFactoryLoader, OnChanges, OnDestroy, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
interface LazyContext {
    $implicit: any;
}
export declare const LAZY_COMPONENT_TOKEN: InjectionToken<Type<any>>;
export declare class LazyDirective implements OnChanges, OnDestroy {
    private templateRef;
    private viewContainer;
    private loader;
    private injector;
    lazy: string;
    lazyLoadChildren: string;
    lazyActivate: (component: any) => void;
    lazyDeactivate: (component: any) => void;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    private context;
    private get component();
    private componentRef;
    private get projectableNodes();
    private embeddedViewRef;
    private subscription;
    private ngModuleRef;
    constructor(templateRef: TemplateRef<LazyContext>, viewContainer: ViewContainerRef, loader: NgModuleFactoryLoader, injector: Injector);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private onLazyDidChanged;
    private loadAndRender;
    private load;
    private onActivate;
    private onDeactivate;
    private dispose;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LazyDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LazyDirective, "[lazy]", never, { "lazy": "lazy"; "lazyLoadChildren": "lazyLoadChildren"; "lazyActivate": "lazyActivate"; "lazyDeactivate": "lazyDeactivate"; }, { "activate": "activate"; "deactivate": "deactivate"; }, never>;
}
export {};

//# sourceMappingURL=lazy.directive.d.ts.map