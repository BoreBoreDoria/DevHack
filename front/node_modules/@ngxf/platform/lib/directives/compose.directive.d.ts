import { OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComposedView } from '../tools/recompose/composed.view';
import * as ɵngcc0 from '@angular/core';
interface ComposeContext {
    $implicit: ComposeFn<any>;
    compose: ComposeFn<any>;
}
declare type ComposeFn<T> = (templateRef: TemplateRef<T> | ComposedView<T>) => ComposedView<T>;
export declare class ComposeDirective implements OnChanges, OnDestroy {
    private templateRef;
    private viewContainerRef;
    compose: TemplateRef<any>[];
    composeOf: TemplateRef<any>[];
    private context;
    private viewRef;
    constructor(templateRef: TemplateRef<ComposeContext>, viewContainerRef: ViewContainerRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private onTemplateRefsDidChanged;
    private create;
    private destroy;
    private createComposeFn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ComposeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ComposeDirective, "[compose]", never, { "compose": "compose"; "composeOf": "composeOf"; }, {}, never>;
}
export {};

//# sourceMappingURL=compose.directive.d.ts.map