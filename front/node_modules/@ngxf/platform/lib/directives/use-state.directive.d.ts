import { OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
interface UseStateContext<T = any> {
    $implicit: {
        get: T;
        set: (value: T) => void;
        detectChanges: Function;
    };
}
export declare class UseStateDirective implements OnChanges, OnDestroy {
    private templateRef;
    private vcr;
    useStateDefault: any;
    private context;
    private embeddedViewRef;
    private value;
    constructor(templateRef: TemplateRef<UseStateContext>, vcr: ViewContainerRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UseStateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<UseStateDirective, "[useState]", never, { "useStateDefault": "useStateDefault"; }, {}, never>;
}
export {};

//# sourceMappingURL=use-state.directive.d.ts.map