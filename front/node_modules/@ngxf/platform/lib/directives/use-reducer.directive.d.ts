import { OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
interface Action {
    type: string;
    payload: any;
}
declare type Reducer<T = any> = (state: T, action: Action) => T;
interface UseReducerImplicitContext<T> {
    state: T;
    dispatch: (action: Action) => T;
    reducer: Reducer;
    detectChanges: Function;
}
interface UseReducerContext<T = any> {
    $implicit: UseReducerImplicitContext<T>;
}
export declare class UseReducerDirective implements OnChanges, OnDestroy {
    private templateRef;
    private vcr;
    useReducerInit: Reducer;
    useReducerWith: any;
    useReducerAnd: Action;
    private context;
    private embeddedViewRef;
    constructor(templateRef: TemplateRef<UseReducerContext>, vcr: ViewContainerRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UseReducerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<UseReducerDirective, "[useReducer]", never, { "useReducerInit": "useReducerInit"; "useReducerWith": "useReducerWith"; "useReducerAnd": "useReducerAnd"; }, {}, never>;
}
export {};

//# sourceMappingURL=use-reducer.directive.d.ts.map