import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
declare type ObservableOrPromise<T> = Observable<T> | Promise<T>;
interface AsyncContext {
    $implicit: any;
}
export declare class AsyncDirective implements OnChanges, OnDestroy {
    private templateRef;
    private viewContainer;
    private cd;
    async: ObservableOrPromise<any>;
    asyncFrom: ObservableOrPromise<any>;
    asyncNext: (value: any) => void;
    asyncError: (error: any) => void;
    asyncComplete: () => void;
    next: EventEmitter<any>;
    error: EventEmitter<any>;
    complete: EventEmitter<any>;
    private context;
    private viewRef;
    private componentInstance;
    private strategy;
    private subscription;
    constructor(templateRef: TemplateRef<AsyncContext>, viewContainer: ViewContainerRef, cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private onAsyncDidChanged;
    private subscribe;
    private onNext;
    private onError;
    private onComplete;
    private dispose;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AsyncDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AsyncDirective, "[async]", never, { "async": "async"; "asyncFrom": "asyncFrom"; "asyncNext": "asyncNext"; "asyncError": "asyncError"; "asyncComplete": "asyncComplete"; }, { "next": "next"; "error": "error"; "complete": "complete"; }, never>;
}
export {};

//# sourceMappingURL=async.directive.d.ts.map